"""adding bundle key

Revision ID: 2416fc891646
Revises: b1d18d85aa49
Create Date: 2025-09-26 10:52:15.175747+00:00

"""
import random
import string
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

from aci.common.db.sql_models import BUNDLE_KEY_LENGTH


# revision identifiers, used by Alembic.
revision: str = '2416fc891646'
down_revision: Union[str, None] = 'b1d18d85aa49'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:


    # Obtain all existing records in the table
    conn = op.get_bind()
    result = conn.execute(sa.text(f"SELECT id FROM mcp_server_bundles"))
    ids = [r[0] for r in result]

    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('mcp_server_bundles', sa.Column('bundle_key', sa.String(length=512)))
    op.create_unique_constraint('uc_mcp_server_bundles_bundle_key', 'mcp_server_bundles', ['bundle_key'])

    # Backfill bundle key for existing records
    for id in ids:
        bundle_key = generate_alphanumeric_string(BUNDLE_KEY_LENGTH, string.ascii_letters + string.digits)
        conn.execute(sa.text(f"UPDATE mcp_server_bundles SET bundle_key = :bundle_key WHERE id = :id"), {"bundle_key": bundle_key, "id": id})

    # Make bundle key nullable
    op.alter_column('mcp_server_bundles', 'bundle_key', nullable=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('uc_mcp_server_bundles_bundle_key', 'mcp_server_bundles', type_='unique')
    op.drop_column('mcp_server_bundles', 'bundle_key')
    # ### end Alembic commands ###


def generate_alphanumeric_string(
    length: int, character_pool: str = string.ascii_letters + string.digits
) -> str:
    """
    Generate a random alphanumeric string of a given length.
    Convenient to call with customized `character_pool`, examples:
        "ABCDE" / string.digits + string.ascii_uppercase / string.ascii_letters
    """
    return "".join(random.choices(character_pool, k=length))
