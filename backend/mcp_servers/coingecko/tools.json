[
  {
    "name": "COINGECKO__GET_ASSET_PLATFORMS",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query all the asset platforms on CoinGecko**\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      id: {\n        type: 'string',\n        description: 'asset platform ID'\n      },\n      chain_identifier: {\n        type: 'number',\n        description: 'chainlist\\'s chain ID'\n      },\n      image: {\n        type: 'object',\n        description: 'image of the asset platform',\n        properties: {\n          large: {\n            type: 'string'\n          },\n          small: {\n            type: 'string'\n          },\n          thumb: {\n            type: 'string'\n          }\n        }\n      },\n      name: {\n        type: 'string',\n        description: 'chain name'\n      },\n      native_coin_id: {\n        type: 'string',\n        description: 'chain native coin ID'\n      },\n      shortname: {\n        type: 'string',\n        description: 'chain shortname'\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_asset_platforms",
      "canonical_tool_description_hash": "ecd606cf4964075aef799b497b9eced62af6384f11dd623a5d6043c543f1c7b0",
      "canonical_tool_input_schema_hash": "ecc0d37db38b63e97e9da5d673c5d4b45da235e5b831afcd2d07592d2ef7b010"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "apply relevant filters to results",
          "enum": ["nft"]
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": []
    }
  },
  {
    "name": "COINGECKO__GET_ID_COINS",
    "description": "This endpoint allows you to **query all the metadata (image, websites, socials, description, contract address, etc.) and market data (price, ATH, exchange tickers, etc.) of a coin from the CoinGecko coin page based on a particular coin ID**",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_id_coins",
      "canonical_tool_description_hash": "a9cc63a9bee125f4f23cfd4c4fea42aea075fc265e3fce9271128aab4568bb2f",
      "canonical_tool_input_schema_hash": "982a26c5c32daa4cad3e409468a0c3c06c62d01559b82be2d3bb579737e9a423"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "community_data": {
          "type": "boolean",
          "description": "include community data, default: true"
        },
        "developer_data": {
          "type": "boolean",
          "description": "include developer data, default: true"
        },
        "dex_pair_format": {
          "type": "string",
          "description": "set to `symbol` to display DEX pair base and target as symbols, default: `contract_address`",
          "enum": ["contract_address", "symbol"]
        },
        "localization": {
          "type": "boolean",
          "description": "include all the localized languages in the response, default: true"
        },
        "market_data": {
          "type": "boolean",
          "description": "include market data, default: true"
        },
        "sparkline": {
          "type": "boolean",
          "description": "include sparkline 7 days data, default: false"
        },
        "tickers": {
          "type": "boolean",
          "description": "include tickers data, default: true"
        }
      },
      "required": ["id"]
    }
  },
  {
    "name": "COINGECKO__GET_LIST_COINS_CATEGORIES",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query all the coins categories on CoinGecko**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    category_id: {\n      type: 'string',\n      description: 'category ID'\n    },\n    name: {\n      type: 'string',\n      description: 'category name'\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_list_coins_categories",
      "canonical_tool_description_hash": "a7c373519230436b1facd0274065fc90592e5b879475b0ed5d495df4b04bade3",
      "canonical_tool_input_schema_hash": "dbdd9edb9a8e32e4177c31ea4c9a8b9eb68069748aa52e1903c95117d86d7312"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": []
    }
  },
  {
    "name": "COINGECKO__GET_NEW_COINS_LIST",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query the latest 200 coins that recently listed on CoinGecko**\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      id: {\n        type: 'string',\n        description: 'coin ID'\n      },\n      activated_at: {\n        type: 'number',\n        description: 'timestamp when coin was activated on CoinGecko'\n      },\n      name: {\n        type: 'string',\n        description: 'coin name'\n      },\n      symbol: {\n        type: 'string',\n        description: 'coin symbol'\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_new_coins_list",
      "canonical_tool_description_hash": "66e7a12153f0b57fb0ba2106d38abdd29e79092bc6fe38dd544fcdd7e17bb8c3",
      "canonical_tool_input_schema_hash": "dbdd9edb9a8e32e4177c31ea4c9a8b9eb68069748aa52e1903c95117d86d7312"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": []
    }
  },
  {
    "name": "COINGECKO__GET_COINS_MARKETS",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query all the supported coins with price, market cap, volume and market related data**\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      id: {\n        type: 'string',\n        description: 'coin ID'\n      },\n      ath: {\n        type: 'number',\n        description: 'coin all time high (ATH) in currency'\n      },\n      ath_change_percentage: {\n        type: 'number',\n        description: 'coin all time high (ATH) change in percentage'\n      },\n      ath_date: {\n        type: 'string',\n        description: 'coin all time high (ATH) date',\n        format: 'date-time'\n      },\n      atl: {\n        type: 'number',\n        description: 'coin all time low (atl) in currency'\n      },\n      atl_change_percentage: {\n        type: 'number',\n        description: 'coin all time low (atl) change in percentage'\n      },\n      atl_date: {\n        type: 'string',\n        description: 'coin all time low (atl) date',\n        format: 'date-time'\n      },\n      circulating_supply: {\n        type: 'number',\n        description: 'coin circulating supply'\n      },\n      current_price: {\n        type: 'number',\n        description: 'coin current price in currency'\n      },\n      fully_diluted_valuation: {\n        type: 'number',\n        description: 'coin fully diluted valuation (fdv) in currency'\n      },\n      high_24h: {\n        type: 'number',\n        description: 'coin 24hr price high in currency'\n      },\n      image: {\n        type: 'string',\n        description: 'coin image url'\n      },\n      last_updated: {\n        type: 'string',\n        description: 'coin last updated timestamp',\n        format: 'date-time'\n      },\n      low_24h: {\n        type: 'number',\n        description: 'coin 24hr price low in currency'\n      },\n      market_cap: {\n        type: 'number',\n        description: 'coin market cap in currency'\n      },\n      market_cap_change_24h: {\n        type: 'number',\n        description: 'coin 24hr market cap change in currency'\n      },\n      market_cap_change_percentage_24h: {\n        type: 'number',\n        description: 'coin 24hr market cap change in percentage'\n      },\n      market_cap_rank: {\n        type: 'number',\n        description: 'coin rank by market cap'\n      },\n      max_supply: {\n        type: 'number',\n        description: 'coin max supply'\n      },\n      name: {\n        type: 'string',\n        description: 'coin name'\n      },\n      price_change_24h: {\n        type: 'number',\n        description: 'coin 24hr price change in currency'\n      },\n      price_change_percentage_24h: {\n        type: 'number',\n        description: 'coin 24hr price change in percentage'\n      },\n      roi: {\n        type: 'object',\n        description: 'return on investment data',\n        properties: {\n          currency: {\n            type: 'string',\n            description: 'ROI currency'\n          },\n          percentage: {\n            type: 'number',\n            description: 'ROI percentage'\n          },\n          times: {\n            type: 'number',\n            description: 'ROI multiplier'\n          }\n        },\n        required: [          'currency',\n          'percentage',\n          'times'\n        ]\n      },\n      symbol: {\n        type: 'string',\n        description: 'coin symbol'\n      },\n      total_supply: {\n        type: 'number',\n        description: 'coin total supply'\n      },\n      total_volume: {\n        type: 'number',\n        description: 'coin total trading volume in currency'\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_coins_markets",
      "canonical_tool_description_hash": "a4116f67b8163ac3c73b81cd90b6dfa49b72509b3fdd98be15adea2e72fdd9b5",
      "canonical_tool_input_schema_hash": "05cb9fe6e7d82cd0bc99031c44c2133223fca8eb7d0a5d49f8c6f9921175ebec"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "vs_currency": {
          "type": "string",
          "description": "target currency of coins and market data \n *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies)."
        },
        "category": {
          "type": "string",
          "description": "filter based on coins' category \n *refers to [`/coins/categories/list`](/reference/coins-categories-list)."
        },
        "ids": {
          "type": "string",
          "description": "coins' IDs, comma-separated if querying more than 1 coin. \n *refers to [`/coins/list`](/reference/coins-list)."
        },
        "include_tokens": {
          "type": "string",
          "description": "for `symbols` lookups, specify `all` to include all matching tokens \n Default `top` returns top-ranked tokens (by market cap or volume)",
          "enum": ["top", "all"]
        },
        "locale": {
          "type": "string",
          "description": "language background, default: en",
          "enum": [
            "ar",
            "bg",
            "cs",
            "da",
            "de",
            "el",
            "en",
            "es",
            "fi",
            "fr",
            "he",
            "hi",
            "hr",
            "hu",
            "id",
            "it",
            "ja",
            "ko",
            "lt",
            "nl",
            "no",
            "pl",
            "pt",
            "ro",
            "ru",
            "sk",
            "sl",
            "sv",
            "th",
            "tr",
            "uk",
            "vi",
            "zh",
            "zh-tw"
          ]
        },
        "names": {
          "type": "string",
          "description": "coins' names, comma-separated if querying more than 1 coin."
        },
        "order": {
          "type": "string",
          "description": "sort result by field, default: market_cap_desc",
          "enum": [
            "market_cap_asc",
            "market_cap_desc",
            "volume_asc",
            "volume_desc",
            "id_asc",
            "id_desc"
          ]
        },
        "page": {
          "type": "number",
          "description": "page through results, default: 1"
        },
        "per_page": {
          "type": "number",
          "description": "total results per page, default: 100 \n Valid values: 1...250"
        },
        "precision": {
          "type": "string",
          "description": "decimal place for currency price value",
          "enum": [
            "full",
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18"
          ]
        },
        "price_change_percentage": {
          "type": "string",
          "description": "include price change percentage timeframe, comma-separated if query more than 1 timeframe \n Valid values: 1h, 24h, 7d, 14d, 30d, 200d, 1y"
        },
        "sparkline": {
          "type": "boolean",
          "description": "include sparkline 7 days data, default: false"
        },
        "symbols": {
          "type": "string",
          "description": "coins' symbols, comma-separated if querying more than 1 coin."
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["vs_currency"]
    }
  },
  {
    "name": "COINGECKO__GET_COINS_TOP_GAINERS_LOSERS",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query the top 30 coins with largest price gain and loss by a specific time duration**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    top_gainers: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string',\n            description: 'coin ID'\n          },\n          image: {\n            type: 'string',\n            description: 'coin image url'\n          },\n          market_cap_rank: {\n            type: 'number',\n            description: 'coin rank by market cap'\n          },\n          name: {\n            type: 'string',\n            description: 'coin name'\n          },\n          symbol: {\n            type: 'string',\n            description: 'coin symbol'\n          },\n          usd: {\n            type: 'number',\n            description: 'coin price in USD'\n          },\n          usd_14d_change: {\n            type: 'number',\n            description: 'coin 14 day change percentage in USD'\n          },\n          usd_1h_change: {\n            type: 'number',\n            description: 'coin 1hr change percentage in USD'\n          },\n          usd_1y_change: {\n            type: 'number',\n            description: 'coin 1 year change percentage in USD'\n          },\n          usd_200d_change: {\n            type: 'number',\n            description: 'coin 200 day change percentage in USD'\n          },\n          usd_24h_change: {\n            type: 'number',\n            description: 'coin 24hr change percentage in USD'\n          },\n          usd_24h_vol: {\n            type: 'number',\n            description: 'coin 24hr volume in USD'\n          },\n          usd_30d_change: {\n            type: 'number',\n            description: 'coin 30 day change percentage in USD'\n          },\n          usd_7d_change: {\n            type: 'number',\n            description: 'coin 7 day change percentage in USD'\n          }\n        }\n      }\n    },\n    top_losers: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string',\n            description: 'coin ID'\n          },\n          image: {\n            type: 'string',\n            description: 'coin image url'\n          },\n          market_cap_rank: {\n            type: 'number',\n            description: 'coin rank by market cap'\n          },\n          name: {\n            type: 'string',\n            description: 'coin name'\n          },\n          symbol: {\n            type: 'string',\n            description: 'coin symbol'\n          },\n          usd: {\n            type: 'number',\n            description: 'coin price in USD'\n          },\n          usd_14d_change: {\n            type: 'number',\n            description: 'coin 14 day change percentage in USD'\n          },\n          usd_1h_change: {\n            type: 'number',\n            description: 'coin 1hr change percentage in USD'\n          },\n          usd_1y_change: {\n            type: 'number',\n            description: 'coin 1 year change percentage in USD'\n          },\n          usd_200d_change: {\n            type: 'number',\n            description: 'coin 200 day change percentage in USD'\n          },\n          usd_24h_change: {\n            type: 'number',\n            description: 'coin 24hr change percentage in USD'\n          },\n          usd_24h_vol: {\n            type: 'number',\n            description: 'coin 24hr volume in USD'\n          },\n          usd_30d_change: {\n            type: 'number',\n            description: 'coin 30 day change percentage in USD'\n          },\n          usd_7d_change: {\n            type: 'number',\n            description: 'coin 7 day change percentage in USD'\n          }\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_coins_top_gainers_losers",
      "canonical_tool_description_hash": "e19d2e7c828699643f92e858f7cb52af9ba0d76eb359972061e77c3b14fe248d",
      "canonical_tool_input_schema_hash": "02f3e380fbf2995c6e7e5c1b2e9f930a5a0a872d5a97be158d52874824c95bcd"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "vs_currency": {
          "type": "string",
          "description": "target currency of coins \n *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies)."
        },
        "duration": {
          "type": "string",
          "description": "filter result by time range \n Default value: `24h`",
          "enum": ["1h", "24h", "7d", "14d", "30d", "60d", "1y"]
        },
        "price_change_percentage": {
          "type": "string",
          "description": "include price change percentage timeframe, comma-separated if query more than 1 price change percentage timeframe \n Valid values: 1h, 24h, 7d, 14d, 30d, 200d, 1y"
        },
        "top_coins": {
          "type": "string",
          "description": "filter result by market cap ranking (top 300 to 1000) or all coins (including coins that do not have market cap) \n Default value: `1000`",
          "enum": ["300", "500", "1000", "all"]
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["vs_currency"]
    }
  },
  {
    "name": "COINGECKO__GET_COINS_CONTRACT",
    "description": "This endpoint allows you to **query all the metadata (image, websites, socials, description, contract address, etc.) and market data (price, ATH, exchange tickers, etc.) of a coin from the CoinGecko coin page based on an asset platform and a particular token contract address**",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_coins_contract",
      "canonical_tool_description_hash": "7cf2e9c05e2149449c254c7f6d554e48b332a38e15e72bd1fc7d18f14d02d425",
      "canonical_tool_input_schema_hash": "b457ec762fb1e9526589cfd70cf3f7dbad3695737002726737213f352eb1f5a9"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "contract_address": {
          "type": "string"
        }
      },
      "required": ["id", "contract_address"]
    }
  },
  {
    "name": "COINGECKO__GET_RANGE_CONTRACT_COINS_MARKET_CHART",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **get the historical chart data within certain time range in UNIX along with price, market cap and 24hr volume based on asset platform and particular token contract address**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    market_caps: {\n      type: 'array',\n      items: {\n        type: 'array',\n        items: {\n          type: 'number'\n        }\n      }\n    },\n    prices: {\n      type: 'array',\n      items: {\n        type: 'array',\n        items: {\n          type: 'number'\n        }\n      }\n    },\n    total_volumes: {\n      type: 'array',\n      items: {\n        type: 'array',\n        items: {\n          type: 'number'\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_range_contract_coins_market_chart",
      "canonical_tool_description_hash": "ce13b7485f03860545623d4311655b5a85fa05f0c802a289641ae7d7b1d73963",
      "canonical_tool_input_schema_hash": "9a845f9d4dae12ac7b6d55959140958dae57e1bc631ec7fdd9fbe42fb48dfe00"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "contract_address": {
          "type": "string"
        },
        "from": {
          "type": "string",
          "description": "starting date in ISO date string (`YYYY-MM-DD` or `YYYY-MM-DDTHH:MM`) or UNIX timestamp. \n **use ISO date string for best compatibility**"
        },
        "to": {
          "type": "string",
          "description": "ending date in ISO date string (`YYYY-MM-DD` or `YYYY-MM-DDTHH:MM`) or UNIX timestamp. \n **use ISO date string for best compatibility**"
        },
        "vs_currency": {
          "type": "string",
          "description": "target currency of market data \n *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies)."
        },
        "interval": {
          "type": "string",
          "description": "data interval, leave empty for auto granularity",
          "enum": ["5m", "hourly", "daily"]
        },
        "precision": {
          "type": "string",
          "description": "decimal place for currency price value",
          "enum": [
            "full",
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18"
          ]
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["id", "contract_address", "from", "to", "vs_currency"]
    }
  },
  {
    "name": "COINGECKO__GET_COINS_HISTORY",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query the historical data (price, market cap, 24hrs volume, ...) at a given date for a coin based on a particular coin ID**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    id: {\n      type: 'string',\n      description: 'coin ID'\n    },\n    community_data: {\n      type: 'object',\n      description: 'coin community data',\n      properties: {\n        facebook_likes: {\n          type: 'number',\n          description: 'coin facebook likes'\n        },\n        reddit_accounts_active_48h: {\n          type: 'number',\n          description: 'coin reddit accounts active 48h'\n        },\n        reddit_average_comments_48h: {\n          type: 'number',\n          description: 'coin reddit average comments 48h'\n        },\n        reddit_average_posts_48h: {\n          type: 'number',\n          description: 'coin reddit average posts 48h'\n        },\n        reddit_subscribers: {\n          type: 'number',\n          description: 'coin reddit subscribers'\n        }\n      }\n    },\n    developer_data: {\n      type: 'object',\n      description: 'coin developer data',\n      properties: {\n        closed_issues: {\n          type: 'number',\n          description: 'coin repository closed issues'\n        },\n        code_additions_deletions_4_weeks: {\n          type: 'object',\n          description: 'coin code additions deletions 4 weeks',\n          properties: {\n            additions: {\n              type: 'number'\n            },\n            deletions: {\n              type: 'number'\n            }\n          }\n        },\n        commit_count_4_weeks: {\n          type: 'number',\n          description: 'coin commit count 4 weeks'\n        },\n        forks: {\n          type: 'number',\n          description: 'coin repository forks'\n        },\n        pull_request_contributors: {\n          type: 'number',\n          description: 'coin repository pull request contributors'\n        },\n        pull_requests_merged: {\n          type: 'number',\n          description: 'coin repository pull requests merged'\n        },\n        stars: {\n          type: 'number',\n          description: 'coin repository stars'\n        },\n        subscribers: {\n          type: 'number',\n          description: 'coin repository subscribers'\n        },\n        total_issues: {\n          type: 'number',\n          description: 'coin repository total issues'\n        }\n      }\n    },\n    image: {\n      type: 'object',\n      description: 'coin image url',\n      properties: {\n        small: {\n          type: 'string'\n        },\n        thumb: {\n          type: 'string'\n        }\n      }\n    },\n    localization: {\n      type: 'object',\n      description: 'coin localization',\n      additionalProperties: true\n    },\n    market_data: {\n      type: 'object',\n      description: 'coin market data',\n      properties: {\n        current_price: {\n          type: 'object',\n          description: 'coin current price',\n          properties: {\n            btc: {\n              type: 'number'\n            },\n            eur: {\n              type: 'number'\n            },\n            usd: {\n              type: 'number'\n            }\n          }\n        },\n        market_cap: {\n          type: 'object',\n          description: 'coin market cap',\n          properties: {\n            btc: {\n              type: 'number'\n            },\n            eur: {\n              type: 'number'\n            },\n            usd: {\n              type: 'number'\n            }\n          }\n        },\n        total_volume: {\n          type: 'object',\n          description: 'coin total volume',\n          properties: {\n            btc: {\n              type: 'number'\n            },\n            eur: {\n              type: 'number'\n            },\n            usd: {\n              type: 'number'\n            }\n          }\n        }\n      }\n    },\n    name: {\n      type: 'string',\n      description: 'coin name'\n    },\n    public_interest_stats: {\n      type: 'object',\n      description: 'coin public interest stats',\n      properties: {\n        alexa_rank: {\n          type: 'number',\n          description: 'coin alexa rank'\n        },\n        bing_matches: {\n          type: 'number',\n          description: 'coin bing matches'\n        }\n      }\n    },\n    symbol: {\n      type: 'string',\n      description: 'coin symbol'\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_coins_history",
      "canonical_tool_description_hash": "b6e0cf8a9d1173ca89947a645e2ed39584128ceb9183385199ca24438c66e920",
      "canonical_tool_input_schema_hash": "1728a49d5375964645a60cb25cf03b7d2c4fed0836c2e7ade509a982e9af2aab"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "description": "date of data snapshot (`YYYY-MM-DD` or `YYYY-MM-DDTHH:MM`)"
        },
        "localization": {
          "type": "boolean",
          "description": "include all the localized languages in response, default: true"
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["id", "date"]
    }
  },
  {
    "name": "COINGECKO__GET_RANGE_COINS_MARKET_CHART",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **get the historical chart data of a coin within certain time range in UNIX along with price, market cap and 24hr volume based on particular coin ID**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    market_caps: {\n      type: 'array',\n      items: {\n        type: 'array',\n        items: {\n          type: 'number'\n        }\n      }\n    },\n    prices: {\n      type: 'array',\n      items: {\n        type: 'array',\n        items: {\n          type: 'number'\n        }\n      }\n    },\n    total_volumes: {\n      type: 'array',\n      items: {\n        type: 'array',\n        items: {\n          type: 'number'\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_range_coins_market_chart",
      "canonical_tool_description_hash": "ce2ea12653215b156c351be7a58840599857274d5e020819d99bffec34c00b16",
      "canonical_tool_input_schema_hash": "2835e20c97e42f6c44dc897046c521df1315ea7f156ad6f92136181423b6d4df"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "from": {
          "type": "string",
          "description": "starting date in ISO date string (`YYYY-MM-DD` or `YYYY-MM-DDTHH:MM`) or UNIX timestamp. \n **use ISO date string for best compatibility**"
        },
        "to": {
          "type": "string",
          "description": "ending date in ISO date string (`YYYY-MM-DD` or `YYYY-MM-DDTHH:MM`) or UNIX timestamp. \n **use ISO date string for best compatibility**"
        },
        "vs_currency": {
          "type": "string",
          "description": "target currency of market data \n *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies)."
        },
        "interval": {
          "type": "string",
          "description": "data interval, leave empty for auto granularity",
          "enum": ["5m", "hourly", "daily"]
        },
        "precision": {
          "type": "string",
          "description": "decimal place for currency price value",
          "enum": [
            "full",
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18"
          ]
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["id", "from", "to", "vs_currency"]
    }
  },
  {
    "name": "COINGECKO__GET_RANGE_COINS_OHLC",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **get the OHLC chart (Open, High, Low, Close) of a coin within a range of timestamp based on particular coin ID**\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    type: 'array',\n    items: {\n      type: 'number'\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_range_coins_ohlc",
      "canonical_tool_description_hash": "8690e606667da3aab7ad5aab23ddb54a469911351b1a491bab6547f9ea35f1ac",
      "canonical_tool_input_schema_hash": "666ca9c4d3381e9572935c1f38dba0769f9d869010398369bd1be4a1a3c64306"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "from": {
          "type": "string",
          "description": "starting date in ISO date string (`YYYY-MM-DD` or `YYYY-MM-DDTHH:MM`) or UNIX timestamp. \n **use ISO date string for best compatibility**"
        },
        "interval": {
          "type": "string",
          "description": "data interval",
          "enum": ["daily", "hourly"]
        },
        "to": {
          "type": "string",
          "description": "ending date in ISO date string (`YYYY-MM-DD` or `YYYY-MM-DDTHH:MM`) or UNIX timestamp. \n **use ISO date string for best compatibility**"
        },
        "vs_currency": {
          "type": "string",
          "description": "target currency of price data \n *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies)."
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["id", "from", "interval", "to", "vs_currency"]
    }
  },
  {
    "name": "COINGECKO__GET_ID_EXCHANGES",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query exchange's data (name, year established, country, ...), exchange volume in BTC and top 100 tickers based on exchange's ID**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    alert_notice: {\n      type: 'string',\n      description: 'alert notice for exchange'\n    },\n    centralized: {\n      type: 'boolean',\n      description: 'exchange type (true for centralized, false for decentralized)'\n    },\n    coins: {\n      type: 'number',\n      description: 'number of coins listed on the exchange'\n    },\n    country: {\n      type: 'string',\n      description: 'exchange incorporated country'\n    },\n    description: {\n      type: 'string',\n      description: 'exchange description'\n    },\n    facebook_url: {\n      type: 'string',\n      description: 'exchange facebook url'\n    },\n    has_trading_incentive: {\n      type: 'boolean',\n      description: 'exchange trading incentive'\n    },\n    image: {\n      type: 'string',\n      description: 'exchange image url'\n    },\n    name: {\n      type: 'string',\n      description: 'exchange name'\n    },\n    other_url_1: {\n      type: 'string'\n    },\n    other_url_2: {\n      type: 'string'\n    },\n    pairs: {\n      type: 'number',\n      description: 'number of trading pairs on the exchange'\n    },\n    public_notice: {\n      type: 'string',\n      description: 'public notice for exchange'\n    },\n    reddit_url: {\n      type: 'string',\n      description: 'exchange reddit url'\n    },\n    slack_url: {\n      type: 'string',\n      description: 'exchange slack url'\n    },\n    telegram_url: {\n      type: 'string',\n      description: 'exchange telegram url'\n    },\n    tickers: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          name: {\n            type: 'string',\n            description: 'coin name'\n          },\n          tickers: {\n            type: 'array',\n            description: 'list of tickers',\n            items: {\n              type: 'object',\n              properties: {\n                base: {\n                  type: 'string',\n                  description: 'coin ticker base currency'\n                },\n                bid_ask_spread_percentage: {\n                  type: 'number',\n                  description: 'coin ticker bid ask spread percentage'\n                },\n                coin_id: {\n                  type: 'string',\n                  description: 'coin ticker base currency coin ID'\n                },\n                converted_last: {\n                  type: 'object',\n                  description: 'coin ticker converted last price',\n                  properties: {\n                    btc: {\n                      type: 'number'\n                    },\n                    eth: {\n                      type: 'number'\n                    },\n                    usd: {\n                      type: 'number'\n                    }\n                  }\n                },\n                converted_volume: {\n                  type: 'object',\n                  description: 'coin ticker converted volume',\n                  properties: {\n                    btc: {\n                      type: 'number'\n                    },\n                    eth: {\n                      type: 'number'\n                    },\n                    usd: {\n                      type: 'number'\n                    }\n                  }\n                },\n                cost_to_move_down_usd: {\n                  type: 'number',\n                  description: 'coin ticker cost to move down in usd'\n                },\n                cost_to_move_up_usd: {\n                  type: 'number',\n                  description: 'coin ticker cost to move up in usd'\n                },\n                is_anomaly: {\n                  type: 'boolean',\n                  description: 'coin ticker anomaly'\n                },\n                is_stale: {\n                  type: 'boolean',\n                  description: 'coin ticker stale'\n                },\n                last: {\n                  type: 'number',\n                  description: 'coin ticker last price'\n                },\n                last_fetch_at: {\n                  type: 'string',\n                  description: 'coin ticker last fetch timestamp'\n                },\n                last_traded_at: {\n                  type: 'string',\n                  description: 'coin ticker last traded timestamp'\n                },\n                market: {\n                  type: 'object',\n                  description: 'coin ticker exchange',\n                  properties: {\n                    has_trading_incentive: {\n                      type: 'boolean',\n                      description: 'exchange trading incentive'\n                    },\n                    identifier: {\n                      type: 'string',\n                      description: 'exchange identifier'\n                    },\n                    name: {\n                      type: 'string',\n                      description: 'exchange name'\n                    },\n                    logo: {\n                      type: 'string',\n                      description: 'exchange image url'\n                    }\n                  },\n                  required: [                    'has_trading_incentive',\n                    'identifier',\n                    'name'\n                  ]\n                },\n                target: {\n                  type: 'string',\n                  description: 'coin ticker target currency'\n                },\n                target_coin_id: {\n                  type: 'string',\n                  description: 'coin ticker target currency coin ID'\n                },\n                timestamp: {\n                  type: 'string',\n                  description: 'coin ticker timestamp'\n                },\n                token_info_url: {\n                  type: 'string',\n                  description: 'coin ticker token info url'\n                },\n                trade_url: {\n                  type: 'string',\n                  description: 'coin ticker trade url'\n                },\n                trust_score: {\n                  type: 'string',\n                  description: 'coin ticker trust score'\n                },\n                volume: {\n                  type: 'number',\n                  description: 'coin ticker volume'\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    trade_volume_24h_btc: {\n      type: 'number'\n    },\n    trust_score: {\n      type: 'number',\n      description: 'exchange trust score'\n    },\n    trust_score_rank: {\n      type: 'number',\n      description: 'exchange trust score rank'\n    },\n    twitter_handle: {\n      type: 'string',\n      description: 'exchange twitter handle'\n    },\n    url: {\n      type: 'string',\n      description: 'exchange website url'\n    },\n    year_established: {\n      type: 'number',\n      description: 'exchange established year'\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_id_exchanges",
      "canonical_tool_description_hash": "ceff6e1ed9da9e148881c0a04f54621320a12f63a8355769cfe5537035991f25",
      "canonical_tool_input_schema_hash": "e2d2d0a046e434de52232500a03b6dca1d76c861652a1d833483b2de510b3f13"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "dex_pair_format": {
          "type": "string",
          "description": "set to `symbol` to display DEX pair base and target as symbols, default: `contract_address`",
          "enum": ["contract_address", "symbol"]
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["id"]
    }
  },
  {
    "name": "COINGECKO__GET_LIST_EXCHANGES",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query all the exchanges with ID and name**\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      id: {\n        type: 'string',\n        description: 'exchange ID'\n      },\n      name: {\n        type: 'string',\n        description: 'exchange name'\n      }\n    },\n    required: [      'id',\n      'name'\n    ]\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_list_exchanges",
      "canonical_tool_description_hash": "585e57e8f5076375fdbf39d5793345df6496b152f0c9f203c0e4e46faa0b8363",
      "canonical_tool_input_schema_hash": "fa5d4209a904034e1f3cf083b58f4946ccf149e18c851050dce55fc3c1ca8188"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "description": "filter by status of exchanges, default: active",
          "enum": ["active", "inactive"]
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": []
    }
  },
  {
    "name": "COINGECKO__GET_EXCHANGES_TICKERS",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query exchange's tickers based on exchange's ID**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n      description: 'coin name'\n    },\n    tickers: {\n      type: 'array',\n      description: 'list of tickers',\n      items: {\n        type: 'object',\n        properties: {\n          base: {\n            type: 'string',\n            description: 'coin ticker base currency'\n          },\n          bid_ask_spread_percentage: {\n            type: 'number',\n            description: 'coin ticker bid ask spread percentage'\n          },\n          coin_id: {\n            type: 'string',\n            description: 'coin ticker base currency coin ID'\n          },\n          converted_last: {\n            type: 'object',\n            description: 'coin ticker converted last price',\n            properties: {\n              btc: {\n                type: 'number'\n              },\n              eth: {\n                type: 'number'\n              },\n              usd: {\n                type: 'number'\n              }\n            }\n          },\n          converted_volume: {\n            type: 'object',\n            description: 'coin ticker converted volume',\n            properties: {\n              btc: {\n                type: 'number'\n              },\n              eth: {\n                type: 'number'\n              },\n              usd: {\n                type: 'number'\n              }\n            }\n          },\n          cost_to_move_down_usd: {\n            type: 'number',\n            description: 'coin ticker cost to move down in usd'\n          },\n          cost_to_move_up_usd: {\n            type: 'number',\n            description: 'coin ticker cost to move up in usd'\n          },\n          is_anomaly: {\n            type: 'boolean',\n            description: 'coin ticker anomaly'\n          },\n          is_stale: {\n            type: 'boolean',\n            description: 'coin ticker stale'\n          },\n          last: {\n            type: 'number',\n            description: 'coin ticker last price'\n          },\n          last_fetch_at: {\n            type: 'string',\n            description: 'coin ticker last fetch timestamp'\n          },\n          last_traded_at: {\n            type: 'string',\n            description: 'coin ticker last traded timestamp'\n          },\n          market: {\n            type: 'object',\n            description: 'coin ticker exchange',\n            properties: {\n              has_trading_incentive: {\n                type: 'boolean',\n                description: 'exchange trading incentive'\n              },\n              identifier: {\n                type: 'string',\n                description: 'exchange identifier'\n              },\n              name: {\n                type: 'string',\n                description: 'exchange name'\n              },\n              logo: {\n                type: 'string',\n                description: 'exchange image url'\n              }\n            },\n            required: [              'has_trading_incentive',\n              'identifier',\n              'name'\n            ]\n          },\n          target: {\n            type: 'string',\n            description: 'coin ticker target currency'\n          },\n          target_coin_id: {\n            type: 'string',\n            description: 'coin ticker target currency coin ID'\n          },\n          timestamp: {\n            type: 'string',\n            description: 'coin ticker timestamp'\n          },\n          token_info_url: {\n            type: 'string',\n            description: 'coin ticker token info url'\n          },\n          trade_url: {\n            type: 'string',\n            description: 'coin ticker trade url'\n          },\n          trust_score: {\n            type: 'string',\n            description: 'coin ticker trust score'\n          },\n          volume: {\n            type: 'number',\n            description: 'coin ticker volume'\n          }\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_exchanges_tickers",
      "canonical_tool_description_hash": "07cc02509acbb3f944fd79e01404b8154bc678e10c4310f31d36dc05663e860e",
      "canonical_tool_input_schema_hash": "67cf5100376a1ce9135de1d2fadb5256ee91191a8b5044be723d7c3c7f4ffea1"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "coin_ids": {
          "type": "string",
          "description": "filter tickers by coin IDs, comma-separated if querying more than 1 coin \n *refers to [`/coins/list`](/reference/coins-list)."
        },
        "depth": {
          "type": "boolean",
          "description": "include 2% orderbook depth (Example: cost_to_move_up_usd & cost_to_move_down_usd),default: false"
        },
        "dex_pair_format": {
          "type": "string",
          "description": "set to `symbol` to display DEX pair base and target as symbols, default: `contract_address`",
          "enum": ["contract_address", "symbol"]
        },
        "include_exchange_logo": {
          "type": "boolean",
          "description": "include exchange logo, default: false"
        },
        "order": {
          "type": "string",
          "description": "use this to sort the order of responses, default: trust_score_desc",
          "enum": [
            "market_cap_asc",
            "market_cap_desc",
            "trust_score_desc",
            "trust_score_asc",
            "volume_desc",
            "volume_asc",
            "base_target"
          ]
        },
        "page": {
          "type": "number",
          "description": "page through results"
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["id"]
    }
  },
  {
    "name": "COINGECKO__GET_RANGE_EXCHANGES_VOLUME_CHART",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query the historical volume chart data in BTC by specifying date range in UNIX based on exchange's ID**\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    type: 'array',\n    items: {\n      type: 'number'\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_range_exchanges_volume_chart",
      "canonical_tool_description_hash": "e45bd543ad7f48aacc545e828a876bd46118749c11af903c5a011574901f04dd",
      "canonical_tool_input_schema_hash": "c952bc531abdcf4c5cb1fc368a893f7f84fedd7bfd87a2839e8ec9cbe1cd08a5"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "from": {
          "type": "number",
          "description": "starting date in UNIX timestamp "
        },
        "to": {
          "type": "number",
          "description": "ending date in UNIX timestamp"
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["id", "from", "to"]
    }
  },
  {
    "name": "COINGECKO__GET_GLOBAL",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you **query cryptocurrency global data including active cryptocurrencies, markets, total crypto market cap and etc**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    data: {\n      type: 'object',\n      properties: {\n        active_cryptocurrencies: {\n          type: 'number',\n          description: 'number of active cryptocurrencies'\n        },\n        ended_icos: {\n          type: 'number',\n          description: 'number of ended icos'\n        },\n        market_cap_change_percentage_24h_usd: {\n          type: 'number',\n          description: 'cryptocurrencies market cap change percentage in 24 hours in usd'\n        },\n        market_cap_percentage: {\n          type: 'object',\n          description: 'cryptocurrencies market cap percentage',\n          properties: {\n            btc: {\n              type: 'number'\n            },\n            eth: {\n              type: 'number'\n            }\n          }\n        },\n        markets: {\n          type: 'number',\n          description: 'number of exchanges'\n        },\n        ongoing_icos: {\n          type: 'number',\n          description: 'number of ongoing icos'\n        },\n        total_market_cap: {\n          type: 'object',\n          description: 'cryptocurrencies total market cap',\n          properties: {\n            btc: {\n              type: 'number'\n            },\n            eth: {\n              type: 'number'\n            }\n          }\n        },\n        total_volume: {\n          type: 'object',\n          description: 'cryptocurrencies total volume',\n          properties: {\n            btc: {\n              type: 'number'\n            },\n            eth: {\n              type: 'number'\n            }\n          }\n        },\n        upcoming_icos: {\n          type: 'number',\n          description: 'number of upcoming icos'\n        },\n        updated_at: {\n          type: 'number'\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_global",
      "canonical_tool_description_hash": "24b0c4a9eff64b806c34a052b538039a658e2fbefc2a365fab9a43fb41d5cefc",
      "canonical_tool_input_schema_hash": "dbdd9edb9a8e32e4177c31ea4c9a8b9eb68069748aa52e1903c95117d86d7312"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": []
    }
  },
  {
    "name": "COINGECKO__GET_ID_NFTS",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query all the NFT data (name, floor price, 24hr volume ...) based on the NFT collection ID**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    id: {\n      type: 'string',\n      description: 'NFT collection ID'\n    },\n    asset_platform_id: {\n      type: 'string',\n      description: 'NFT collection asset platform ID'\n    },\n    ath: {\n      type: 'object',\n      description: 'NFT collection all time highs',\n      properties: {\n        native_currency: {\n          type: 'number'\n        },\n        usd: {\n          type: 'number'\n        }\n      }\n    },\n    ath_change_percentage: {\n      type: 'object',\n      description: 'NFT collection all time highs change percentage',\n      properties: {\n        native_currency: {\n          type: 'number'\n        },\n        usd: {\n          type: 'number'\n        }\n      }\n    },\n    ath_date: {\n      type: 'object',\n      description: 'NFT collection all time highs date',\n      properties: {\n        native_currency: {\n          type: 'string',\n          format: 'date-time'\n        },\n        usd: {\n          type: 'string',\n          format: 'date-time'\n        }\n      }\n    },\n    banner_image: {\n      type: 'object',\n      description: 'NFT collection banner image url',\n      properties: {\n        small: {\n          type: 'string'\n        }\n      }\n    },\n    contract_address: {\n      type: 'string',\n      description: 'NFT collection contract address'\n    },\n    description: {\n      type: 'string',\n      description: 'NFT collection description'\n    },\n    explorers: {\n      type: 'array',\n      description: 'NFT collection block explorers links',\n      items: {\n        type: 'object',\n        properties: {\n          link: {\n            type: 'string'\n          },\n          name: {\n            type: 'string'\n          }\n        }\n      }\n    },\n    floor_price: {\n      type: 'object',\n      description: 'NFT collection floor price',\n      properties: {\n        native_currency: {\n          type: 'number'\n        },\n        usd: {\n          type: 'number'\n        }\n      }\n    },\n    floor_price_14d_percentage_change: {\n      type: 'object',\n      description: 'NFT collection floor price 14 days percentage change',\n      properties: {\n        native_currency: {\n          type: 'number'\n        },\n        usd: {\n          type: 'number'\n        }\n      }\n    },\n    floor_price_1y_percentage_change: {\n      type: 'object',\n      description: 'NFT collection floor price 1 year percentage change',\n      properties: {\n        native_currency: {\n          type: 'number'\n        },\n        usd: {\n          type: 'number'\n        }\n      }\n    },\n    floor_price_24h_percentage_change: {\n      type: 'object',\n      properties: {\n        native_currency: {\n          type: 'number'\n        },\n        usd: {\n          type: 'number'\n        }\n      }\n    },\n    floor_price_30d_percentage_change: {\n      type: 'object',\n      description: 'NFT collection floor price 30 days percentage change',\n      properties: {\n        native_currency: {\n          type: 'number'\n        },\n        usd: {\n          type: 'number'\n        }\n      }\n    },\n    floor_price_60d_percentage_change: {\n      type: 'object',\n      description: 'NFT collection floor price 60 days percentage change',\n      properties: {\n        native_currency: {\n          type: 'number'\n        },\n        usd: {\n          type: 'number'\n        }\n      }\n    },\n    floor_price_7d_percentage_change: {\n      type: 'object',\n      description: 'NFT collection floor price 7 days percentage change',\n      properties: {\n        native_currency: {\n          type: 'number'\n        },\n        usd: {\n          type: 'number'\n        }\n      }\n    },\n    floor_price_in_usd_24h_percentage_change: {\n      type: 'number',\n      description: 'NFT collection floor price in usd 24 hours percentage change'\n    },\n    image: {\n      type: 'object',\n      description: 'NFT collection image url',\n      properties: {\n        small: {\n          type: 'string'\n        },\n        small_2x: {\n          type: 'string'\n        }\n      }\n    },\n    links: {\n      type: 'object',\n      description: 'NFT collection links',\n      properties: {\n        discord: {\n          type: 'string'\n        },\n        homepage: {\n          type: 'string'\n        },\n        twitter: {\n          type: 'string'\n        }\n      }\n    },\n    market_cap: {\n      type: 'object',\n      description: 'NFT collection market cap',\n      properties: {\n        native_currency: {\n          type: 'number'\n        },\n        usd: {\n          type: 'number'\n        }\n      }\n    },\n    market_cap_24h_percentage_change: {\n      type: 'object',\n      description: 'NFT collection market cap 24 hours percentage change',\n      properties: {\n        native_currency: {\n          type: 'number'\n        },\n        usd: {\n          type: 'number'\n        }\n      }\n    },\n    market_cap_rank: {\n      type: 'number',\n      description: 'coin market cap rank'\n    },\n    name: {\n      type: 'string',\n      description: 'NFT collection name'\n    },\n    native_currency: {\n      type: 'string',\n      description: 'NFT collection native currency'\n    },\n    native_currency_symbol: {\n      type: 'string',\n      description: 'NFT collection native currency symbol'\n    },\n    number_of_unique_addresses: {\n      type: 'number',\n      description: 'number of unique address owning the NFTs'\n    },\n    number_of_unique_addresses_24h_percentage_change: {\n      type: 'number',\n      description: 'number of unique address owning the NFTs 24 hours percentage change'\n    },\n    one_day_average_sale_price: {\n      type: 'number',\n      description: 'NFT collection one day average sale price'\n    },\n    one_day_average_sale_price_24h_percentage_change: {\n      type: 'number',\n      description: 'NFT collection one day average sale price 24 hours percentage change'\n    },\n    one_day_sales: {\n      type: 'number',\n      description: 'NFT collection one day sales'\n    },\n    one_day_sales_24h_percentage_change: {\n      type: 'number',\n      description: 'NFT collection one day sales 24 hours percentage change'\n    },\n    symbol: {\n      type: 'string',\n      description: 'NFT collection symbol'\n    },\n    total_supply: {\n      type: 'number',\n      description: 'NFT collection total supply'\n    },\n    user_favorites_count: {\n      type: 'number',\n      description: 'NFT collection user favorites count'\n    },\n    volume_24h: {\n      type: 'object',\n      description: 'NFT collection volume in 24 hours',\n      properties: {\n        native_currency: {\n          type: 'number'\n        },\n        usd: {\n          type: 'number'\n        }\n      }\n    },\n    volume_24h_percentage_change: {\n      type: 'object',\n      description: 'NFT collection volume in 24 hours percentage change',\n      properties: {\n        native_currency: {\n          type: 'number'\n        },\n        usd: {\n          type: 'number'\n        }\n      }\n    },\n    volume_in_usd_24h_percentage_change: {\n      type: 'number',\n      description: 'NFT collection volume in usd 24 hours percentage change'\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_id_nfts",
      "canonical_tool_description_hash": "1ae5223f845086bb663da7beef87dbf1f268cdd9368f9ad133121447e75ff3e2",
      "canonical_tool_input_schema_hash": "eb3bf10d11e5e81e7fa77cdc9195a5a41c4112b21a6f19d4c30fec0a3387cb65"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["id"]
    }
  },
  {
    "name": "COINGECKO__GET_LIST_NFTS",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query all supported NFTs with ID, contract address, name, asset platform ID and symbol on CoinGecko**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    id: {\n      type: 'string',\n      description: 'NFT collection ID'\n    },\n    asset_platform_id: {\n      type: 'string',\n      description: 'NFT collection asset platform ID'\n    },\n    contract_address: {\n      type: 'string',\n      description: 'NFT collection contract address'\n    },\n    name: {\n      type: 'string',\n      description: 'NFT collection name'\n    },\n    symbol: {\n      type: 'string',\n      description: 'NFT collection symbol'\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_list_nfts",
      "canonical_tool_description_hash": "29e7bf564145d92240732a1aa370980395c13e1ec8a410e052ed460a70c38cd2",
      "canonical_tool_input_schema_hash": "347e1c39bc0ab5e249c32c48144b94e5e6801894a698ada0b07ada10c2e5bc64"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "order": {
          "type": "string",
          "description": "use this to sort the order of responses",
          "enum": [
            "h24_volume_usd_asc",
            "h24_volume_usd_desc",
            "h24_volume_native_asc",
            "h24_volume_native_desc",
            "floor_price_native_asc",
            "floor_price_native_desc",
            "market_cap_native_asc",
            "market_cap_native_desc",
            "market_cap_usd_asc",
            "market_cap_usd_desc"
          ]
        },
        "page": {
          "type": "number",
          "description": "page through results"
        },
        "per_page": {
          "type": "number",
          "description": "total results per page \n Valid values: 1...250"
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": []
    }
  },
  {
    "name": "COINGECKO__GET_MARKETS_NFTS",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query all the supported NFT collections with floor price, market cap, volume and market related data on CoinGecko**\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      id: {\n        type: 'string',\n        description: 'NFT collection ID'\n      },\n      asset_platform_id: {\n        type: 'string',\n        description: 'NFT collection asset platform ID'\n      },\n      contract_address: {\n        type: 'string',\n        description: 'NFT collection contract address'\n      },\n      description: {\n        type: 'string',\n        description: 'NFT collection description'\n      },\n      floor_price: {\n        type: 'object',\n        description: 'NFT collection floor price',\n        properties: {\n          native_currency: {\n            type: 'number'\n          },\n          usd: {\n            type: 'number'\n          }\n        }\n      },\n      floor_price_24h_percentage_change: {\n        type: 'object',\n        description: 'NFT collection floor price 24 hours percentage change',\n        properties: {\n          native_currency: {\n            type: 'number'\n          },\n          usd: {\n            type: 'number'\n          }\n        }\n      },\n      floor_price_in_usd_24h_percentage_change: {\n        type: 'number',\n        description: 'NFT collection floor price in usd 24 hours percentage change'\n      },\n      image: {\n        type: 'object',\n        description: 'NFT collection image url',\n        properties: {\n          small: {\n            type: 'string'\n          },\n          small_2x: {\n            type: 'string'\n          }\n        }\n      },\n      market_cap: {\n        type: 'object',\n        description: 'NFT collection market cap',\n        properties: {\n          native_currency: {\n            type: 'number'\n          },\n          usd: {\n            type: 'number'\n          }\n        }\n      },\n      market_cap_24h_percentage_change: {\n        type: 'object',\n        description: 'NFT collection market cap 24 hours percentage change',\n        properties: {\n          native_currency: {\n            type: 'number'\n          },\n          usd: {\n            type: 'number'\n          }\n        }\n      },\n      market_cap_rank: {\n        type: 'number',\n        description: 'coin market cap rank'\n      },\n      name: {\n        type: 'string',\n        description: 'NFT collection name'\n      },\n      native_currency: {\n        type: 'string',\n        description: 'NFT collection native currency'\n      },\n      native_currency_symbol: {\n        type: 'string',\n        description: 'NFT collection native currency symbol'\n      },\n      number_of_unique_addresses: {\n        type: 'number',\n        description: 'number of unique address owning the NFTs'\n      },\n      number_of_unique_addresses_24h_percentage_change: {\n        type: 'number',\n        description: 'number of unique address owning the NFTs 24 hours percentage change'\n      },\n      one_day_average_sale_price: {\n        type: 'number',\n        description: 'NFT collection one day average sale price'\n      },\n      one_day_average_sale_price_24h_percentage_change: {\n        type: 'number',\n        description: 'NFT collection one day average sale price 24 hours percentage change'\n      },\n      one_day_sales: {\n        type: 'number',\n        description: 'NFT collection one day sales'\n      },\n      one_day_sales_24h_percentage_change: {\n        type: 'number',\n        description: 'NFT collection one day sales 24 hours percentage change'\n      },\n      symbol: {\n        type: 'string',\n        description: 'NFT collection symbol'\n      },\n      total_supply: {\n        type: 'number',\n        description: 'NFT collection total supply'\n      },\n      volume_24h: {\n        type: 'object',\n        description: 'NFT collection volume in 24 hours',\n        properties: {\n          native_currency: {\n            type: 'number'\n          },\n          usd: {\n            type: 'number'\n          }\n        }\n      },\n      volume_24h_percentage_change: {\n        type: 'object',\n        description: 'NFT collection volume in 24 hours percentage change',\n        properties: {\n          native_currency: {\n            type: 'number'\n          },\n          usd: {\n            type: 'number'\n          }\n        }\n      },\n      volume_in_usd_24h_percentage_change: {\n        type: 'number',\n        description: 'NFT collection volume in usd 24 hours percentage change'\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_markets_nfts",
      "canonical_tool_description_hash": "c6d33b4e4045c3e64bf73a7499bfc278b89e50677f44cd3b0927c69841e92d41",
      "canonical_tool_input_schema_hash": "8d27cd6cd5d964df09e5b75acef2de0e8f41937bb76950d1e2ade14307fe9d2c"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "asset_platform_id": {
          "type": "string",
          "description": "filter result by asset platform (blockchain network) \n *refers to [`/asset_platforms`](/reference/asset-platforms-list) filter=`nft`"
        },
        "order": {
          "type": "string",
          "description": "sort results by field \n Default: `market_cap_usd_desc`",
          "enum": [
            "h24_volume_native_asc",
            "h24_volume_native_desc",
            "h24_volume_usd_asc",
            "h24_volume_usd_desc",
            "market_cap_usd_asc",
            "market_cap_usd_desc"
          ]
        },
        "page": {
          "type": "number",
          "description": "page through results \n Default: `1`"
        },
        "per_page": {
          "type": "number",
          "description": "total results per page \n Valid values: any integer between 1 and 250 \n Default: `100`"
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": []
    }
  },
  {
    "name": "COINGECKO__GET_NFTS_MARKET_CHART",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you **query historical market data of a NFT collection, including floor price, market cap, and 24hr volume, by number of days away from now**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    floor_price_native: {\n      type: 'array',\n      description: 'NFT collection floor price in native currency',\n      items: {\n        type: 'array',\n        items: {\n          type: 'number'\n        }\n      }\n    },\n    floor_price_usd: {\n      type: 'array',\n      description: 'NFT collection floor price in usd',\n      items: {\n        type: 'array',\n        items: {\n          type: 'number'\n        }\n      }\n    },\n    h24_volume_native: {\n      type: 'array',\n      description: 'NFT collection volume in 24 hours in native currency',\n      items: {\n        type: 'array',\n        items: {\n          type: 'number'\n        }\n      }\n    },\n    h24_volume_usd: {\n      type: 'array',\n      description: 'NFT collection volume in 24 hours in usd',\n      items: {\n        type: 'array',\n        items: {\n          type: 'number'\n        }\n      }\n    },\n    market_cap_native: {\n      type: 'array',\n      description: 'NFT collection market cap in native currency',\n      items: {\n        type: 'array',\n        items: {\n          type: 'number'\n        }\n      }\n    },\n    market_cap_usd: {\n      type: 'array',\n      description: 'NFT collection market cap in usd',\n      items: {\n        type: 'array',\n        items: {\n          type: 'number'\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_nfts_market_chart",
      "canonical_tool_description_hash": "33ba7a966ebf896a02041e6abb141a46e36998ad63cd5518d27550c3b6b107e1",
      "canonical_tool_input_schema_hash": "39bc7b48e12bce507632fadeb8ade8b4a88d0017a0765efa2884ccb3701e9723"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "days": {
          "type": "string",
          "description": "data up to number of days \n Valid values: any integer or max"
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["id", "days"]
    }
  },
  {
    "name": "COINGECKO__GET_ONCHAIN_CATEGORIES",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query all the supported categories on GeckoTerminal**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    data: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string'\n          },\n          attributes: {\n            type: 'object',\n            properties: {\n              description: {\n                type: 'string'\n              },\n              fdv_usd: {\n                type: 'string'\n              },\n              h24_tx_count: {\n                type: 'integer'\n              },\n              h24_volume_usd: {\n                type: 'string'\n              },\n              name: {\n                type: 'string'\n              },\n              reserve_in_usd: {\n                type: 'string'\n              },\n              volume_change_percentage: {\n                type: 'object',\n                properties: {\n                  h1: {\n                    type: 'string'\n                  },\n                  h12: {\n                    type: 'string'\n                  },\n                  h24: {\n                    type: 'string'\n                  },\n                  h6: {\n                    type: 'string'\n                  }\n                }\n              }\n            }\n          },\n          type: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_onchain_categories",
      "canonical_tool_description_hash": "7cda3c7800503daae5f70385d7306c3afedd40fd8390d160dee75d42d256d665",
      "canonical_tool_input_schema_hash": "037684f38821d4348f84c4c1ea012815b63c5f0dea49e12bb604d5dc6f103027"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "page through results \n Default value: `1`"
        },
        "sort": {
          "type": "string",
          "description": "sort the categories by field \n Default value: `h6_volume_percentage_desc`",
          "enum": [
            "h1_volume_percentage_desc",
            "h6_volume_percentage_desc",
            "h12_volume_percentage_desc",
            "h24_tx_count_desc",
            "h24_volume_usd_desc",
            "fdv_usd_desc",
            "reserve_in_usd_desc"
          ]
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": []
    }
  },
  {
    "name": "COINGECKO__GET_POOLS_ONCHAIN_CATEGORIES",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query all the pools based on the provided category ID**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    data: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string'\n          },\n          attributes: {\n            type: 'object',\n            properties: {\n              address: {\n                type: 'string'\n              },\n              base_token_price_native_currency: {\n                type: 'string'\n              },\n              base_token_price_quote_token: {\n                type: 'string'\n              },\n              base_token_price_usd: {\n                type: 'string'\n              },\n              fdv_usd: {\n                type: 'string'\n              },\n              h24_tx_count: {\n                type: 'integer'\n              },\n              h24_volume_usd: {\n                type: 'string'\n              },\n              market_cap_usd: {\n                type: 'string'\n              },\n              name: {\n                type: 'string'\n              },\n              pool_created_at: {\n                type: 'string',\n                format: 'date-time'\n              },\n              price_change_percentage: {\n                type: 'object',\n                properties: {\n                  h1: {\n                    type: 'string'\n                  },\n                  h24: {\n                    type: 'string'\n                  },\n                  h6: {\n                    type: 'string'\n                  },\n                  m15: {\n                    type: 'string'\n                  },\n                  m30: {\n                    type: 'string'\n                  },\n                  m5: {\n                    type: 'string'\n                  }\n                }\n              },\n              quote_token_price_base_token: {\n                type: 'string'\n              },\n              quote_token_price_native_currency: {\n                type: 'string'\n              },\n              quote_token_price_usd: {\n                type: 'string'\n              },\n              reserve_in_usd: {\n                type: 'string'\n              }\n            }\n          },\n          relationships: {\n            type: 'object',\n            properties: {\n              base_token: {\n                type: 'object',\n                properties: {\n                  data: {\n                    type: 'object',\n                    properties: {\n                      id: {\n                        type: 'string'\n                      },\n                      type: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              },\n              dex: {\n                type: 'object',\n                properties: {\n                  data: {\n                    type: 'object',\n                    properties: {\n                      id: {\n                        type: 'string'\n                      },\n                      type: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              },\n              network: {\n                type: 'object',\n                properties: {\n                  data: {\n                    type: 'object',\n                    properties: {\n                      id: {\n                        type: 'string'\n                      },\n                      type: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              },\n              quote_token: {\n                type: 'object',\n                properties: {\n                  data: {\n                    type: 'object',\n                    properties: {\n                      id: {\n                        type: 'string'\n                      },\n                      type: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          type: {\n            type: 'string'\n          }\n        }\n      }\n    },\n    included: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string'\n          },\n          attributes: {\n            type: 'object',\n            properties: {\n              address: {\n                type: 'string'\n              },\n              coingecko_coin_id: {\n                type: 'string'\n              },\n              decimals: {\n                type: 'integer'\n              },\n              image_url: {\n                type: 'string'\n              },\n              name: {\n                type: 'string'\n              },\n              symbol: {\n                type: 'string'\n              }\n            }\n          },\n          type: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_pools_onchain_categories",
      "canonical_tool_description_hash": "3143dc6d3a3c03cb0cdb9c6c0d7f69eb90acf83b8a0d4e390a9acdb03d7e7aa8",
      "canonical_tool_input_schema_hash": "983789cc569eaf64902e6eaa2edcc7230ac24ce8b395be623bccbb710adaca7e"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "category_id": {
          "type": "string"
        },
        "include": {
          "type": "string",
          "description": "attributes to include, comma-separated if more than one to include \n Available values: `base_token`, `quote_token`, `dex`, `network`. \n Example: `base_token` or `base_token,dex`"
        },
        "page": {
          "type": "integer",
          "description": "page through results \n Default value: `1`"
        },
        "sort": {
          "type": "string",
          "description": "sort the pools by field \n Default value: `pool_created_at_desc`",
          "enum": [
            "m5_trending",
            "h1_trending",
            "h6_trending",
            "h24_trending",
            "h24_tx_count_desc",
            "h24_volume_usd_desc",
            "pool_created_at_desc",
            "h24_price_change_percentage_desc"
          ]
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["category_id"]
    }
  },
  {
    "name": "COINGECKO__GET_ONCHAIN_NETWORKS",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query all the supported networks on GeckoTerminal**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    data: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string'\n          },\n          attributes: {\n            type: 'object',\n            properties: {\n              coingecko_asset_platform_id: {\n                type: 'string'\n              },\n              name: {\n                type: 'string'\n              }\n            }\n          },\n          type: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_onchain_networks",
      "canonical_tool_description_hash": "fdb5b8ce5e4a53f3992e9e14ae2b206d9b8c16d17f4a20bdb91032ab6377da09",
      "canonical_tool_input_schema_hash": "fcefc84536c43cf01bc6fd401c4d5a7c7c1a76599517686a7771889ccab145f2"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "page through results \n Default value: 1"
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": []
    }
  },
  {
    "name": "COINGECKO__GET_NETWORKS_ONCHAIN_NEW_POOLS",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query all the latest pools across all networks on GeckoTerminal**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    data: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string'\n          },\n          attributes: {\n            type: 'object',\n            properties: {\n              address: {\n                type: 'string'\n              },\n              base_token_price_native_currency: {\n                type: 'string'\n              },\n              base_token_price_quote_token: {\n                type: 'string'\n              },\n              base_token_price_usd: {\n                type: 'string'\n              },\n              fdv_usd: {\n                type: 'string'\n              },\n              market_cap_usd: {\n                type: 'string'\n              },\n              name: {\n                type: 'string'\n              },\n              pool_created_at: {\n                type: 'string'\n              },\n              price_change_percentage: {\n                type: 'object',\n                properties: {\n                  h1: {\n                    type: 'string'\n                  },\n                  h24: {\n                    type: 'string'\n                  },\n                  h6: {\n                    type: 'string'\n                  },\n                  m15: {\n                    type: 'string'\n                  },\n                  m30: {\n                    type: 'string'\n                  },\n                  m5: {\n                    type: 'string'\n                  }\n                }\n              },\n              quote_token_price_base_token: {\n                type: 'string'\n              },\n              quote_token_price_native_currency: {\n                type: 'string'\n              },\n              quote_token_price_usd: {\n                type: 'string'\n              },\n              reserve_in_usd: {\n                type: 'string'\n              },\n              transactions: {\n                type: 'object',\n                properties: {\n                  h1: {\n                    type: 'object',\n                    properties: {\n                      buyers: {\n                        type: 'integer'\n                      },\n                      buys: {\n                        type: 'integer'\n                      },\n                      sellers: {\n                        type: 'integer'\n                      },\n                      sells: {\n                        type: 'integer'\n                      }\n                    }\n                  },\n                  h24: {\n                    type: 'object',\n                    properties: {\n                      buyers: {\n                        type: 'integer'\n                      },\n                      buys: {\n                        type: 'integer'\n                      },\n                      sellers: {\n                        type: 'integer'\n                      },\n                      sells: {\n                        type: 'integer'\n                      }\n                    }\n                  },\n                  m15: {\n                    type: 'object',\n                    properties: {\n                      buyers: {\n                        type: 'integer'\n                      },\n                      buys: {\n                        type: 'integer'\n                      },\n                      sellers: {\n                        type: 'integer'\n                      },\n                      sells: {\n                        type: 'integer'\n                      }\n                    }\n                  },\n                  m30: {\n                    type: 'object',\n                    properties: {\n                      buyers: {\n                        type: 'integer'\n                      },\n                      buys: {\n                        type: 'integer'\n                      },\n                      sellers: {\n                        type: 'integer'\n                      },\n                      sells: {\n                        type: 'integer'\n                      }\n                    }\n                  },\n                  m5: {\n                    type: 'object',\n                    properties: {\n                      buyers: {\n                        type: 'integer'\n                      },\n                      buys: {\n                        type: 'integer'\n                      },\n                      sellers: {\n                        type: 'integer'\n                      },\n                      sells: {\n                        type: 'integer'\n                      }\n                    }\n                  }\n                }\n              },\n              volume_usd: {\n                type: 'object',\n                properties: {\n                  h1: {\n                    type: 'string'\n                  },\n                  h24: {\n                    type: 'string'\n                  },\n                  h6: {\n                    type: 'string'\n                  },\n                  m15: {\n                    type: 'string'\n                  },\n                  m30: {\n                    type: 'string'\n                  },\n                  m5: {\n                    type: 'string'\n                  }\n                }\n              }\n            }\n          },\n          relationships: {\n            type: 'object',\n            properties: {\n              base_token: {\n                type: 'object',\n                properties: {\n                  data: {\n                    type: 'object',\n                    properties: {\n                      id: {\n                        type: 'string'\n                      },\n                      type: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              },\n              dex: {\n                type: 'object',\n                properties: {\n                  data: {\n                    type: 'object',\n                    properties: {\n                      id: {\n                        type: 'string'\n                      },\n                      type: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              },\n              quote_token: {\n                type: 'object',\n                properties: {\n                  data: {\n                    type: 'object',\n                    properties: {\n                      id: {\n                        type: 'string'\n                      },\n                      type: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          type: {\n            type: 'string'\n          }\n        }\n      }\n    },\n    included: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string'\n          },\n          attributes: {\n            type: 'object',\n            properties: {\n              address: {\n                type: 'string'\n              },\n              coingecko_coin_id: {\n                type: 'string'\n              },\n              decimals: {\n                type: 'integer'\n              },\n              image_url: {\n                type: 'string'\n              },\n              name: {\n                type: 'string'\n              },\n              symbol: {\n                type: 'string'\n              }\n            }\n          },\n          type: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_networks_onchain_new_pools",
      "canonical_tool_description_hash": "c79aee8b8b03df4781eb3cf8a880d10365cad370c26d222aa78eec3e482ac9f0",
      "canonical_tool_input_schema_hash": "12f4760f787a1c2d7f35a8ca535e0084f95ae1e51d05f60ec6b108d21114455c"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "include": {
          "type": "string",
          "description": "attributes to include, comma-separated if more than one to include \n Available values: `base_token`, `quote_token`, `dex`, `network`"
        },
        "page": {
          "type": "integer",
          "description": "page through results \n Default value: 1"
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": []
    }
  },
  {
    "name": "COINGECKO__GET_NETWORK_NETWORKS_ONCHAIN_NEW_POOLS",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query all the latest pools based on provided network**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    data: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string'\n          },\n          attributes: {\n            type: 'object',\n            properties: {\n              address: {\n                type: 'string'\n              },\n              base_token_price_native_currency: {\n                type: 'string'\n              },\n              base_token_price_quote_token: {\n                type: 'string'\n              },\n              base_token_price_usd: {\n                type: 'string'\n              },\n              fdv_usd: {\n                type: 'string'\n              },\n              market_cap_usd: {\n                type: 'string'\n              },\n              name: {\n                type: 'string'\n              },\n              pool_created_at: {\n                type: 'string'\n              },\n              price_change_percentage: {\n                type: 'object',\n                properties: {\n                  h1: {\n                    type: 'string'\n                  },\n                  h24: {\n                    type: 'string'\n                  },\n                  h6: {\n                    type: 'string'\n                  },\n                  m15: {\n                    type: 'string'\n                  },\n                  m30: {\n                    type: 'string'\n                  },\n                  m5: {\n                    type: 'string'\n                  }\n                }\n              },\n              quote_token_price_base_token: {\n                type: 'string'\n              },\n              quote_token_price_native_currency: {\n                type: 'string'\n              },\n              quote_token_price_usd: {\n                type: 'string'\n              },\n              reserve_in_usd: {\n                type: 'string'\n              },\n              transactions: {\n                type: 'object',\n                properties: {\n                  h1: {\n                    type: 'object',\n                    properties: {\n                      buyers: {\n                        type: 'integer'\n                      },\n                      buys: {\n                        type: 'integer'\n                      },\n                      sellers: {\n                        type: 'integer'\n                      },\n                      sells: {\n                        type: 'integer'\n                      }\n                    }\n                  },\n                  h24: {\n                    type: 'object',\n                    properties: {\n                      buyers: {\n                        type: 'integer'\n                      },\n                      buys: {\n                        type: 'integer'\n                      },\n                      sellers: {\n                        type: 'integer'\n                      },\n                      sells: {\n                        type: 'integer'\n                      }\n                    }\n                  },\n                  m15: {\n                    type: 'object',\n                    properties: {\n                      buyers: {\n                        type: 'integer'\n                      },\n                      buys: {\n                        type: 'integer'\n                      },\n                      sellers: {\n                        type: 'integer'\n                      },\n                      sells: {\n                        type: 'integer'\n                      }\n                    }\n                  },\n                  m30: {\n                    type: 'object',\n                    properties: {\n                      buyers: {\n                        type: 'integer'\n                      },\n                      buys: {\n                        type: 'integer'\n                      },\n                      sellers: {\n                        type: 'integer'\n                      },\n                      sells: {\n                        type: 'integer'\n                      }\n                    }\n                  },\n                  m5: {\n                    type: 'object',\n                    properties: {\n                      buyers: {\n                        type: 'integer'\n                      },\n                      buys: {\n                        type: 'integer'\n                      },\n                      sellers: {\n                        type: 'integer'\n                      },\n                      sells: {\n                        type: 'integer'\n                      }\n                    }\n                  }\n                }\n              },\n              volume_usd: {\n                type: 'object',\n                properties: {\n                  h1: {\n                    type: 'string'\n                  },\n                  h24: {\n                    type: 'string'\n                  },\n                  h6: {\n                    type: 'string'\n                  },\n                  m15: {\n                    type: 'string'\n                  },\n                  m30: {\n                    type: 'string'\n                  },\n                  m5: {\n                    type: 'string'\n                  }\n                }\n              }\n            }\n          },\n          relationships: {\n            type: 'object',\n            properties: {\n              base_token: {\n                type: 'object',\n                properties: {\n                  data: {\n                    type: 'object',\n                    properties: {\n                      id: {\n                        type: 'string'\n                      },\n                      type: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              },\n              dex: {\n                type: 'object',\n                properties: {\n                  data: {\n                    type: 'object',\n                    properties: {\n                      id: {\n                        type: 'string'\n                      },\n                      type: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              },\n              quote_token: {\n                type: 'object',\n                properties: {\n                  data: {\n                    type: 'object',\n                    properties: {\n                      id: {\n                        type: 'string'\n                      },\n                      type: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          type: {\n            type: 'string'\n          }\n        }\n      }\n    },\n    included: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string'\n          },\n          attributes: {\n            type: 'object',\n            properties: {\n              address: {\n                type: 'string'\n              },\n              coingecko_coin_id: {\n                type: 'string'\n              },\n              decimals: {\n                type: 'integer'\n              },\n              image_url: {\n                type: 'string'\n              },\n              name: {\n                type: 'string'\n              },\n              symbol: {\n                type: 'string'\n              }\n            }\n          },\n          type: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_network_networks_onchain_new_pools",
      "canonical_tool_description_hash": "f7bac8f01fe28ade02f225d2a9b836bd83aab10336eea34dfc3071f184537bef",
      "canonical_tool_input_schema_hash": "9b570bb13bd920e28e1e41a1aecc026a0cacffacecb5bd3d1e586329c3336320"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "include": {
          "type": "string",
          "description": "attributes to include, comma-separated if more than one to include \n Available values: `base_token`, `quote_token`, `dex`"
        },
        "page": {
          "type": "integer",
          "description": "page through results \n Default value: 1"
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["network"]
    }
  },
  {
    "name": "COINGECKO__GET_NETWORKS_ONCHAIN_DEXES",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query all the supported decentralized exchanges (DEXs) based on the provided network on GeckoTerminal**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    data: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string'\n          },\n          attributes: {\n            type: 'object',\n            properties: {\n              name: {\n                type: 'string'\n              }\n            }\n          },\n          type: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_networks_onchain_dexes",
      "canonical_tool_description_hash": "02af8a2541387aed4b3c4831466451e305281d631878aff54abf0ffeea3f5f7d",
      "canonical_tool_input_schema_hash": "204adbf077a3f6b560f33b1ac9a2a92b52ee021d7f0eee454a95fa482a180af9"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "page": {
          "type": "integer",
          "description": "page through results \n Default value: 1"
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["network"]
    }
  },
  {
    "name": "COINGECKO__GET_ADDRESSES_POOLS_NETWORKS_ONCHAIN_MULTI",
    "description": "This endpoint allows you to **query multiple pools based on the provided network and pool address**",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_addresses_pools_networks_onchain_multi",
      "canonical_tool_description_hash": "0cdc8059d04d2c50c05076718e79ae06d353541f6f8620922e3efef7b6b48691",
      "canonical_tool_input_schema_hash": "437fa5b81c48ac78324d15f15dcb674e601ca0335e65f8f4bc44815e099589e7"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "addresses": {
          "type": "string"
        },
        "include": {
          "type": "string",
          "description": "attributes to include, comma-separated if more than one to include \n Available values: `base_token`, `quote_token`, `dex`"
        },
        "include_composition": {
          "type": "boolean",
          "description": "include pool composition, default: false"
        },
        "include_volume_breakdown": {
          "type": "boolean",
          "description": "include volume breakdown, default: false"
        }
      },
      "required": ["network", "addresses"]
    }
  },
  {
    "name": "COINGECKO__GET_POOLS_NETWORKS_ONCHAIN_INFO",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query pool metadata (base and quote token details, image, socials, websites, description, contract address, etc.) based on a provided pool contract address on a network**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    data: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          data: {\n            type: 'object',\n            properties: {\n              id: {\n                type: 'string'\n              },\n              attributes: {\n                type: 'object',\n                properties: {\n                  address: {\n                    type: 'string'\n                  },\n                  categories: {\n                    type: 'array',\n                    items: {\n                      type: 'string'\n                    }\n                  },\n                  coingecko_coin_id: {\n                    type: 'string'\n                  },\n                  description: {\n                    type: 'string'\n                  },\n                  discord_url: {\n                    type: 'string'\n                  },\n                  freeze_authority: {\n                    type: 'string'\n                  },\n                  gt_categories_id: {\n                    type: 'array',\n                    items: {\n                      type: 'string'\n                    }\n                  },\n                  gt_score: {\n                    type: 'number'\n                  },\n                  gt_score_details: {\n                    type: 'object',\n                    properties: {\n                      creation: {\n                        type: 'number'\n                      },\n                      holders: {\n                        type: 'number'\n                      },\n                      info: {\n                        type: 'number'\n                      },\n                      pool: {\n                        type: 'number'\n                      },\n                      transaction: {\n                        type: 'number'\n                      }\n                    }\n                  },\n                  holders: {\n                    type: 'object',\n                    properties: {\n                      count: {\n                        type: 'integer'\n                      },\n                      distribution_percentage: {\n                        type: 'object',\n                        properties: {\n                          '11_30': {\n                            type: 'number'\n                          },\n                          '31_50': {\n                            type: 'number'\n                          },\n                          rest: {\n                            type: 'number'\n                          },\n                          top_10: {\n                            type: 'number'\n                          }\n                        }\n                      },\n                      last_updated: {\n                        type: 'string'\n                      }\n                    }\n                  },\n                  image: {\n                    type: 'object',\n                    properties: {\n                      large: {\n                        type: 'string'\n                      },\n                      small: {\n                        type: 'string'\n                      },\n                      thumb: {\n                        type: 'string'\n                      }\n                    }\n                  },\n                  image_url: {\n                    type: 'string'\n                  },\n                  is_honeypot: {\n                    anyOf: [                      {\n                        type: 'boolean'\n                      },\n                      {\n                        type: 'string'\n                      }\n                    ]\n                  },\n                  mint_authority: {\n                    type: 'string'\n                  },\n                  name: {\n                    type: 'string'\n                  },\n                  symbol: {\n                    type: 'string'\n                  },\n                  telegram_handle: {\n                    type: 'string'\n                  },\n                  twitter_handle: {\n                    type: 'string'\n                  },\n                  websites: {\n                    type: 'array',\n                    items: {\n                      type: 'string'\n                    }\n                  }\n                }\n              },\n              type: {\n                type: 'string'\n              }\n            }\n          }\n        }\n      }\n    },\n    included: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string'\n          },\n          attributes: {\n            type: 'object',\n            properties: {\n              base_token_address: {\n                type: 'string'\n              },\n              community_sus_report: {\n                type: 'number'\n              },\n              quote_token_address: {\n                type: 'string'\n              },\n              sentiment_vote_negative_percentage: {\n                type: 'number'\n              },\n              sentiment_vote_positive_percentage: {\n                type: 'number'\n              }\n            }\n          },\n          type: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_pools_networks_onchain_info",
      "canonical_tool_description_hash": "20ee8cb16eacac840cde5cf1a4ff05358110f78510219e9a56424f7bcd5dafde",
      "canonical_tool_input_schema_hash": "e5a74f6efd04f9f29ed39a2887edc10cbb3c8e84ee444bcc183588f74a201dd3"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "pool_address": {
          "type": "string"
        },
        "include": {
          "type": "string",
          "description": "attributes to include",
          "enum": ["pool"]
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["network", "pool_address"]
    }
  },
  {
    "name": "COINGECKO__GET_TIMEFRAME_POOLS_NETWORKS_ONCHAIN_OHLCV",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **get the OHLCV chart (Open, High, Low, Close, Volume) of a pool based on the provided pool address on a network**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    data: {\n      type: 'object',\n      properties: {\n        id: {\n          type: 'string'\n        },\n        attributes: {\n          type: 'object',\n          properties: {\n            ohlcv_list: {\n              type: 'array',\n              items: {\n                type: 'array',\n                items: {\n                  type: 'number'\n                }\n              }\n            }\n          }\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    meta: {\n      type: 'object',\n      properties: {\n        base: {\n          type: 'object',\n          properties: {\n            address: {\n              type: 'string'\n            },\n            coingecko_coin_id: {\n              type: 'string'\n            },\n            name: {\n              type: 'string'\n            },\n            symbol: {\n              type: 'string'\n            }\n          }\n        },\n        quote: {\n          type: 'object',\n          properties: {\n            address: {\n              type: 'string'\n            },\n            coingecko_coin_id: {\n              type: 'string'\n            },\n            name: {\n              type: 'string'\n            },\n            symbol: {\n              type: 'string'\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_timeframe_pools_networks_onchain_ohlcv",
      "canonical_tool_description_hash": "6dc0a86a81270021bfe7a303c0a69e14a0cd3dee5148e4774221b0cecfb126c3",
      "canonical_tool_input_schema_hash": "c2adb4ae4c1f80eb2d45af204a7dbd7df6173568d55877e3f78cc2379e56e9ed"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "pool_address": {
          "type": "string"
        },
        "timeframe": {
          "type": "string",
          "enum": ["day", "hour", "minute", "second"]
        },
        "token": {
          "type": "string",
          "description": "return OHLCV for token \n use this to invert the chart \n Available values: 'base', 'quote' or token address \n Default value: 'base'"
        },
        "aggregate": {
          "type": "string",
          "description": "time period to aggregate each OHLCV \n Available values (day): `1` \n Available values (hour): `1` , `4` , `12` \n Available values (minute): `1` , `5` , `15` \n Available values (second): `1`, `15`, `30` \n Default value: 1"
        },
        "before_timestamp": {
          "type": "integer",
          "description": "return OHLCV data before this timestamp (integer seconds since epoch)"
        },
        "currency": {
          "type": "string",
          "description": "return OHLCV in USD or quote token \n Default value: usd",
          "enum": ["usd", "token"]
        },
        "include_empty_intervals": {
          "type": "boolean",
          "description": "include empty intervals with no trade data, default: false"
        },
        "limit": {
          "type": "integer",
          "description": "number of OHLCV results to return, maximum 1000 \n Default value: 100"
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["network", "pool_address", "timeframe"]
    }
  },
  {
    "name": "COINGECKO__GET_POOLS_NETWORKS_ONCHAIN_TRADES",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query the last 300 trades in the past 24 hours based on the provided pool address**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    data: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string'\n          },\n          attributes: {\n            type: 'object',\n            properties: {\n              block_number: {\n                type: 'integer'\n              },\n              block_timestamp: {\n                type: 'string'\n              },\n              from_token_address: {\n                type: 'string'\n              },\n              from_token_amount: {\n                type: 'string'\n              },\n              kind: {\n                type: 'string'\n              },\n              price_from_in_currency_token: {\n                type: 'string'\n              },\n              price_from_in_usd: {\n                type: 'string'\n              },\n              price_to_in_currency_token: {\n                type: 'string'\n              },\n              price_to_in_usd: {\n                type: 'string'\n              },\n              to_token_address: {\n                type: 'string'\n              },\n              to_token_amount: {\n                type: 'string'\n              },\n              tx_from_address: {\n                type: 'string'\n              },\n              tx_hash: {\n                type: 'string'\n              },\n              volume_in_usd: {\n                type: 'string'\n              }\n            }\n          },\n          type: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_pools_networks_onchain_trades",
      "canonical_tool_description_hash": "3965cd4c483e0b6f55c926da7ed57f0100207c13c7603339dab8477266397571",
      "canonical_tool_input_schema_hash": "f7832b51b734817f3c31205bf870dd4b78ea5b9302412c6efb8fb0e8586324a5"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "pool_address": {
          "type": "string"
        },
        "token": {
          "type": "string",
          "description": "return trades for token \n use this to invert the chart \n Available values: 'base', 'quote' or token address \n Default value: 'base'"
        },
        "trade_volume_in_usd_greater_than": {
          "type": "number",
          "description": "filter trades by trade volume in USD greater than this value \n Default value: 0"
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["network", "pool_address"]
    }
  },
  {
    "name": "COINGECKO__GET_ADDRESSES_TOKENS_NETWORKS_ONCHAIN_MULTI",
    "description": "This endpoint allows you to **query multiple tokens data based on the provided token contract addresses on a network**",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_addresses_tokens_networks_onchain_multi",
      "canonical_tool_description_hash": "e9dd09b251967ee4e12954a5b1e1aa50e70518732f66fd3b3e8e19dcf8482772",
      "canonical_tool_input_schema_hash": "e4b1cfb3d6f921b7f07f373c6c2ec15697fc9c4d3b143ae0798785b72a5f4ac3"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "addresses": {
          "type": "string"
        },
        "include": {
          "type": "string",
          "description": "attributes to include",
          "enum": ["top_pools"]
        },
        "include_composition": {
          "type": "boolean",
          "description": "include pool composition, default: false"
        }
      },
      "required": ["network", "addresses"]
    }
  },
  {
    "name": "COINGECKO__GET_TOKENS_NETWORKS_ONCHAIN_INFO",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query token metadata (name, symbol,  CoinGecko ID, image, socials, websites, description, etc.) based on a provided token contract address on a network**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    data: {\n      type: 'object',\n      properties: {\n        id: {\n          type: 'string'\n        },\n        attributes: {\n          type: 'object',\n          properties: {\n            address: {\n              type: 'string'\n            },\n            categories: {\n              type: 'array',\n              items: {\n                type: 'string'\n              }\n            },\n            coingecko_coin_id: {\n              type: 'string'\n            },\n            description: {\n              type: 'string'\n            },\n            discord_url: {\n              type: 'string'\n            },\n            freeze_authority: {\n              type: 'string'\n            },\n            gt_categories_id: {\n              type: 'array',\n              items: {\n                type: 'string'\n              }\n            },\n            gt_score: {\n              type: 'number'\n            },\n            gt_score_details: {\n              type: 'object',\n              properties: {\n                creation: {\n                  type: 'number'\n                },\n                holders: {\n                  type: 'number'\n                },\n                info: {\n                  type: 'number'\n                },\n                pool: {\n                  type: 'number'\n                },\n                transaction: {\n                  type: 'number'\n                }\n              }\n            },\n            holders: {\n              type: 'object',\n              properties: {\n                count: {\n                  type: 'integer'\n                },\n                distribution_percentage: {\n                  type: 'object',\n                  properties: {\n                    '11_30': {\n                      type: 'number'\n                    },\n                    '31_50': {\n                      type: 'number'\n                    },\n                    rest: {\n                      type: 'number'\n                    },\n                    top_10: {\n                      type: 'number'\n                    }\n                  }\n                },\n                last_updated: {\n                  type: 'string'\n                }\n              }\n            },\n            image: {\n              type: 'object',\n              properties: {\n                large: {\n                  type: 'string'\n                },\n                small: {\n                  type: 'string'\n                },\n                thumb: {\n                  type: 'string'\n                }\n              }\n            },\n            image_url: {\n              type: 'string'\n            },\n            is_honeypot: {\n              anyOf: [                {\n                  type: 'boolean'\n                },\n                {\n                  type: 'string'\n                }\n              ]\n            },\n            mint_authority: {\n              type: 'string'\n            },\n            name: {\n              type: 'string'\n            },\n            symbol: {\n              type: 'string'\n            },\n            telegram_handle: {\n              type: 'string'\n            },\n            twitter_handle: {\n              type: 'string'\n            },\n            websites: {\n              type: 'array',\n              items: {\n                type: 'string'\n              }\n            }\n          }\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_tokens_networks_onchain_info",
      "canonical_tool_description_hash": "a70829b9512c349ce896ae3892955f8f5411621220f2cb80f135f4552cd251ff",
      "canonical_tool_input_schema_hash": "99ff3d31092fffbcbd8186efecf3134b95cdc09757cce73d0bf00be6a0c7890c"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["network", "address"]
    }
  },
  {
    "name": "COINGECKO__GET_TOKENS_NETWORKS_ONCHAIN_TOP_HOLDERS",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query top token holders based on the provided token contract address on a network**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    data: {\n      type: 'object',\n      properties: {\n        id: {\n          type: 'string'\n        },\n        attributes: {\n          type: 'object',\n          properties: {\n            holders: {\n              type: 'array',\n              items: {\n                type: 'object',\n                properties: {\n                  address: {\n                    type: 'string'\n                  },\n                  amount: {\n                    type: 'string'\n                  },\n                  label: {\n                    type: 'string'\n                  },\n                  percentage: {\n                    type: 'string'\n                  },\n                  rank: {\n                    type: 'number'\n                  },\n                  value: {\n                    type: 'string'\n                  }\n                }\n              }\n            },\n            last_updated_at: {\n              type: 'string'\n            }\n          }\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_tokens_networks_onchain_top_holders",
      "canonical_tool_description_hash": "19d9d1533d517f8d14350e31e947819f1d3d123b4ca63720cf389b5527f6ab34",
      "canonical_tool_input_schema_hash": "e7743d4af9dbedb3917a3c12a7ebe8aea172daff1600a55e055f8834e542769c"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "holders": {
          "type": "string",
          "description": "number of top token holders to return, you may use any integer or `max` \n Default value: 10"
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["network", "address"]
    }
  },
  {
    "name": "COINGECKO__GET_TOKENS_NETWORKS_ONCHAIN_HOLDERS_CHART",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **get the historical token holders chart based on the provided token contract address on a network**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    data: {\n      type: 'object',\n      properties: {\n        id: {\n          type: 'string'\n        },\n        attributes: {\n          type: 'object',\n          properties: {\n            token_holders_list: {\n              type: 'array',\n              items: {\n                type: 'array',\n                items: {\n                  type: 'string'\n                }\n              }\n            }\n          }\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    meta: {\n      type: 'object',\n      properties: {\n        token: {\n          type: 'object',\n          properties: {\n            address: {\n              type: 'string'\n            },\n            coingecko_coin_id: {\n              type: 'string'\n            },\n            name: {\n              type: 'string'\n            },\n            symbol: {\n              type: 'string'\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_tokens_networks_onchain_holders_chart",
      "canonical_tool_description_hash": "0aa7d9d1202a6e78a86e1f34a63102b3af394fe605b965070787b7d7da25864a",
      "canonical_tool_input_schema_hash": "fbbf518b9c3ee1a67bd480f795efb14c809c05d0d766dc5bb5f1c56ebd161b86"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "token_address": {
          "type": "string"
        },
        "days": {
          "type": "string",
          "description": "number of days to return the historical token holders chart \n Default value: 7",
          "enum": ["7", "30", "max"]
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["network", "token_address"]
    }
  },
  {
    "name": "COINGECKO__GET_TIMEFRAME_TOKENS_NETWORKS_ONCHAIN_OHLCV",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **get the OHLCV chart (Open, High, Low, Close, Volume) of a token based on the provided token address on a network**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    data: {\n      type: 'object',\n      properties: {\n        id: {\n          type: 'string'\n        },\n        attributes: {\n          type: 'object',\n          properties: {\n            ohlcv_list: {\n              type: 'array',\n              items: {\n                type: 'array',\n                items: {\n                  type: 'number'\n                }\n              }\n            }\n          }\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    meta: {\n      type: 'object',\n      properties: {\n        base: {\n          type: 'object',\n          properties: {\n            address: {\n              type: 'string'\n            },\n            coingecko_coin_id: {\n              type: 'string'\n            },\n            name: {\n              type: 'string'\n            },\n            symbol: {\n              type: 'string'\n            }\n          }\n        },\n        quote: {\n          type: 'object',\n          properties: {\n            address: {\n              type: 'string'\n            },\n            coingecko_coin_id: {\n              type: 'string'\n            },\n            name: {\n              type: 'string'\n            },\n            symbol: {\n              type: 'string'\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_timeframe_tokens_networks_onchain_ohlcv",
      "canonical_tool_description_hash": "aee9cf2a47904d17ffcce6071171b10611fdb29fb2b7e2cff647e81667ea00d8",
      "canonical_tool_input_schema_hash": "a854cafdf221d129e5ceb13dfec249ca14bd2229d1ea0efca3c3a248f6a31f98"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "token_address": {
          "type": "string"
        },
        "timeframe": {
          "type": "string",
          "enum": ["day", "hour", "minute", "second"]
        },
        "aggregate": {
          "type": "string",
          "description": "time period to aggregate each OHLCV \n Available values (day): `1` \n Available values (hour): `1` , `4` , `12` \n Available values (minute): `1` , `5` , `15` \n Available values (second): `1`, `15`, `30` \n Default value: 1"
        },
        "before_timestamp": {
          "type": "integer",
          "description": "return OHLCV data before this timestamp (integer seconds since epoch)"
        },
        "currency": {
          "type": "string",
          "description": "return OHLCV in USD or quote token \n Default value: usd",
          "enum": ["usd", "token"]
        },
        "include_empty_intervals": {
          "type": "boolean",
          "description": "include empty intervals with no trade data, default: false"
        },
        "limit": {
          "type": "integer",
          "description": "number of OHLCV results to return, maximum 1000 \n Default value: 100"
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["network", "token_address", "timeframe"]
    }
  },
  {
    "name": "COINGECKO__GET_TOKENS_NETWORKS_ONCHAIN_POOLS",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query top pools based on the provided token contract address on a network**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    data: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string'\n          },\n          attributes: {\n            type: 'object',\n            properties: {\n              address: {\n                type: 'string'\n              },\n              base_token_price_native_currency: {\n                type: 'string'\n              },\n              base_token_price_quote_token: {\n                type: 'string'\n              },\n              base_token_price_usd: {\n                type: 'string'\n              },\n              fdv_usd: {\n                type: 'string'\n              },\n              market_cap_usd: {\n                type: 'string'\n              },\n              name: {\n                type: 'string'\n              },\n              pool_created_at: {\n                type: 'string'\n              },\n              price_change_percentage: {\n                type: 'object',\n                properties: {\n                  h1: {\n                    type: 'string'\n                  },\n                  h24: {\n                    type: 'string'\n                  },\n                  h6: {\n                    type: 'string'\n                  },\n                  m15: {\n                    type: 'string'\n                  },\n                  m30: {\n                    type: 'string'\n                  },\n                  m5: {\n                    type: 'string'\n                  }\n                }\n              },\n              quote_token_price_base_token: {\n                type: 'string'\n              },\n              quote_token_price_native_currency: {\n                type: 'string'\n              },\n              quote_token_price_usd: {\n                type: 'string'\n              },\n              reserve_in_usd: {\n                type: 'string'\n              },\n              transactions: {\n                type: 'object',\n                properties: {\n                  h1: {\n                    type: 'object',\n                    properties: {\n                      buyers: {\n                        type: 'integer'\n                      },\n                      buys: {\n                        type: 'integer'\n                      },\n                      sellers: {\n                        type: 'integer'\n                      },\n                      sells: {\n                        type: 'integer'\n                      }\n                    }\n                  },\n                  h24: {\n                    type: 'object',\n                    properties: {\n                      buyers: {\n                        type: 'integer'\n                      },\n                      buys: {\n                        type: 'integer'\n                      },\n                      sellers: {\n                        type: 'integer'\n                      },\n                      sells: {\n                        type: 'integer'\n                      }\n                    }\n                  },\n                  m15: {\n                    type: 'object',\n                    properties: {\n                      buyers: {\n                        type: 'integer'\n                      },\n                      buys: {\n                        type: 'integer'\n                      },\n                      sellers: {\n                        type: 'integer'\n                      },\n                      sells: {\n                        type: 'integer'\n                      }\n                    }\n                  },\n                  m30: {\n                    type: 'object',\n                    properties: {\n                      buyers: {\n                        type: 'integer'\n                      },\n                      buys: {\n                        type: 'integer'\n                      },\n                      sellers: {\n                        type: 'integer'\n                      },\n                      sells: {\n                        type: 'integer'\n                      }\n                    }\n                  },\n                  m5: {\n                    type: 'object',\n                    properties: {\n                      buyers: {\n                        type: 'integer'\n                      },\n                      buys: {\n                        type: 'integer'\n                      },\n                      sellers: {\n                        type: 'integer'\n                      },\n                      sells: {\n                        type: 'integer'\n                      }\n                    }\n                  }\n                }\n              },\n              volume_usd: {\n                type: 'object',\n                properties: {\n                  h1: {\n                    type: 'string'\n                  },\n                  h24: {\n                    type: 'string'\n                  },\n                  h6: {\n                    type: 'string'\n                  },\n                  m15: {\n                    type: 'string'\n                  },\n                  m30: {\n                    type: 'string'\n                  },\n                  m5: {\n                    type: 'string'\n                  }\n                }\n              }\n            }\n          },\n          relationships: {\n            type: 'object',\n            properties: {\n              base_token: {\n                type: 'object',\n                properties: {\n                  data: {\n                    type: 'object',\n                    properties: {\n                      id: {\n                        type: 'string'\n                      },\n                      type: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              },\n              dex: {\n                type: 'object',\n                properties: {\n                  data: {\n                    type: 'object',\n                    properties: {\n                      id: {\n                        type: 'string'\n                      },\n                      type: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              },\n              quote_token: {\n                type: 'object',\n                properties: {\n                  data: {\n                    type: 'object',\n                    properties: {\n                      id: {\n                        type: 'string'\n                      },\n                      type: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          type: {\n            type: 'string'\n          }\n        }\n      }\n    },\n    included: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string'\n          },\n          attributes: {\n            type: 'object',\n            properties: {\n              address: {\n                type: 'string'\n              },\n              coingecko_coin_id: {\n                type: 'string'\n              },\n              decimals: {\n                type: 'integer'\n              },\n              image_url: {\n                type: 'string'\n              },\n              name: {\n                type: 'string'\n              },\n              symbol: {\n                type: 'string'\n              }\n            }\n          },\n          type: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_tokens_networks_onchain_pools",
      "canonical_tool_description_hash": "5316af278e884b47cf9547109901231f7208a465e60dfbc52b41c5688818ffa4",
      "canonical_tool_input_schema_hash": "ee299b1370c34a7ff6b1f0c86e435e65d50c6a40f2762a10a031fa2e002baf24"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "token_address": {
          "type": "string"
        },
        "include": {
          "type": "string",
          "description": "attributes to include, comma-separated if more than one to include \n Available values: `base_token`, `quote_token`, `dex`"
        },
        "page": {
          "type": "integer",
          "description": "page through results \n Default value: 1"
        },
        "sort": {
          "type": "string",
          "description": "sort the pools by field \n Default value: h24_volume_usd_liquidity_desc",
          "enum": ["h24_volume_usd_liquidity_desc", "h24_tx_count_desc", "h24_volume_usd_desc"]
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["network", "token_address"]
    }
  },
  {
    "name": "COINGECKO__GET_TOKENS_NETWORKS_ONCHAIN_TRADES",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query the last 300 trades in the past 24 hours, across all pools, based on the provided token contract address on a network**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    data: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string'\n          },\n          attributes: {\n            type: 'object',\n            properties: {\n              block_number: {\n                type: 'integer'\n              },\n              block_timestamp: {\n                type: 'string'\n              },\n              from_token_address: {\n                type: 'string'\n              },\n              from_token_amount: {\n                type: 'string'\n              },\n              kind: {\n                type: 'string'\n              },\n              pool_address: {\n                type: 'string'\n              },\n              pool_dex: {\n                type: 'string'\n              },\n              price_from_in_currency_token: {\n                type: 'string'\n              },\n              price_from_in_usd: {\n                type: 'string'\n              },\n              price_to_in_currency_token: {\n                type: 'string'\n              },\n              price_to_in_usd: {\n                type: 'string'\n              },\n              to_token_address: {\n                type: 'string'\n              },\n              to_token_amount: {\n                type: 'string'\n              },\n              tx_from_address: {\n                type: 'string'\n              },\n              tx_hash: {\n                type: 'string'\n              },\n              volume_in_usd: {\n                type: 'string'\n              }\n            }\n          },\n          type: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_tokens_networks_onchain_trades",
      "canonical_tool_description_hash": "7c94393cb279ecaa4d0c5f724ea1cb3c4b98f6913043d7f3c11622bfd371afd4",
      "canonical_tool_input_schema_hash": "3c753dabf2c191160b8f5be0097582627814b50a83cb109edc307b6d049755ec"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "token_address": {
          "type": "string"
        },
        "trade_volume_in_usd_greater_than": {
          "type": "number",
          "description": "filter trades by trade volume in USD greater than this value \n Default value: 0"
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["network", "token_address"]
    }
  },
  {
    "name": "COINGECKO__GET_POOLS_ONCHAIN_MEGAFILTER",
    "description": "This endpoint allows you to **query pools based on various filters across all networks on GeckoTerminal**",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_pools_onchain_megafilter",
      "canonical_tool_description_hash": "222cf18c9a61679792c87c2928683c099480439e403862c6c2b41224d7dd5ebb",
      "canonical_tool_input_schema_hash": "a94bf1874d3177050d9206d9e42b6a9bc7ac3a0d29805f1b1713ac9154de216e"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "buy_tax_percentage_max": {
          "type": "number",
          "description": "maximum buy tax percentage"
        },
        "buy_tax_percentage_min": {
          "type": "number",
          "description": "minimum buy tax percentage"
        },
        "buys_duration": {
          "type": "string",
          "description": "duration for buy transactions metric \n Default value: 24h",
          "enum": ["5m", "1h", "6h", "24h"]
        },
        "buys_max": {
          "type": "integer",
          "description": "maximum number of buy transactions"
        },
        "buys_min": {
          "type": "integer",
          "description": "minimum number of buy transactions"
        },
        "checks": {
          "type": "string",
          "description": "filter options for various checks, comma-separated if more than one \n Available values: `no_honeypot`, `good_gt_score`, `on_coingecko`, `has_social`"
        },
        "dexes": {
          "type": "string",
          "description": "filter pools by DEXes, comma-separated if more than one \n DEX ID refers to [/networks/{network}/dexes](/reference/dexes-list)"
        },
        "fdv_usd_max": {
          "type": "number",
          "description": "maximum fully diluted value in USD"
        },
        "fdv_usd_min": {
          "type": "number",
          "description": "minimum fully diluted value in USD"
        },
        "h24_volume_usd_max": {
          "type": "number",
          "description": "maximum 24hr volume in USD"
        },
        "h24_volume_usd_min": {
          "type": "number",
          "description": "minimum 24hr volume in USD"
        },
        "include": {
          "type": "string",
          "description": "attributes to include, comma-separated if more than one to include \n Available values: `base_token`, `quote_token`, `dex`, `network`"
        },
        "include_unknown_honeypot_tokens": {
          "type": "boolean",
          "description": "when `checks` includes `no_honeypot`, set to **`true`** to also include 'unknown honeypot' tokens. Default value: `false`"
        },
        "networks": {
          "type": "string",
          "description": "filter pools by networks, comma-separated if more than one \n Network ID refers to [/networks](/reference/networks-list)"
        },
        "page": {
          "type": "integer",
          "description": "page through results \n Default value: 1"
        },
        "pool_created_hour_max": {
          "type": "number",
          "description": "maximum pool age in hours"
        },
        "pool_created_hour_min": {
          "type": "number",
          "description": "minimum pool age in hours"
        },
        "reserve_in_usd_max": {
          "type": "number",
          "description": "maximum reserve in USD"
        },
        "reserve_in_usd_min": {
          "type": "number",
          "description": "minimum reserve in USD"
        },
        "sell_tax_percentage_max": {
          "type": "number",
          "description": "maximum sell tax percentage"
        },
        "sell_tax_percentage_min": {
          "type": "number",
          "description": "minimum sell tax percentage"
        },
        "sells_duration": {
          "type": "string",
          "description": "duration for sell transactions metric \n Default value: 24h",
          "enum": ["5m", "1h", "6h", "24h"]
        },
        "sells_max": {
          "type": "integer",
          "description": "maximum number of sell transactions"
        },
        "sells_min": {
          "type": "integer",
          "description": "minimum number of sell transactions"
        },
        "sort": {
          "type": "string",
          "description": "sort the pools by field \n Default value: h6_trending",
          "enum": [
            "m5_trending",
            "h1_trending",
            "h6_trending",
            "h24_trending",
            "h24_tx_count_desc",
            "h24_volume_usd_desc",
            "m5_price_change_percentage_desc",
            "h1_price_change_percentage_desc",
            "h6_price_change_percentage_desc",
            "h24_price_change_percentage_desc",
            "fdv_usd_asc",
            "fdv_usd_desc",
            "reserve_in_usd_asc",
            "reserve_in_usd_desc",
            "pool_created_at_desc"
          ]
        },
        "tx_count_duration": {
          "type": "string",
          "description": "duration for transaction count metric \n Default value: 24h",
          "enum": ["5m", "1h", "6h", "24h"]
        },
        "tx_count_max": {
          "type": "integer",
          "description": "maximum transaction count"
        },
        "tx_count_min": {
          "type": "integer",
          "description": "minimum transaction count"
        }
      },
      "required": []
    }
  },
  {
    "name": "COINGECKO__GET_POOLS_ONCHAIN_TRENDING_SEARCH",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query all the trending search pools across all networks on GeckoTerminal**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    data: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string'\n          },\n          attributes: {\n            type: 'object',\n            properties: {\n              address: {\n                type: 'string'\n              },\n              fdv_usd: {\n                type: 'string'\n              },\n              market_cap_usd: {\n                type: 'string'\n              },\n              name: {\n                type: 'string'\n              },\n              pool_created_at: {\n                type: 'string'\n              },\n              reserve_in_usd: {\n                type: 'string'\n              },\n              trending_rank: {\n                type: 'number'\n              },\n              volume_usd: {\n                type: 'object',\n                properties: {\n                  h24: {\n                    type: 'string'\n                  }\n                }\n              }\n            }\n          },\n          relationships: {\n            type: 'object',\n            properties: {\n              base_token: {\n                type: 'object',\n                properties: {\n                  data: {\n                    type: 'object',\n                    properties: {\n                      id: {\n                        type: 'string'\n                      },\n                      type: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              },\n              dex: {\n                type: 'object',\n                properties: {\n                  data: {\n                    type: 'object',\n                    properties: {\n                      id: {\n                        type: 'string'\n                      },\n                      type: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              },\n              network: {\n                type: 'object',\n                properties: {\n                  data: {\n                    type: 'object',\n                    properties: {\n                      id: {\n                        type: 'string'\n                      },\n                      type: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              },\n              quote_token: {\n                type: 'object',\n                properties: {\n                  data: {\n                    type: 'object',\n                    properties: {\n                      id: {\n                        type: 'string'\n                      },\n                      type: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          type: {\n            type: 'string'\n          }\n        }\n      }\n    },\n    included: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string'\n          },\n          attributes: {\n            type: 'object',\n            properties: {\n              address: {\n                type: 'string'\n              },\n              coingecko_coin_id: {\n                type: 'string'\n              },\n              decimals: {\n                type: 'integer'\n              },\n              image_url: {\n                type: 'string'\n              },\n              name: {\n                type: 'string'\n              },\n              symbol: {\n                type: 'string'\n              }\n            }\n          },\n          type: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_pools_onchain_trending_search",
      "canonical_tool_description_hash": "a9e77270eb9150adeb92a17cab03d1025b495cef63d6225001dd758ff0ac2dba",
      "canonical_tool_input_schema_hash": "0b18aa7bc38b09099d6d644a1abab36a08d01790b44038bf1a512eb48c5a2220"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "include": {
          "type": "string",
          "description": "attributes to include, comma-separated if more than one to include \n Available values: `base_token`, `quote_token`, `dex`, `network`"
        },
        "pools": {
          "type": "integer",
          "description": "number of pools to return, maximum 10 \n Default value: 4"
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": []
    }
  },
  {
    "name": "COINGECKO__GET_SEARCH_ONCHAIN_POOLS",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **search for pools on a network**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    data: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string'\n          },\n          attributes: {\n            type: 'object',\n            properties: {\n              address: {\n                type: 'string'\n              },\n              base_token_price_native_currency: {\n                type: 'string'\n              },\n              base_token_price_quote_token: {\n                type: 'string'\n              },\n              base_token_price_usd: {\n                type: 'string'\n              },\n              fdv_usd: {\n                type: 'string'\n              },\n              market_cap_usd: {\n                type: 'string'\n              },\n              name: {\n                type: 'string'\n              },\n              pool_created_at: {\n                type: 'string'\n              },\n              price_change_percentage: {\n                type: 'object',\n                properties: {\n                  h1: {\n                    type: 'string'\n                  },\n                  h24: {\n                    type: 'string'\n                  },\n                  h6: {\n                    type: 'string'\n                  },\n                  m15: {\n                    type: 'string'\n                  },\n                  m30: {\n                    type: 'string'\n                  },\n                  m5: {\n                    type: 'string'\n                  }\n                }\n              },\n              quote_token_price_base_token: {\n                type: 'string'\n              },\n              quote_token_price_native_currency: {\n                type: 'string'\n              },\n              quote_token_price_usd: {\n                type: 'string'\n              },\n              reserve_in_usd: {\n                type: 'string'\n              },\n              transactions: {\n                type: 'object',\n                properties: {\n                  h1: {\n                    type: 'object',\n                    properties: {\n                      buyers: {\n                        type: 'integer'\n                      },\n                      buys: {\n                        type: 'integer'\n                      },\n                      sellers: {\n                        type: 'integer'\n                      },\n                      sells: {\n                        type: 'integer'\n                      }\n                    }\n                  },\n                  h24: {\n                    type: 'object',\n                    properties: {\n                      buyers: {\n                        type: 'integer'\n                      },\n                      buys: {\n                        type: 'integer'\n                      },\n                      sellers: {\n                        type: 'integer'\n                      },\n                      sells: {\n                        type: 'integer'\n                      }\n                    }\n                  },\n                  m15: {\n                    type: 'object',\n                    properties: {\n                      buyers: {\n                        type: 'integer'\n                      },\n                      buys: {\n                        type: 'integer'\n                      },\n                      sellers: {\n                        type: 'integer'\n                      },\n                      sells: {\n                        type: 'integer'\n                      }\n                    }\n                  },\n                  m30: {\n                    type: 'object',\n                    properties: {\n                      buyers: {\n                        type: 'integer'\n                      },\n                      buys: {\n                        type: 'integer'\n                      },\n                      sellers: {\n                        type: 'integer'\n                      },\n                      sells: {\n                        type: 'integer'\n                      }\n                    }\n                  },\n                  m5: {\n                    type: 'object',\n                    properties: {\n                      buyers: {\n                        type: 'integer'\n                      },\n                      buys: {\n                        type: 'integer'\n                      },\n                      sellers: {\n                        type: 'integer'\n                      },\n                      sells: {\n                        type: 'integer'\n                      }\n                    }\n                  }\n                }\n              },\n              volume_usd: {\n                type: 'object',\n                properties: {\n                  h1: {\n                    type: 'string'\n                  },\n                  h24: {\n                    type: 'string'\n                  },\n                  h6: {\n                    type: 'string'\n                  },\n                  m15: {\n                    type: 'string'\n                  },\n                  m30: {\n                    type: 'string'\n                  },\n                  m5: {\n                    type: 'string'\n                  }\n                }\n              }\n            }\n          },\n          relationships: {\n            type: 'object',\n            properties: {\n              base_token: {\n                type: 'object',\n                properties: {\n                  data: {\n                    type: 'object',\n                    properties: {\n                      id: {\n                        type: 'string'\n                      },\n                      type: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              },\n              dex: {\n                type: 'object',\n                properties: {\n                  data: {\n                    type: 'object',\n                    properties: {\n                      id: {\n                        type: 'string'\n                      },\n                      type: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              },\n              quote_token: {\n                type: 'object',\n                properties: {\n                  data: {\n                    type: 'object',\n                    properties: {\n                      id: {\n                        type: 'string'\n                      },\n                      type: {\n                        type: 'string'\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          type: {\n            type: 'string'\n          }\n        }\n      }\n    },\n    included: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string'\n          },\n          attributes: {\n            type: 'object',\n            properties: {\n              address: {\n                type: 'string'\n              },\n              coingecko_coin_id: {\n                type: 'string'\n              },\n              decimals: {\n                type: 'integer'\n              },\n              image_url: {\n                type: 'string'\n              },\n              name: {\n                type: 'string'\n              },\n              symbol: {\n                type: 'string'\n              }\n            }\n          },\n          type: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_search_onchain_pools",
      "canonical_tool_description_hash": "04024bca3ac430d8883e7d50ee67f505b1704e0d58bdcedf78978213aaabf3da",
      "canonical_tool_input_schema_hash": "08788b1caf8c90af873e29175e05855d61c78de81706a7255c0fba5264636ca8"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "include": {
          "type": "string",
          "description": "attributes to include, comma-separated if more than one to include \n Available values: `base_token`, `quote_token`, `dex`"
        },
        "network": {
          "type": "string",
          "description": "network ID \n *refers to [/networks](/reference/networks-list)"
        },
        "page": {
          "type": "integer",
          "description": "page through results \n Default value: 1"
        },
        "query": {
          "type": "string",
          "description": "search query"
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": []
    }
  },
  {
    "name": "COINGECKO__GET_ADDRESSES_NETWORKS_SIMPLE_ONCHAIN_TOKEN_PRICE",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **get token price based on the provided token contract address on a network**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    data: {\n      type: 'object',\n      properties: {\n        id: {\n          type: 'string'\n        },\n        attributes: {\n          type: 'object',\n          properties: {\n            token_prices: {\n              type: 'object',\n              additionalProperties: true\n            }\n          }\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_addresses_networks_simple_onchain_token_price",
      "canonical_tool_description_hash": "306a8664e940200e24a55571c6b0edb8853b81534e6aad57680a3854688e2fce",
      "canonical_tool_input_schema_hash": "f833b6c51ba3d254625f32f99f771bd6be1536789454c2d47f62ced4100d2f05"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "addresses": {
          "type": "string"
        },
        "include_24hr_price_change": {
          "type": "boolean",
          "description": "include 24hr price change, default: false"
        },
        "include_24hr_vol": {
          "type": "boolean",
          "description": "include 24hr volume, default: false"
        },
        "include_market_cap": {
          "type": "boolean",
          "description": "include market capitalization, default: false"
        },
        "include_total_reserve_in_usd": {
          "type": "boolean",
          "description": "include total reserve in USD, default: false"
        },
        "mcap_fdv_fallback": {
          "type": "boolean",
          "description": "return FDV if market cap is not available, default: false"
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["network", "addresses"]
    }
  },
  {
    "name": "COINGECKO__GET_SEARCH",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **search for coins, categories and markets listed on CoinGecko**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    categories: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string',\n            description: 'category ID'\n          },\n          name: {\n            type: 'string',\n            description: 'category name'\n          }\n        }\n      }\n    },\n    coins: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string',\n            description: 'coin ID'\n          },\n          api_symbol: {\n            type: 'string',\n            description: 'coin api symbol'\n          },\n          large: {\n            type: 'string',\n            description: 'coin large image url'\n          },\n          market_cap_rank: {\n            type: 'number',\n            description: 'coin market cap rank'\n          },\n          name: {\n            type: 'string',\n            description: 'coin name'\n          },\n          symbol: {\n            type: 'string',\n            description: 'coin symbol'\n          },\n          thumb: {\n            type: 'string',\n            description: 'coin thumb image url'\n          }\n        }\n      }\n    },\n    exchanges: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string',\n            description: 'exchange ID'\n          },\n          large: {\n            type: 'string',\n            description: 'exchange large image url'\n          },\n          market_type: {\n            type: 'string',\n            description: 'exchange market type'\n          },\n          name: {\n            type: 'string',\n            description: 'exchange name'\n          },\n          thumb: {\n            type: 'string',\n            description: 'exchange thumb image url'\n          }\n        }\n      }\n    },\n    icos: {\n      type: 'array',\n      items: {\n        type: 'string'\n      }\n    },\n    nfts: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string',\n            description: 'NFT collection ID'\n          },\n          name: {\n            type: 'string',\n            description: 'NFT name'\n          },\n          symbol: {\n            type: 'string',\n            description: 'NFT collection symbol'\n          },\n          thumb: {\n            type: 'string',\n            description: 'NFT collection thumb image url'\n          }\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_search",
      "canonical_tool_description_hash": "18d03ca3e6052a000f551f71f1c9eed2238fc13d6fd32a014da984df09a64f6f",
      "canonical_tool_input_schema_hash": "89e2c16a48c2886791fb6c86e77cf20d53715858c8861d2a2ef8c5aaf11226a9"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "search query"
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["query"]
    }
  },
  {
    "name": "COINGECKO__GET_SEARCH_TRENDING",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you **query trending search coins, NFTs and categories on CoinGecko in the last 24 hours**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    categories: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'number'\n          },\n          coins_count: {\n            type: 'number',\n            description: 'category number of coins'\n          },\n          data: {\n            type: 'object',\n            properties: {\n              market_cap: {\n                type: 'number',\n                description: 'category market cap'\n              },\n              market_cap_btc: {\n                type: 'number',\n                description: 'category market cap in btc'\n              },\n              market_cap_change_percentage_24h: {\n                type: 'object',\n                description: 'category market cap change percentage in 24 hours',\n                properties: {\n                  btc: {\n                    type: 'number'\n                  },\n                  usd: {\n                    type: 'number'\n                  }\n                }\n              },\n              sparkline: {\n                type: 'string',\n                description: 'category sparkline image url'\n              },\n              total_volume: {\n                type: 'number',\n                description: 'category total volume'\n              },\n              total_volume_btc: {\n                type: 'number',\n                description: 'category total volume in btc'\n              }\n            }\n          },\n          market_cap_1h_change: {\n            type: 'number',\n            description: 'category market cap 1 hour change'\n          },\n          name: {\n            type: 'string',\n            description: 'category name'\n          },\n          slug: {\n            type: 'string',\n            description: 'category web slug'\n          }\n        }\n      }\n    },\n    coins: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string',\n            description: 'coin ID'\n          },\n          coin_id: {\n            type: 'number'\n          },\n          data: {\n            type: 'object',\n            properties: {\n              content: {\n                type: 'string'\n              },\n              market_cap: {\n                type: 'string',\n                description: 'coin market cap in usd'\n              },\n              market_cap_btc: {\n                type: 'string',\n                description: 'coin market cap in btc'\n              },\n              price: {\n                type: 'number',\n                description: 'coin price in usd'\n              },\n              price_btc: {\n                type: 'string',\n                description: 'coin price in btc'\n              },\n              price_change_percentage_24h: {\n                type: 'object',\n                description: 'coin price change percentage in 24 hours',\n                properties: {\n                  btc: {\n                    type: 'number'\n                  },\n                  usd: {\n                    type: 'number'\n                  }\n                }\n              },\n              sparkline: {\n                type: 'string',\n                description: 'coin sparkline image url'\n              },\n              total_volume: {\n                type: 'string',\n                description: 'coin total volume in usd'\n              },\n              total_volume_btc: {\n                type: 'string',\n                description: 'coin total volume in btc'\n              }\n            }\n          },\n          large: {\n            type: 'string',\n            description: 'coin large image url'\n          },\n          market_cap_rank: {\n            type: 'number',\n            description: 'coin market cap rank'\n          },\n          name: {\n            type: 'string',\n            description: 'coin name'\n          },\n          price_btc: {\n            type: 'number',\n            description: 'coin price in btc'\n          },\n          score: {\n            type: 'number',\n            description: 'coin sequence in the list'\n          },\n          slug: {\n            type: 'string',\n            description: 'coin web slug'\n          },\n          small: {\n            type: 'string',\n            description: 'coin small image url'\n          },\n          symbol: {\n            type: 'string',\n            description: 'coin symbol'\n          },\n          thumb: {\n            type: 'string',\n            description: 'coin thumb image url'\n          }\n        }\n      }\n    },\n    nfts: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: {\n            type: 'string',\n            description: 'NFT collection ID'\n          },\n          data: {\n            type: 'object',\n            properties: {\n              content: {\n                type: 'string'\n              },\n              floor_price: {\n                type: 'string',\n                description: 'NFT collection floor price'\n              },\n              floor_price_in_usd_24h_percentage_change: {\n                type: 'string',\n                description: 'NFT collection floor price in usd 24 hours percentage change'\n              },\n              h24_average_sale_price: {\n                type: 'string',\n                description: 'NFT collection 24 hours average sale price'\n              },\n              h24_volume: {\n                type: 'string',\n                description: 'NFT collection volume in 24 hours'\n              },\n              sparkline: {\n                type: 'string',\n                description: 'NFT collection sparkline image url'\n              }\n            }\n          },\n          floor_price_24h_percentage_change: {\n            type: 'number',\n            description: 'NFT collection floor price 24 hours percentage change'\n          },\n          floor_price_in_native_currency: {\n            type: 'number',\n            description: 'NFT collection floor price in native currency'\n          },\n          name: {\n            type: 'string',\n            description: 'NFT collection name'\n          },\n          native_currency_symbol: {\n            type: 'string',\n            description: 'NFT collection native currency symbol'\n          },\n          nft_contract_id: {\n            type: 'number'\n          },\n          symbol: {\n            type: 'string',\n            description: 'NFT collection symbol'\n          },\n          thumb: {\n            type: 'string',\n            description: 'NFT collection thumb image url'\n          }\n        }\n      }\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_search_trending",
      "canonical_tool_description_hash": "bc64e931b0d1775137cfc4cbfa4e48fd856e96db19b7bbc006e213aa25c8d163",
      "canonical_tool_input_schema_hash": "d67acd4b816e32db27f257bd221dd351942ec11a2d3e1b748e6d2200bb767024"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "show_max": {
          "type": "string",
          "description": "show max number of results available for the given type \n Available values: `coins`, `nfts`, `categories` \n Example: `coins` or `coins,nfts,categories`"
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": []
    }
  },
  {
    "name": "COINGECKO__GET_SIMPLE_PRICE",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query the prices of one or more coins by using their unique Coin API IDs**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  additionalProperties: true\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_simple_price",
      "canonical_tool_description_hash": "5c641ab9811b05867b35497b6f3f53ade8e851285023196f2a6b6a8fd15297e7",
      "canonical_tool_input_schema_hash": "6df79a50690febf01f062f581f83e4413a92349cb7aa3153debbfd85c800168d"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "vs_currencies": {
          "type": "string",
          "description": "target currency of coins, comma-separated if querying more than 1 currency. \n *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies)."
        },
        "ids": {
          "type": "string",
          "description": "coins' IDs, comma-separated if querying more than 1 coin. \n *refers to [`/coins/list`](/reference/coins-list)."
        },
        "include_24hr_change": {
          "type": "boolean",
          "description": "include 24hr change percentage, default: false"
        },
        "include_24hr_vol": {
          "type": "boolean",
          "description": "include 24hr volume, default: false"
        },
        "include_last_updated_at": {
          "type": "boolean",
          "description": "include last updated price time in UNIX, default: false"
        },
        "include_market_cap": {
          "type": "boolean",
          "description": "include market capitalization, default: false"
        },
        "include_tokens": {
          "type": "string",
          "description": "for `symbols` lookups, specify `all` to include all matching tokens \n Default `top` returns top-ranked tokens (by market cap or volume)",
          "enum": ["top", "all"]
        },
        "names": {
          "type": "string",
          "description": "coins' names, comma-separated if querying more than 1 coin."
        },
        "precision": {
          "type": "string",
          "description": "decimal place for currency price value",
          "enum": [
            "full",
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18"
          ]
        },
        "symbols": {
          "type": "string",
          "description": "coins' symbols, comma-separated if querying more than 1 coin."
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["vs_currencies"]
    }
  },
  {
    "name": "COINGECKO__GET_SIMPLE_SUPPORTED_VS_CURRENCIES",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query all the supported currencies on CoinGecko**\n\n# Response Schema\n```json\n{\n  type: 'array',\n  items: {\n    type: 'string'\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_simple_supported_vs_currencies",
      "canonical_tool_description_hash": "7faba3f372e55981d0dd0cb70abcaff2e5906422166b4754a75eff9f3e4b4ca7",
      "canonical_tool_input_schema_hash": "dbdd9edb9a8e32e4177c31ea4c9a8b9eb68069748aa52e1903c95117d86d7312"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": []
    }
  },
  {
    "name": "COINGECKO__GET_ID_SIMPLE_TOKEN_PRICE",
    "description": "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nThis endpoint allows you to **query one or more token prices using their token contract addresses**\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    last_updated_at: {\n      type: 'number',\n      description: 'last updated timestamp'\n    },\n    usd: {\n      type: 'number',\n      description: 'price in USD'\n    },\n    usd_24h_change: {\n      type: 'number',\n      description: '24hr change in USD'\n    },\n    usd_24h_vol: {\n      type: 'number',\n      description: '24hr volume in USD'\n    },\n    usd_market_cap: {\n      type: 'number',\n      description: 'market cap in USD'\n    }\n  }\n}\n```",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_id_simple_token_price",
      "canonical_tool_description_hash": "b8be54da0f4b5a8483ccf35a1e1e34e17aadc296bf1e68f49ab646c260c83b58",
      "canonical_tool_input_schema_hash": "b8dd8316d1c87b342056ca596feab00ec4f4feb77b6f10a7a6cbdee25501be53"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "contract_addresses": {
          "type": "string",
          "description": "the contract addresses of tokens, comma-separated if querying more than 1 token's contract address"
        },
        "vs_currencies": {
          "type": "string",
          "description": "target currency of coins, comma-separated if querying more than 1 currency. \n *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies)."
        },
        "include_24hr_change": {
          "type": "boolean",
          "description": "include 24hr change \n default: false"
        },
        "include_24hr_vol": {
          "type": "boolean",
          "description": "include 24hr volume, default: false"
        },
        "include_last_updated_at": {
          "type": "boolean",
          "description": "include last updated price time in UNIX , default: false"
        },
        "include_market_cap": {
          "type": "boolean",
          "description": "include market capitalization, default: false"
        },
        "precision": {
          "type": "string",
          "description": "decimal place for currency price value",
          "enum": [
            "full",
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18"
          ]
        },
        "jq_filter": {
          "type": "string",
          "title": "jq Filter",
          "description": "A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide \".results[].name\".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/)."
        }
      },
      "required": ["id", "contract_addresses", "vs_currencies"]
    }
  }
]
