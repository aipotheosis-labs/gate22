[
  {
    "name": "NEON__LIST_PROJECTS",
    "description": "Lists the first 10 Neon projects in your account. If you can't find the project, increase the limit by passing a higher value to the `limit` parameter. Optionally filter by project name or ID using the `search` parameter.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "list_projects",
      "canonical_tool_description_hash": "ba899c924cde93afb74adda044be8bd22efb0ee1d8dae883ce5352dfe74e1198",
      "canonical_tool_input_schema_hash": "71686dffd9363620ae22ca7b30e35274e7c83dcb40523d3d0f5c1826f970fdeb"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "cursor": {
              "type": "string",
              "description": "Specify the cursor value from the previous response to retrieve the next batch of projects."
            },
            "limit": {
              "type": "number",
              "default": 10,
              "description": "Specify a value from 1 to 400 to limit number of projects in the response."
            },
            "search": {
              "type": "string",
              "description": "Search by project name or id. You can specify partial name or id values to filter results."
            },
            "org_id": {
              "type": "string",
              "description": "Search for projects by org_id."
            }
          },
          "additionalProperties": false
        }
      },
      "required": ["params"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "NEON__LIST_ORGANIZATIONS",
    "description": "Lists all organizations that the current user has access to. Optionally filter by organization name or ID using the `search` parameter.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "list_organizations",
      "canonical_tool_description_hash": "823c5e6775c53b40fc38cd21d1c7c4f378d99e7e481995af4a1917bd1159e5ca",
      "canonical_tool_input_schema_hash": "d3c92f4132eb1e1f63d768702f775e6dd5684eec6d3cb877bcec903ecc08d552"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "search": {
              "type": "string",
              "description": "Search organizations by name or ID. You can specify partial name or ID values to filter results."
            }
          },
          "additionalProperties": false
        }
      },
      "required": ["params"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "NEON__LIST_SHARED_PROJECTS",
    "description": "Lists projects that have been shared with the current user. These are projects that the user has been granted access to collaborate on. Optionally filter by project name or ID using the `search` parameter.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "list_shared_projects",
      "canonical_tool_description_hash": "00800c202fa61109c211004cf63d24383e588567f496affaa5ab74e72dbe87da",
      "canonical_tool_input_schema_hash": "52d6c1e92571acebf1440dc68c19aa9c247dd1ae8e33c3660d649175ba91e171"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "cursor": {
              "type": "string",
              "description": "Specify the cursor value from the previous response to retrieve the next batch of shared projects."
            },
            "limit": {
              "type": "number",
              "default": 10,
              "description": "Specify a value from 1 to 400 to limit number of shared projects in the response."
            },
            "search": {
              "type": "string",
              "description": "Search by project name or id. You can specify partial name or id values to filter results."
            }
          },
          "additionalProperties": false
        }
      },
      "required": ["params"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "NEON__CREATE_PROJECT",
    "description": "Create a new Neon project. If someone is trying to create a database, use this tool.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "create_project",
      "canonical_tool_description_hash": "c7c4d4f6d09c518e82f4b27832f1ef8ef902949d3eaf7123d21a76b13c19fd38",
      "canonical_tool_input_schema_hash": "c92ec925d730d4af0607b8945e459d3d69190dda9258ac1f175f67a8008eb0e3"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "An optional name of the project to create."
            },
            "org_id": {
              "type": "string",
              "description": "Create project in a specific organization."
            }
          },
          "additionalProperties": false
        }
      },
      "required": ["params"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "NEON__DELETE_PROJECT",
    "description": "Delete a Neon project",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "delete_project",
      "canonical_tool_description_hash": "7eac633b694eb0bb403b574877eb61224af1a9551db1719077b21f9eab633a15",
      "canonical_tool_input_schema_hash": "230d089ba122a7bdc386a58fdc5f8e4f758b4fc030b075d84ae5bc19bdffcaf1"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "projectId": {
              "type": "string",
              "description": "The ID of the project to delete"
            }
          },
          "required": ["projectId"],
          "additionalProperties": false
        }
      },
      "required": ["params"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "NEON__DESCRIBE_PROJECT",
    "description": "Describes a Neon project",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "describe_project",
      "canonical_tool_description_hash": "38f7396c821a7e23cc4bb48f434ddd0f7b4eba623ac95c021b9bdd5421660984",
      "canonical_tool_input_schema_hash": "8cefc171dac61adc87ec79d827d0310dfcda369a04c054aff4eb878f9175c441"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "projectId": {
              "type": "string",
              "description": "The ID of the project to describe"
            }
          },
          "required": ["projectId"],
          "additionalProperties": false
        }
      },
      "required": ["params"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "NEON__RUN_SQL",
    "description": "\n    <use_case>\n      Use this tool to execute a single SQL statement against a Neon database.\n    </use_case>\n\n    <important_notes>\n      If you have a temporary branch from a prior step, you MUST:\n      1. Pass the branch ID to this tool unless explicitly told otherwise\n      2. Tell the user that you are using the temporary branch with ID [branch_id]\n    </important_notes>",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "run_sql",
      "canonical_tool_description_hash": "de5c9cced708cf63209cf89733d79237e908cefa08fa0d2e780a7704a25c9dab",
      "canonical_tool_input_schema_hash": "e77288389a4abb6ca92361cf9b0d734c5536268b778b5ac023d10de5a5fc9be2"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "sql": {
              "type": "string",
              "description": "The SQL query to execute"
            },
            "projectId": {
              "type": "string",
              "description": "The ID of the project to execute the query against"
            },
            "branchId": {
              "type": "string",
              "description": "An optional ID of the branch to execute the query against. If not provided the default branch is used."
            },
            "databaseName": {
              "type": "string",
              "description": "The name of the database. If not provided, the default neondb or first available database is used."
            }
          },
          "required": ["sql", "projectId"],
          "additionalProperties": false
        }
      },
      "required": ["params"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "NEON__RUN_SQL_TRANSACTION",
    "description": "\n    <use_case>\n      Use this tool to execute a SQL transaction against a Neon database, should be used for multiple SQL statements.\n    </use_case>\n\n    <important_notes>\n      If you have a temporary branch from a prior step, you MUST:\n      1. Pass the branch ID to this tool unless explicitly told otherwise\n      2. Tell the user that you are using the temporary branch with ID [branch_id]\n    </important_notes>",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "run_sql_transaction",
      "canonical_tool_description_hash": "b7f3d079bbfc7bd145311b6b5e5bee65a7f5c5b73a4ae60916670d10e4fceeb6",
      "canonical_tool_input_schema_hash": "c04bf7b8a7c2b504c380859cdbecf3d81578f6b56d9a60f7c2aeb6030f5d5d0f"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "sqlStatements": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The SQL statements to execute"
            },
            "projectId": {
              "type": "string",
              "description": "The ID of the project to execute the query against"
            },
            "branchId": {
              "type": "string",
              "description": "An optional ID of the branch to execute the query against. If not provided the default branch is used."
            },
            "databaseName": {
              "type": "string",
              "description": "The name of the database. If not provided, the default neondb or first available database is used."
            }
          },
          "required": ["sqlStatements", "projectId"],
          "additionalProperties": false
        }
      },
      "required": ["params"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "NEON__DESCRIBE_TABLE_SCHEMA",
    "description": "Describe the schema of a table in a Neon database",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "describe_table_schema",
      "canonical_tool_description_hash": "54fe52380309399c2e52afb46eb68b36f07f4aa6585e53cf499c743d28132155",
      "canonical_tool_input_schema_hash": "00d8522b649a9f553b97e2576cb0a890b8e3a11bfdf260385ab94f917d3ae02c"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "tableName": {
              "type": "string",
              "description": "The name of the table"
            },
            "projectId": {
              "type": "string",
              "description": "The ID of the project to execute the query against"
            },
            "branchId": {
              "type": "string",
              "description": "An optional ID of the branch to execute the query against. If not provided the default branch is used."
            },
            "databaseName": {
              "type": "string",
              "description": "The name of the database. If not provided, the default neondb or first available database is used."
            }
          },
          "required": ["tableName", "projectId"],
          "additionalProperties": false
        }
      },
      "required": ["params"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "NEON__GET_DATABASE_TABLES",
    "description": "Get all tables in a Neon database",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_database_tables",
      "canonical_tool_description_hash": "e37dc53c91f2bd4b45d85d7d2104ea1fd728776d637df66fe429d418b88e37a3",
      "canonical_tool_input_schema_hash": "aad67aa98ec3624314886d2c5ea3023eee6b333fe0591b204803dfbfabdbe90c"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "projectId": {
              "type": "string",
              "description": "The ID of the project"
            },
            "branchId": {
              "type": "string",
              "description": "An optional ID of the branch. If not provided the default branch is used."
            },
            "databaseName": {
              "type": "string",
              "description": "The name of the database. If not provided, the default neondb or first available database is used."
            }
          },
          "required": ["projectId"],
          "additionalProperties": false
        }
      },
      "required": ["params"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "NEON__CREATE_BRANCH",
    "description": "Create a branch in a Neon project",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "create_branch",
      "canonical_tool_description_hash": "ac7de02cf736585980d07fe6ecde43f53c3a0ca5cfa9d2c0c69e5db4fd483670",
      "canonical_tool_input_schema_hash": "6396510f1c48883c7440beba576a866f6579dada4904e4a07619c2c657cc5fa4"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "projectId": {
              "type": "string",
              "description": "The ID of the project to create the branch in"
            },
            "branchName": {
              "type": "string",
              "description": "An optional name for the branch"
            }
          },
          "required": ["projectId"],
          "additionalProperties": false
        }
      },
      "required": ["params"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "NEON__PREPARE_DATABASE_MIGRATION",
    "description": "\n  <use_case>\n    This tool performs database schema migrations by automatically generating and executing DDL statements.\n    \n    Supported operations:\n    CREATE operations:\n    - Add new columns (e.g., \"Add email column to users table\")\n    - Create new tables (e.g., \"Create posts table with title and content columns\")\n    - Add constraints (e.g., \"Add unique constraint on `users.email`\")\n\n    ALTER operations:\n    - Modify column types (e.g., \"Change posts.views to bigint\")\n    - Rename columns (e.g., \"Rename user_name to username in users table\")\n    - Add/modify indexes (e.g., \"Add index on `posts.title`\")\n    - Add/modify foreign keys (e.g., \"Add foreign key from `posts.user_id` to `users.id`\")\n\n    DROP operations:\n    - Remove columns (e.g., \"Drop temporary_field from users table\")\n    - Drop tables (e.g., \"Drop the old_logs table\")\n    - Remove constraints (e.g., \"Remove unique constraint from posts.slug\")\n\n    The tool will:\n    1. Parse your natural language request\n    2. Generate appropriate SQL\n    3. Execute in a temporary branch for safety\n    4. Verify the changes before applying to main branch\n\n    Project ID and database name will be automatically extracted from your request.\n    If the database name is not provided, the default neondb or first available database is used.\n  </use_case>\n\n  <workflow>\n    1. Creates a temporary branch\n    2. Applies the migration SQL in that branch\n    3. Returns migration details for verification\n  </workflow>\n\n  <important_notes>\n    After executing this tool, you MUST:\n    1. Test the migration in the temporary branch using the `run_sql` tool\n    2. Ask for confirmation before proceeding\n    3. Use `complete_database_migration` tool to apply changes to main branch\n  </important_notes>\n\n  <example>\n    For a migration like:\n    ```sql\n    ALTER TABLE users ADD COLUMN last_login TIMESTAMP;\n    ```\n    \n    You should test it with:\n    ```sql\n    SELECT column_name, data_type \n    FROM information_schema.columns \n    WHERE table_name = 'users' AND column_name = 'last_login';\n    ```\n    \n    You can use `run_sql` to test the migration in the temporary branch that this tool creates.\n  </example>\n\n\n  <next_steps>\n  After executing this tool, you MUST follow these steps:\n    1. Use `run_sql` to verify changes on temporary branch\n    2. Follow these instructions to respond to the client: \n\n      <response_instructions>\n        <instructions>\n          Provide a brief confirmation of the requested change and ask for migration commit approval.\n\n          You MUST include ALL of the following fields in your response:\n          - Migration ID (this is required for commit and must be shown first)  \n          - Temporary Branch Name (always include exact branch name)\n          - Temporary Branch ID (always include exact ID)\n          - Migration Result (include brief success/failure status)\n\n          Even if some fields are missing from the tool's response, use placeholders like \"not provided\" rather than omitting fields.\n        </instructions>\n\n        <do_not_include>\n          IMPORTANT: Your response MUST NOT contain ANY technical implementation details such as:\n          - Data types (e.g., DO NOT mention if a column is boolean, varchar, timestamp, etc.)\n          - Column specifications or properties\n          - SQL syntax or statements\n          - Constraint definitions or rules\n          - Default values\n          - Index types\n          - Foreign key specifications\n          \n          Keep the response focused ONLY on confirming the high-level change and requesting approval.\n          \n          <example>\n            INCORRECT: \"I've added a boolean `is_published` column to the `posts` table...\"\n            CORRECT: \"I've added the `is_published` column to the `posts` table...\"\n          </example>\n        </do_not_include>\n\n        <example>\n          I've verified that [requested change] has been successfully applied to a temporary branch. Would you like to commit the migration `[migration_id]` to the main branch?\n          \n          Migration Details:\n          - Migration ID (required for commit)\n          - Temporary Branch Name\n          - Temporary Branch ID\n          - Migration Result\n        </example>\n      </response_instructions>\n\n    3. If approved, use `complete_database_migration` tool with the `migration_id`\n  </next_steps>\n\n  <error_handling>\n    On error, the tool will:\n    1. Automatically attempt ONE retry of the exact same operation\n    2. If the retry fails:\n      - Terminate execution\n      - Return error details\n      - DO NOT attempt any other tools or alternatives\n    \n    Error response will include:\n    - Original error details\n    - Confirmation that retry was attempted\n    - Final error state\n    \n    Important: After a failed retry, you must terminate the current flow completely. Do not attempt to use alternative tools or workarounds.\n  </error_handling>",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "prepare_database_migration",
      "canonical_tool_description_hash": "cdf7d5157cc29354df268d389f3fcfaf01af8d9bea6292741276feb3dfc6527f",
      "canonical_tool_input_schema_hash": "28cf082c05e83d25094bb18056d14a2af42d74ee2b615bb783b39b9033f27594"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "migrationSql": {
              "type": "string",
              "description": "The SQL to execute to create the migration"
            },
            "projectId": {
              "type": "string",
              "description": "The ID of the project to execute the query against"
            },
            "databaseName": {
              "type": "string",
              "description": "The name of the database. If not provided, the default neondb or first available database is used."
            }
          },
          "required": ["migrationSql", "projectId"],
          "additionalProperties": false
        }
      },
      "required": ["params"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "NEON__COMPLETE_DATABASE_MIGRATION",
    "description": "Complete a database migration when the user confirms the migration is ready to be applied to the main branch. This tool also lets the client know that the temporary branch created by the `prepare_database_migration` tool has been deleted.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "complete_database_migration",
      "canonical_tool_description_hash": "e969c1ca05d3de3e6d787ee89faa632daf1885d84de379a3358b4989f04a78db",
      "canonical_tool_input_schema_hash": "78c4d7d16726edd0188b10383493975a57bbecee50c590fa649cebb68a34977b"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "migrationId": {
              "type": "string"
            }
          },
          "required": ["migrationId"],
          "additionalProperties": false
        }
      },
      "required": ["params"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "NEON__DESCRIBE_BRANCH",
    "description": "Get a tree view of all objects in a branch, including databases, schemas, tables, views, and functions",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "describe_branch",
      "canonical_tool_description_hash": "b75a9ae954467ccf9e2dc8dfe9932156a1d01e095347dcc9eb2b9ed242e41805",
      "canonical_tool_input_schema_hash": "423e3c9cc350fbd16ee27d71a7f86fb4ef90e4f040b27d8f137095cf5dce79bb"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "projectId": {
              "type": "string",
              "description": "The ID of the project"
            },
            "branchId": {
              "type": "string",
              "description": "An ID of the branch to describe"
            },
            "databaseName": {
              "type": "string",
              "description": "The name of the database. If not provided, the default neondb or first available database is used."
            }
          },
          "required": ["projectId", "branchId"],
          "additionalProperties": false
        }
      },
      "required": ["params"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "NEON__DELETE_BRANCH",
    "description": "Delete a branch from a Neon project",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "delete_branch",
      "canonical_tool_description_hash": "05a36e8b73b071e1f6c4b5e0685d0172b41ad48798492361327c71f0eddc4085",
      "canonical_tool_input_schema_hash": "799b4fa97b5512689f3acb243dff3ead4219efe96e4f30690ebed6ba3035bc25"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "projectId": {
              "type": "string",
              "description": "The ID of the project containing the branch"
            },
            "branchId": {
              "type": "string",
              "description": "The ID of the branch to delete"
            }
          },
          "required": ["projectId", "branchId"],
          "additionalProperties": false
        }
      },
      "required": ["params"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "NEON__RESET_FROM_PARENT",
    "description": "Resets a branch to match its parent's current state, effectively discarding all changes made on the branch. To avoid data loss, provide a name to preserve the changes in a new branch using `preserveUnderName` parameter. This tool is commonly used to create fresh development branches from updated parent branch, undo experimental changes, or restore a branch to a known good state. Warning: This operation will discard all changes if `preserveUnderName` is not provided.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "reset_from_parent",
      "canonical_tool_description_hash": "4eb6b4ce3fc40c53250fa56af40f6dabd8445871a5501df23e5cb0d9944f2064",
      "canonical_tool_input_schema_hash": "724333cd14d7b1e543a988a9ebbb7d4f4f8d43bbd8564b1d3b934f3524fea6bb"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "projectId": {
              "type": "string",
              "description": "The ID of the project containing the branch"
            },
            "branchIdOrName": {
              "type": "string",
              "description": "The name or ID of the branch to reset from its parent"
            },
            "preserveUnderName": {
              "type": "string",
              "description": "Optional name to preserve the current state under a new branch before resetting"
            }
          },
          "required": ["projectId", "branchIdOrName"],
          "additionalProperties": false
        }
      },
      "required": ["params"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "NEON__GET_CONNECTION_STRING",
    "description": "Get a PostgreSQL connection string for a Neon database with all parameters being optional",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get_connection_string",
      "canonical_tool_description_hash": "a210c687081a378bb039390e62a71ecac93d66cb40f373cf718ddbf2bef4dce0",
      "canonical_tool_input_schema_hash": "e9711258e070a51a5cfeecd7b9d5faf95ac6f5caebd6555f500a73dad598aa68"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "projectId": {
              "type": "string",
              "description": "The ID of the project. If not provided, the only available project will be used."
            },
            "branchId": {
              "type": "string",
              "description": "The ID or name of the branch. If not provided, the default branch will be used."
            },
            "computeId": {
              "type": "string",
              "description": "The ID of the compute/endpoint. If not provided, the read-write compute associated with the branch will be used."
            },
            "databaseName": {
              "type": "string",
              "description": "The name of the database. If not provided, the default neondb or first available database is used."
            },
            "roleName": {
              "type": "string",
              "description": "The name of the role to connect with. If not provided, the database owner name will be used."
            }
          },
          "required": ["projectId"],
          "additionalProperties": false
        }
      },
      "required": ["params"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "NEON__PROVISION_NEON_AUTH",
    "description": "\n    This tool provisions authentication for a Neon project. It allows developers to easily setup authentication infrastructure by creating a integration with Stack Auth (`@stackframe/stack`). Stop using NextAuth.js! use `@stackframe/stack`.\n\n    Parameters:\n    - `<project_id>`: The Project ID of the Neon project to provision authentication for.\n    - `[database]`: The database name to setup Neon Auth for. If not provided, the default `neondb` or first available database is used.\n    \n    <workflow>\n      The tool will:\n        1. Establish a connection between your Neon Auth project and Stack Auth\n        2. Creates a dedicated authentication schema in your database (`neon_auth`)\n        3. Sets up the user table under the `neon_auth` schema. This table is synced with Stack Auth. It does not store user credentials or secrets.\n        4. Generates Client Key and Secret Key to connect your application with authentication provider.\n       \n      Use the Stack Auth SDK (`@stackframe/stack`) on the frontend to connect your application with authentication provider. DO NOT use NextAuth.js! DO NOT use better-auth! Here's some documentation on Stack Auth:\n    </workflow>\n    \n    <use_case>\n      Stack Auth Guidelines\n    \n      <instructions>\n        If you're building an app with Next.js, to set up Neon Auth and Stack Auth, follow these steps:\n        1. Provision a Neon Auth project with this tool\n        2. Place the returned credentials in project's `.env.local` or `.env` file\n          - `NEXT_PUBLIC_STACK_PROJECT_ID`\n          - `NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY`\n          - `STACK_SECRET_SERVER_KEY`\n        3. To setup Stack Auth, run following command: \n          ```shell\n          npx @stackframe/init-stack . --no-browser \n          ```\n          This command will automaticallysetup the project with - \n          - It will add `@stackframe/stack` dependency to `package.json`\n          - It will create a `stack.ts` file in your project to setup `StackServerApp`. \n          - It will wrap the root layout with `StackProvider` and `StackTheme`\n          - It will create root Suspense boundary `app/loading.tsx` to handle loading state while Stack is fetching user data.\n          - It will also create `app/handler/[...stack]/page.tsx` file to handle auth routes like sign in, sign up, forgot password, etc.\n        4. Do not try to manually create any of these files or directories. Do not try to create SignIn, SignUp, or UserButton components manually, instead use the ones provided by `@stackframe/stack`.\n      </instructions>\n      \n      <instructions>\n        Components Guidelines\n        - Use pre-built components from `@stackframe/stack` like `<UserButton />`, `<SignIn />`, and `<SignUp />` to quickly set up auth UI.\n        - You can also compose smaller pieces like `<OAuthButtonGroup />`, `<MagicLinkSignIn />`, and `<CredentialSignIn />` for custom flows.\n        <example>\n          ```tsx\n          import { SignIn } from '@stackframe/stack';\n          export default function Page() {\n            return <SignIn />;\n          }\n          ```\n        </example>\n      </instructions>\n      \n      <instructions>\n        User Management Guidelines\n        - In Client Components, use the `useUser()` hook to retrieve the current user (it returns `null` when not signed in).\n        - Update user details using `user.update({...})` and sign out via `user.signOut()`.\n        - For pages that require a user, call `useUser({ or: \"redirect\" })` so unauthorized visitors are automatically redirected.\n      </instructions>\n    \n      <instructions>\n        Client Component Guidelines\n        - Client Components rely on hooks like `useUser()` and `useStackApp()`.\n        \n        <example>\n          ```tsx\n          \"use client\";\n          import { useUser } from \"@stackframe/stack\";\n          export function MyComponent() {\n            const user = useUser();\n            return <div>{user ? `Hello, ${user.displayName}` : \"Not logged in\"}</div>;\n          }\n          ```\n        </example>\n      </instructions>\n      \n      <instructions>\n        Server Component Guidelines\n        - For Server Components, use `stackServerApp.getUser()` from your `stack.ts` file.\n      \n        <example>\n          ```tsx\n          import { stackServerApp } from \"@/stack\";\n          export default async function ServerComponent() {\n            const user = await stackServerApp.getUser();\n            return <div>{user ? `Hello, ${user.displayName}` : \"Not logged in\"}</div>;\n          }\n          ```\n        </example>\n      </instructions>\n    \n      <instructions>\n        Page Protection Guidelines\n      - Protect pages by:\n        - Using `useUser({ or: \"redirect\" })` in Client Components.\n        - Using `await stackServerApp.getUser({ or: \"redirect\" })` in Server Components.\n        - Implementing middleware that checks for a user and redirects to `/handler/sign-in` if not found.\n\n        <example>\n          Example middleware:\n          ```tsx\n          export async function middleware(request: NextRequest) {\n            const user = await stackServerApp.getUser();\n            if (!user) {\n              return NextResponse.redirect(new URL('/handler/sign-in', request.url));\n            }\n            return NextResponse.next();\n          }\n          export const config = { matcher: '/protected/:path*' };\n          ```\n        </example>\n      </instructions>\n      \n      <workflow>\n        Example: custom-profile-page\n        <instructions>\n          Create a custom profile page that:\n          - Displays the user's avatar, display name, and email.\n          - Provides options to sign out.\n          - Uses Stack Auth components and hooks.\n        </instructions>\n        <example>\n          File: `app/profile/page.tsx`\n          ```tsx\n          'use client';\n          import { useUser, useStackApp, UserButton } from '@stackframe/stack';\n          export default function ProfilePage() {\n            const user = useUser({ or: \"redirect\" });\n            const app = useStackApp();\n            return (\n              <div>\n                <UserButton />\n                <h1>Welcome, {user.displayName || \"User\"}</h1>\n                <p>Email: {user.primaryEmail}</p>\n                <button onClick={() => user.signOut()}>Sign Out</button>\n              </div>\n            );\n          }\n          ```\n        </example>\n      </workflow>\n    </use_case>\n    ",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "provision_neon_auth",
      "canonical_tool_description_hash": "828cf405b3e7b5f4cc51a6b1a306d11d65316ee1b280a191005d656d694ab211",
      "canonical_tool_input_schema_hash": "7412b22b287e0378cb9b84e54d27fd9b0ccbb5cc3af1b747bd79abccdc3bca18"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "projectId": {
              "type": "string",
              "description": "The ID of the project to provision Neon Auth for"
            },
            "database": {
              "type": "string",
              "description": "The name of the database. If not provided, the default neondb or first available database is used."
            }
          },
          "required": ["projectId"],
          "additionalProperties": false
        }
      },
      "required": ["params"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "NEON__EXPLAIN_SQL_STATEMENT",
    "description": "Describe the PostgreSQL query execution plan for a query of SQL statement by running EXPLAIN (ANAYLZE...) in the database",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "explain_sql_statement",
      "canonical_tool_description_hash": "54fe8fce598de7a2b1d9541ea3893cd7775f470993dd90e998457d1741e9e42c",
      "canonical_tool_input_schema_hash": "afb66aa9d808c69757005dea5abf1cb6ab9f6219cd89e5f5e243d64dd5a22624"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "sql": {
              "type": "string",
              "description": "The SQL statement to analyze"
            },
            "projectId": {
              "type": "string",
              "description": "The ID of the project to execute the query against"
            },
            "branchId": {
              "type": "string",
              "description": "An optional ID of the branch to execute the query against. If not provided the default branch is used."
            },
            "databaseName": {
              "type": "string",
              "description": "The name of the database. If not provided, the default neondb or first available database is used."
            },
            "analyze": {
              "type": "boolean",
              "default": true,
              "description": "Whether to include ANALYZE in the EXPLAIN command"
            }
          },
          "required": ["sql", "projectId"],
          "additionalProperties": false
        }
      },
      "required": ["params"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "NEON__PREPARE_QUERY_TUNING",
    "description": "\n  <use_case>\n    This tool helps developers improve PostgreSQL query performance for slow queries or DML statements by analyzing execution plans and suggesting optimizations.\n    \n    The tool will:\n    1. Create a temporary branch for testing optimizations and remember the branch ID\n    2. Extract and analyze the current query execution plan\n    3. Extract all fully qualified table names (`schema.table`) referenced in the plan \n    4. Gather detailed schema information for each referenced table using `describe_table_schema`\n    5. Suggest and implement improvements like:\n      - Adding or modifying indexes based on table schemas and query patterns\n      - Query structure modifications\n      - Identifying potential performance bottlenecks\n    6. Apply the changes to the temporary branch using `run_sql`\n    7. Compare performance before and after changes (but ONLY on the temporary branch passing branch ID to all tools)\n    8. Continue with next steps using `complete_query_tuning` tool (on `main` branch)\n    \n    Project ID and database name will be automatically extracted from your request.\n    The temporary branch ID will be added when invoking other tools.\n    Default database is `neondb` if not specified.\n\n    <important_notes>\n      This tool is part of the query tuning workflow. Any suggested changes (like creating indexes) must first be applied to the temporary branch using the `run_sql` tool.\n      And then to the main branch using the `complete_query_tuning` tool, NOT the `prepare_database_migration` tool. \n      To apply using the `complete_query_tuning` tool, you must pass the `tuning_id`, NOT the temporary branch ID to it.\n    </important_notes>\n  </use_case>\n\n  <workflow>\n    1. Creates a temporary branch\n    2. Analyzes current query performance and extracts table information\n    3. Implements and tests improvements (using tool `run_sql` for schema modifications and `explain_sql_statement` for performance analysis, but ONLY on the temporary branch created in step 1 passing the same branch ID to all tools)\n    4. Returns tuning details for verification\n  </workflow>\n\n  <important_notes>\n    After executing this tool, you MUST:\n    1. Review the suggested changes\n    2. Verify the performance improvements on temporary branch - by applying the changes with `run_sql` and running `explain_sql_statement` again)\n    3. Decide whether to keep or discard the changes\n    4. Use `complete_query_tuning` tool to apply or discard changes to the main branch\n    \n    DO NOT use `prepare_database_migration` tool for applying query tuning changes.\n    Always use `complete_query_tuning` to ensure changes are properly tracked and applied.\n\n    Note: \n    - Some operations like creating indexes can take significant time on large tables\n    - Table statistics updates (ANALYZE) are NOT automatically performed as they can be long-running\n    - Table statistics maintenance should be handled by PostgreSQL auto-analyze or scheduled maintenance jobs\n    - If statistics are suspected to be stale, suggest running ANALYZE as a separate maintenance task\n  </important_notes>\n\n  <example>\n    For a query like:\n    ```sql\n    SELECT o.*, c.name \n    FROM orders o \n    JOIN customers c ON c.id = o.customer_id \n    WHERE o.status = 'pending' \n    AND o.created_at > '2024-01-01';\n    ```\n    \n    The tool will:\n    1. Extract referenced tables: `public.orders`, `public.customers`\n    2. Gather schema information for both tables\n    3. Analyze the execution plan\n    4. Suggest improvements like:\n       - Creating a composite index on orders(status, created_at)\n       - Optimizing the join conditions\n    5. If confirmed, apply the suggested changes to the temporary branch using `run_sql`\n    6. Compare execution plans and performance before and after changes (but ONLY on the temporary branch passing branch ID to all tools)\n  </example>\n\n  <next_steps>\n  After executing this tool, you MUST follow these steps:\n    1. Review the execution plans and suggested changes\n    2. Follow these instructions to respond to the client: \n\n      <response_instructions>\n        <instructions>\n          Provide a brief summary of the performance analysis and ask for approval to apply changes on the temporary branch.\n\n          You MUST include ALL of the following fields in your response:\n          - Tuning ID (this is required for completion)\n          - Temporary Branch Name\n          - Temporary Branch ID\n          - Original Query Cost\n          - Improved Query Cost\n          - Referenced Tables (list all tables found in the plan)\n          - Suggested Changes\n\n          Even if some fields are missing from the tool's response, use placeholders like \"not provided\" rather than omitting fields.\n        </instructions>\n\n        <do_not_include>\n          IMPORTANT: Your response MUST NOT contain ANY technical implementation details such as:\n          - Exact index definitions\n          - Internal PostgreSQL settings\n          - Complex query rewrites\n          - Table partitioning details\n          \n          Keep the response focused on high-level changes and performance metrics.\n        </do_not_include>\n\n        <example>\n          I've analyzed your query and found potential improvements that could reduce execution time by [X]%.\n          Would you like to apply these changes to improve performance?\n          \n          Analysis Details:\n          - Tuning ID: [id]\n          - Temporary Branch: [name]\n          - Branch ID: [id]\n          - Original Cost: [cost]\n          - Improved Cost: [cost]\n          - Referenced Tables:\n            * public.orders\n            * public.customers\n          - Suggested Changes:\n            * Add index for frequently filtered columns\n            * Optimize join conditions\n\n          To apply these changes, I will use the `complete_query_tuning` tool after your approval and pass the `tuning_id`, NOT the temporary branch ID to it.\n        </example>\n      </response_instructions>\n\n    3. If approved, use ONLY the `complete_query_tuning` tool with the `tuning_id`\n  </next_steps>\n\n  <error_handling>\n    On error, the tool will:\n    1. Automatically attempt ONE retry of the exact same operation\n    2. If the retry fails:\n      - Terminate execution\n      - Return error details\n      - Clean up temporary branch\n      - DO NOT attempt any other tools or alternatives\n    \n    Error response will include:\n    - Original error details\n    - Confirmation that retry was attempted\n    - Final error state\n    \n    Important: After a failed retry, you must terminate the current flow completely.\n  </error_handling>\n    ",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "prepare_query_tuning",
      "canonical_tool_description_hash": "b454d2747d60a7aa8cfbdd58045cb519bfe981e7724f93998e784247ebf346ee",
      "canonical_tool_input_schema_hash": "7ee2ce7cf725902b1d89e7c5562514938eb829e14db08b7247ec09b13edcc023"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "sql": {
              "type": "string",
              "description": "The SQL statement to analyze and tune"
            },
            "databaseName": {
              "type": "string",
              "description": "The name of the database to execute the query against"
            },
            "projectId": {
              "type": "string",
              "description": "The ID of the project to execute the query against"
            },
            "roleName": {
              "type": "string",
              "description": "The name of the role to connect with. If not provided, the default role (usually \"neondb_owner\") will be used."
            }
          },
          "required": ["sql", "databaseName", "projectId"],
          "additionalProperties": false
        }
      },
      "required": ["params"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "NEON__COMPLETE_QUERY_TUNING",
    "description": "Complete a query tuning session by either applying the changes to the main branch or discarding them. \n    <important_notes>\n        BEFORE RUNNING THIS TOOL: test out the changes in the temporary branch first by running \n        - `run_sql` with the suggested DDL statements.\n        - `explain_sql_statement` with the original query and the temporary branch.\n        This tool is the ONLY way to finally apply changes after the `prepare_query_tuning` tool to the main branch.\n        You MUST NOT use `prepare_database_migration` or other tools to apply query tuning changes.\n        You MUST pass the `tuning_id` obtained from the `prepare_query_tuning` tool, NOT the temporary branch ID as `tuning_id` to this tool.\n        You MUST pass the temporary branch ID used in the `prepare_query_tuning` tool as TEMPORARY branchId to this tool.\n        The tool OPTIONALLY receives a second branch ID or name which can be used instead of the main branch to apply the changes.\n        This tool MUST be called after tool `prepare_query_tuning` even when the user rejects the changes, to ensure proper cleanup of temporary branches.\n    </important_notes>    \n\n    This tool:\n    1. Applies suggested changes (like creating indexes) to the main branch (or specified branch) if approved\n    2. Handles cleanup of temporary branch\n    3. Must be called even when changes are rejected to ensure proper cleanup\n\n    Workflow:\n    1. After `prepare_query_tuning` suggests changes\n    2. User reviews and approves/rejects changes\n    3. This tool is called to either:\n      - Apply approved changes to main branch and cleanup\n      - OR just cleanup if changes are rejected\n    ",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "complete_query_tuning",
      "canonical_tool_description_hash": "1c68ef5c778a048941a5118fc0115bd8b1f2d1a4a570c49d8bd4d782ab00a309",
      "canonical_tool_input_schema_hash": "c63c1b57859072bbf88dacdf7bf96358c58d9b5ed1fbf51535399193c24f3a3b"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "suggestedSqlStatements": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The SQL DDL statements to execute to improve performance. These statements are the result of the prior steps, for example creating additional indexes."
            },
            "applyChanges": {
              "type": "boolean",
              "default": false,
              "description": "Whether to apply the suggested changes to the main branch"
            },
            "tuningId": {
              "type": "string",
              "description": "The ID of the tuning to complete. This is NOT the branch ID. Remember this ID from the prior step using tool prepare_query_tuning."
            },
            "databaseName": {
              "type": "string",
              "description": "The name of the database to execute the query against"
            },
            "projectId": {
              "type": "string",
              "description": "The ID of the project to execute the query against"
            },
            "roleName": {
              "type": "string",
              "description": "The name of the role to connect with. If you have used a specific role in prepare_query_tuning you MUST pass the same role again to this tool. If not provided, the default role (usually \"neondb_owner\") will be used."
            },
            "shouldDeleteTemporaryBranch": {
              "type": "boolean",
              "default": true,
              "description": "Whether to delete the temporary branch after tuning"
            },
            "temporaryBranchId": {
              "type": "string",
              "description": "The ID of the temporary branch that needs to be deleted after tuning."
            },
            "branchId": {
              "type": "string",
              "description": "The ID or name of the branch that receives the changes. If not provided, the default (main) branch will be used."
            }
          },
          "required": [
            "suggestedSqlStatements",
            "tuningId",
            "databaseName",
            "projectId",
            "temporaryBranchId"
          ],
          "additionalProperties": false
        }
      },
      "required": ["params"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "NEON__LIST_SLOW_QUERIES",
    "description": "\n    <use_case>\n      Use this tool to list slow queries from your Neon database.\n    </use_case>\n\n    <important_notes>\n      This tool queries the pg_stat_statements extension to find queries that are taking longer than expected.\n      The tool will return queries sorted by execution time, with the slowest queries first.\n    </important_notes>",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "list_slow_queries",
      "canonical_tool_description_hash": "7ab3ee2b34d107beeb0752d0de6bc059a44a89ff38f3d37db0edf536078f6ec9",
      "canonical_tool_input_schema_hash": "0eb6bb639ee61fef6289c32dff5d049da2160ed8a3548bc7ff537af9ea2d7c43"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "projectId": {
              "type": "string",
              "description": "The ID of the project to list slow queries from"
            },
            "branchId": {
              "type": "string",
              "description": "An optional ID of the branch. If not provided the default branch is used."
            },
            "databaseName": {
              "type": "string",
              "description": "The name of the database. If not provided, the default neondb or first available database is used."
            },
            "computeId": {
              "type": "string",
              "description": "The ID of the compute/endpoint. If not provided, the read-write compute associated with the branch will be used."
            },
            "limit": {
              "type": "number",
              "default": 10,
              "description": "Maximum number of slow queries to return"
            },
            "minExecutionTime": {
              "type": "number",
              "default": 1000,
              "description": "Minimum execution time in milliseconds to consider a query as slow"
            }
          },
          "required": ["projectId"],
          "additionalProperties": false
        }
      },
      "required": ["params"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "NEON__LIST_BRANCH_COMPUTES",
    "description": "Lists compute endpoints for a project or specific branch",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "list_branch_computes",
      "canonical_tool_description_hash": "07a1579d16bef3b327e6044e3bdcedf5d34194854603945998700a3cb873a063",
      "canonical_tool_input_schema_hash": "de8402f69700aa5c0cf3b45c2442530b937aa41803ef87395079d9121b135c5b"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "params": {
          "type": "object",
          "properties": {
            "projectId": {
              "type": "string",
              "description": "The ID of the project. If not provided, the only available project will be used."
            },
            "branchId": {
              "type": "string",
              "description": "The ID of the branch. If provided, endpoints for this specific branch will be listed."
            }
          },
          "additionalProperties": false
        }
      },
      "required": ["params"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  }
]
