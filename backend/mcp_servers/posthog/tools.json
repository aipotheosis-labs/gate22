[
  {
    "name": "POSTHOG__ADD_INSIGHT_TO_DASHBOARD",
    "description": "Add an existing insight to a dashboard. Requires insight ID and dashboard ID. Optionally supports layout and color customization.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "add-insight-to-dashboard",
      "canonical_tool_description_hash": "85c18a58fa06bff4634555e0da0cab67bea0cf57953d5e20a43daba5f2ed95c5",
      "canonical_tool_input_schema_hash": "1d8fb225382b933b71ae7678b3b1cd7153f2109daaff1ccff21fb03303f3bf86"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "insightId": {
              "type": "string"
            },
            "dashboardId": {
              "type": "integer",
              "exclusiveMinimum": 0
            }
          },
          "required": ["insightId", "dashboardId"],
          "additionalProperties": false
        }
      },
      "required": ["data"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__DASHBOARD_CREATE",
    "description": "Create a new dashboard in the project. Requires name and optional description, tags, and other properties.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "dashboard-create",
      "canonical_tool_description_hash": "5635cac9045e057d5332048ee7311e5f5e562b416bf6b3171aa5a91d86ab477c",
      "canonical_tool_input_schema_hash": "c3810f3a040deda00cb1dac724ddfb1cef2aca7ae59bf58ab48ce3e12b6df387"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1
            },
            "description": {
              "type": "string"
            },
            "pinned": {
              "type": "boolean"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": ["name"],
          "additionalProperties": false
        }
      },
      "required": ["data"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__DASHBOARD_DELETE",
    "description": "Delete a dashboard by ID (soft delete - marks as deleted).",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "dashboard-delete",
      "canonical_tool_description_hash": "44abad3869a343b66982bcfc7a07dd4872827a4cb7c92b1b93a8e153ca517472",
      "canonical_tool_input_schema_hash": "28ca160b9429baa57ad978ae4689caeb2c0bc506a880eba81d7a6fc138766ade"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "dashboardId": {
          "type": "number"
        }
      },
      "required": ["dashboardId"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__DASHBOARD_GET",
    "description": "Get a specific dashboard by ID. The response will include insights / tiles that are on the dashboard.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "dashboard-get",
      "canonical_tool_description_hash": "7d8a67494d427972ce901dcb617d0f5b975e9d74a59b43380c77b3a2a19aa515",
      "canonical_tool_input_schema_hash": "28ca160b9429baa57ad978ae4689caeb2c0bc506a880eba81d7a6fc138766ade"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "dashboardId": {
          "type": "number"
        }
      },
      "required": ["dashboardId"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__DASHBOARDS_GET_ALL",
    "description": "Get all dashboards in the project with optional filtering. Can filter by pinned status, search term, or pagination.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "dashboards-get-all",
      "canonical_tool_description_hash": "9a2881e5ce2e2387d818446a3208a8ad0500ab652a802471af8d625758030bbf",
      "canonical_tool_input_schema_hash": "6c787801ed554f5254067ba0752bc11d7e32a39246ca1e4c83c65562960e9aea"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "limit": {
              "type": "integer",
              "exclusiveMinimum": 0
            },
            "offset": {
              "type": "integer",
              "minimum": 0
            },
            "search": {
              "type": "string"
            },
            "pinned": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__DASHBOARD_UPDATE",
    "description": "Update an existing dashboard by ID. Can update name, description, pinned status or tags.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "dashboard-update",
      "canonical_tool_description_hash": "e9413ef6d60a5d80879dd18cc49e80bdbc647cd9742a806ab275a9cddaf9417d",
      "canonical_tool_input_schema_hash": "c91cd2e892daa542c74902508a7431d2dc4366b96b4887fb8ca6dccacb72b644"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "dashboardId": {
          "type": "number"
        },
        "data": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "pinned": {
              "type": "boolean"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "required": ["dashboardId", "data"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__DOCS_SEARCH",
    "description": "Use this tool to search the PostHog documentation for information that can help the user with their request. Use it as a fallback when you cannot answer the user's request using other tools in this MCP. Only use this tool for PostHog related questions.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "docs-search",
      "canonical_tool_description_hash": "6827767b55e7247480a5c678d87703658cd1f0879628ee660905c5b2c6436a9e",
      "canonical_tool_input_schema_hash": "b592ecc51795b1d159f83deda3c946e49f0cd672f708c4e04a0ba355c309b5b5"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string"
        }
      },
      "required": ["query"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__ERROR_DETAILS",
    "description": "Use this tool to get the details of an error in the project.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "error-details",
      "canonical_tool_description_hash": "abd1af1aeadba536581615caeea5175c01e7a8142f78ec474d206c9f247c2f96",
      "canonical_tool_input_schema_hash": "636c581b4ede4e6e888ce7c2212c0bb02a1ed0e3dcb36af2ee2f5e1477451f02"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "issueId": {
          "type": "string",
          "format": "uuid"
        },
        "dateFrom": {
          "type": "string",
          "format": "date-time"
        },
        "dateTo": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": ["issueId"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__LIST_ERRORS",
    "description": "Use this tool to list errors in the project.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "list-errors",
      "canonical_tool_description_hash": "b2efc1cd3e6d032e8b6e2dc57b371faf2a3d3c1cbc012beccd84a065d8f87c57",
      "canonical_tool_input_schema_hash": "161138cbf9517fd9cefc0be7d0fa6e8019c02645847e171f39dd006a463a35bf"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "orderBy": {
          "type": "string",
          "enum": ["occurrences", "first_seen", "last_seen", "users", "sessions"]
        },
        "dateFrom": {
          "type": "string",
          "format": "date-time"
        },
        "dateTo": {
          "type": "string",
          "format": "date-time"
        },
        "orderDirection": {
          "type": "string",
          "enum": ["ASC", "DESC"]
        },
        "filterTestAccounts": {
          "type": "boolean"
        },
        "status": {
          "type": "string",
          "enum": ["active", "resolved", "all", "suppressed"]
        }
      },
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__CREATE_FEATURE_FLAG",
    "description": "Creates a new feature flag in the project. Once you have created a feature flag, you should: Ask the user if they want to add it to their codebase, Use the \"search-docs\" tool to find documentation on how to add feature flags to the codebase (search for the right language / framework), Clarify where it should be added and then add it.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "create-feature-flag",
      "canonical_tool_description_hash": "6b67236809ed27ffe0baca21c5563ed04df09f8136330d1e1b10dcecd62106bd",
      "canonical_tool_input_schema_hash": "166ece484b521d765077bd93baa5068dd0c5be851517e629d373c99c486d4f6a"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "filters": {
          "type": "object",
          "properties": {
            "groups": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "properties": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "value": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            },
                            {
                              "type": "boolean"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            }
                          ]
                        },
                        "operator": {
                          "type": "string",
                          "enum": [
                            "exact",
                            "is_not",
                            "is_set",
                            "is_not_set",
                            "icontains",
                            "not_icontains",
                            "regex",
                            "not_regex",
                            "is_cleaned_path_exact",
                            "exact",
                            "is_not",
                            "is_set",
                            "is_not_set",
                            "gt",
                            "gte",
                            "lt",
                            "lte",
                            "min",
                            "max",
                            "exact",
                            "is_not",
                            "is_set",
                            "is_not_set",
                            "in",
                            "not_in"
                          ]
                        }
                      },
                      "required": ["key", "value"],
                      "additionalProperties": false
                    }
                  },
                  "rollout_percentage": {
                    "type": "number"
                  }
                },
                "required": ["properties", "rollout_percentage"],
                "additionalProperties": false
              }
            }
          },
          "required": ["groups"],
          "additionalProperties": false
        },
        "active": {
          "type": "boolean"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["name", "key", "description", "filters", "active"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__DELETE_FEATURE_FLAG",
    "description": "Delete a feature flag in the project.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "delete-feature-flag",
      "canonical_tool_description_hash": "a6869bda27d0084cbe7ef26828790371ffc91a360127bd1a58fa4d59597f1f5e",
      "canonical_tool_input_schema_hash": "0e91661f83862c5733096071aca695f1bc14c891daa03b287f9bc42bf12cd057"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "flagKey": {
          "type": "string"
        }
      },
      "required": ["flagKey"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__FEATURE_FLAG_GET_ALL",
    "description": "Get all feature flags in the project.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "feature-flag-get-all",
      "canonical_tool_description_hash": "002f3b512295cbd8100b3836d5ac8092ee983f99da950f39391f84897978dffc",
      "canonical_tool_input_schema_hash": "f973399805c1c233633f5196cf8e2ad40ee100b94996d711dcd030813b671bc5"
    },
    "input_schema": {
      "type": "object",
      "properties": {},
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__FEATURE_FLAG_GET_DEFINITION",
    "description": "Get the definition of a feature flag. You can provide either the flagId or the flagKey. If you provide both, the flagId will be used.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "feature-flag-get-definition",
      "canonical_tool_description_hash": "ddfbe16c7c46b7ca9d3a40744f77160cc5db2292262d91b8aeb3e52483c0e654",
      "canonical_tool_input_schema_hash": "56e31acea9219c5422bd14754c43a5e5aba9e4df1cfe7eeaf81b9898dd2fec4e"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "flagId": {
          "type": "integer",
          "exclusiveMinimum": 0
        },
        "flagKey": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__UPDATE_FEATURE_FLAG",
    "description": "Update a new feature flag in the project. To enable a feature flag, you should make sure it is active and the rollout percentage is set to 100 for the group you want to target. To disable a feature flag, you should make sure it is inactive, you can keep the rollout percentage as it is.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "update-feature-flag",
      "canonical_tool_description_hash": "f36ebf8cdd062b15b98786ebabf90f07240f384fc3fdb2b669cd839c45ac7b23",
      "canonical_tool_input_schema_hash": "1dd39bf2d1d8b221b2f965c37bf3d29ba4abfe37b381d4fa205f9041aab19d54"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "flagKey": {
          "type": "string"
        },
        "data": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "filters": {
              "type": "object",
              "properties": {
                "groups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "properties": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string"
                            },
                            "value": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "number"
                                },
                                {
                                  "type": "boolean"
                                },
                                {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                {
                                  "type": "array",
                                  "items": {
                                    "type": "number"
                                  }
                                }
                              ]
                            },
                            "operator": {
                              "type": "string",
                              "enum": [
                                "exact",
                                "is_not",
                                "is_set",
                                "is_not_set",
                                "icontains",
                                "not_icontains",
                                "regex",
                                "not_regex",
                                "is_cleaned_path_exact",
                                "exact",
                                "is_not",
                                "is_set",
                                "is_not_set",
                                "gt",
                                "gte",
                                "lt",
                                "lte",
                                "min",
                                "max",
                                "exact",
                                "is_not",
                                "is_set",
                                "is_not_set",
                                "in",
                                "not_in"
                              ]
                            }
                          },
                          "required": ["key", "value"],
                          "additionalProperties": false
                        }
                      },
                      "rollout_percentage": {
                        "type": "number"
                      }
                    },
                    "required": ["properties", "rollout_percentage"],
                    "additionalProperties": false
                  }
                }
              },
              "required": ["groups"],
              "additionalProperties": false
            },
            "active": {
              "type": "boolean"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "required": ["flagKey", "data"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__EXPERIMENT_GET_ALL",
    "description": "Get all experiments in the project.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "experiment-get-all",
      "canonical_tool_description_hash": "aefd2b25eec58da37e4788e4692c1143cb671245f76d04ba81750aebf7c015f8",
      "canonical_tool_input_schema_hash": "f973399805c1c233633f5196cf8e2ad40ee100b94996d711dcd030813b671bc5"
    },
    "input_schema": {
      "type": "object",
      "properties": {},
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__EXPERIMENT_CREATE",
    "description": "Create a comprehensive A/B test experiment. PROCESS: 1) Understand experiment goal and hypothesis 2) Search existing feature flags with 'feature-flags-get-all' tool first and suggest reuse or new key 3) Help user define success metrics by asking what they want to optimize 4) MOST IMPORTANT: Use 'event-definitions-list' tool to find available events in their project 5) For funnel metrics, ask for specific event sequence (e.g., ['product_view', 'add_to_cart', 'purchase']) and use funnel_steps parameter 6) Configure variants (default 50/50 control/test unless they specify otherwise) 7) Set targeting criteria if needed.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "experiment-create",
      "canonical_tool_description_hash": "a8ce2923d07142f59cdce305b6ed8c415795dd937baccd8d8669d48615bde8e9",
      "canonical_tool_input_schema_hash": "8dfdb832c1f9b7ec2e9b45be4ecf56d81ce6ff1b8653a60b21053c840dbe6205"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1,
          "description": "Experiment name - should clearly describe what is being tested"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the experiment hypothesis, what changes are being tested, and expected outcomes"
        },
        "feature_flag_key": {
          "type": "string",
          "description": "Feature flag key (letters, numbers, hyphens, underscores only). IMPORTANT: First search for existing feature flags that might be suitable using the feature-flags-get-all tool, then suggest reusing existing ones or creating a new key based on the experiment name"
        },
        "type": {
          "type": "string",
          "enum": ["product", "web"],
          "default": "product",
          "description": "Experiment type: 'product' for backend/API changes, 'web' for frontend UI changes"
        },
        "primary_metrics": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Human-readable metric name"
              },
              "metric_type": {
                "type": "string",
                "enum": ["mean", "funnel", "ratio"],
                "description": "Metric type: 'mean' for average values (revenue, time spent), 'funnel' for conversion flows, 'ratio' for comparing two metrics"
              },
              "event_name": {
                "type": "string",
                "description": "REQUIRED for metrics to work: PostHog event name (e.g., '$pageview', 'add_to_cart', 'purchase'). For funnels, this is the first step. Use '$pageview' if unsure. Search project-property-definitions tool for available events."
              },
              "funnel_steps": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "For funnel metrics only: Array of event names for each funnel step (e.g., ['product_view', 'add_to_cart', 'checkout', 'purchase'])"
              },
              "properties": {
                "type": "object",
                "additionalProperties": {},
                "description": "Event properties to filter on"
              },
              "description": {
                "type": "string",
                "description": "What this metric measures and why it's important for the experiment"
              }
            },
            "required": ["metric_type", "event_name"],
            "additionalProperties": false
          },
          "description": "Primary metrics to measure experiment success. IMPORTANT: Each metric needs event_name to track data. For funnels, provide funnel_steps array with event names for each step. Ask user what events they track, or use project-property-definitions to find available events."
        },
        "secondary_metrics": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Human-readable metric name"
              },
              "metric_type": {
                "type": "string",
                "enum": ["mean", "funnel", "ratio"],
                "description": "Metric type: 'mean' for average values, 'funnel' for conversion flows, 'ratio' for comparing two metrics"
              },
              "event_name": {
                "type": "string",
                "description": "REQUIRED: PostHog event name. Use '$pageview' if unsure."
              },
              "funnel_steps": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "For funnel metrics only: Array of event names for each funnel step"
              },
              "properties": {
                "type": "object",
                "additionalProperties": {},
                "description": "Event properties to filter on"
              },
              "description": {
                "type": "string",
                "description": "What this secondary metric measures"
              }
            },
            "required": ["metric_type", "event_name"],
            "additionalProperties": false
          },
          "description": "Secondary metrics to monitor for potential side effects or additional insights. Each metric needs event_name."
        },
        "variants": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string",
                "description": "Variant key (e.g., 'control', 'variant_a', 'new_design')"
              },
              "name": {
                "type": "string",
                "description": "Human-readable variant name"
              },
              "rollout_percentage": {
                "type": "number",
                "minimum": 0,
                "maximum": 100,
                "description": "Percentage of users to show this variant"
              }
            },
            "required": ["key", "rollout_percentage"],
            "additionalProperties": false
          },
          "description": "Experiment variants. If not specified, defaults to 50/50 control/test split. Ask user how many variants they need and what each tests"
        },
        "minimum_detectable_effect": {
          "type": "number",
          "default": 30,
          "description": "Minimum detectable effect in percentage. Lower values require more users but detect smaller changes. Suggest 20-30% for most experiments"
        },
        "filter_test_accounts": {
          "type": "boolean",
          "default": true,
          "description": "Whether to filter out internal test accounts"
        },
        "target_properties": {
          "type": "object",
          "additionalProperties": {},
          "description": "Properties to target specific user segments (e.g., country, subscription type)"
        },
        "draft": {
          "type": "boolean",
          "default": true,
          "description": "Create as draft (true) or launch immediately (false). Recommend draft for review first"
        },
        "holdout_id": {
          "type": "number",
          "description": "Holdout group ID if this experiment should exclude users from other experiments"
        }
      },
      "required": ["name", "feature_flag_key"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__EXPERIMENT_DELETE",
    "description": "Delete an experiment by ID.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "experiment-delete",
      "canonical_tool_description_hash": "387be5bcaef94be875914f277124f3aaea36904e6e25c94c87ffa575cffce254",
      "canonical_tool_input_schema_hash": "6f878412d44a02f2f90549108bd367ef92b2205bc91aacfcff5618c4c4e342f7"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "experimentId": {
          "type": "number",
          "description": "The ID of the experiment to delete"
        }
      },
      "required": ["experimentId"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__EXPERIMENT_UPDATE",
    "description": "Update an existing experiment by ID. Can update name, description, lifecycle state, variants, metrics, and other properties. RESTART WORKFLOW: To restart a concluded experiment, set end_date=null, conclusion=null, conclusion_comment=null, and optionally set a new start_date. To make it draft again, also set start_date=null. COMMON PATTERNS: Launch draft (set start_date), stop running (set end_date + conclusion), archive (set archived=true), modify variants (update parameters.feature_flag_variants). NOTE: feature_flag_key cannot be changed after creation.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "experiment-update",
      "canonical_tool_description_hash": "f2debb7faba930425f69295ed2437347253cc75731c0a0e8180595ad1b4f7bd7",
      "canonical_tool_input_schema_hash": "b1c92163ff9b24b86c370ccad0765aafcd6aab710cb56c60201238d5551db526"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "experimentId": {
          "type": "number",
          "description": "The ID of the experiment to update"
        },
        "data": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Update experiment name"
            },
            "description": {
              "type": "string",
              "description": "Update experiment description"
            },
            "primary_metrics": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Human-readable metric name"
                  },
                  "metric_type": {
                    "type": "string",
                    "enum": ["mean", "funnel", "ratio"],
                    "description": "Metric type: 'mean' for average values, 'funnel' for conversion flows, 'ratio' for comparing two metrics"
                  },
                  "event_name": {
                    "type": "string",
                    "description": "PostHog event name (e.g., '$pageview', 'add_to_cart', 'purchase')"
                  },
                  "funnel_steps": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "For funnel metrics only: Array of event names for each funnel step"
                  },
                  "properties": {
                    "type": "object",
                    "additionalProperties": {},
                    "description": "Event properties to filter on"
                  },
                  "description": {
                    "type": "string",
                    "description": "What this metric measures"
                  }
                },
                "required": ["metric_type", "event_name"],
                "additionalProperties": false
              },
              "description": "Update primary metrics"
            },
            "secondary_metrics": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Human-readable metric name"
                  },
                  "metric_type": {
                    "type": "string",
                    "enum": ["mean", "funnel", "ratio"],
                    "description": "Metric type"
                  },
                  "event_name": {
                    "type": "string",
                    "description": "PostHog event name"
                  },
                  "funnel_steps": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "For funnel metrics only: Array of event names"
                  },
                  "properties": {
                    "type": "object",
                    "additionalProperties": {},
                    "description": "Event properties to filter on"
                  },
                  "description": {
                    "type": "string",
                    "description": "What this metric measures"
                  }
                },
                "required": ["metric_type", "event_name"],
                "additionalProperties": false
              },
              "description": "Update secondary metrics"
            },
            "minimum_detectable_effect": {
              "type": "number",
              "description": "Update minimum detectable effect in percentage"
            },
            "launch": {
              "type": "boolean",
              "description": "Launch experiment (set start_date) or keep as draft"
            },
            "conclude": {
              "type": "string",
              "enum": ["won", "lost", "inconclusive", "stopped_early", "invalid"],
              "description": "Conclude experiment with result"
            },
            "conclusion_comment": {
              "type": "string",
              "description": "Comment about experiment conclusion"
            },
            "restart": {
              "type": "boolean",
              "description": "Restart concluded experiment (clears end_date and conclusion)"
            },
            "archive": {
              "type": "boolean",
              "description": "Archive or unarchive experiment"
            }
          },
          "additionalProperties": false,
          "description": "The experiment data to update using user-friendly format"
        }
      },
      "required": ["experimentId", "data"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__EXPERIMENT_GET",
    "description": "Get details of a specific experiment by ID.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "experiment-get",
      "canonical_tool_description_hash": "1dbe96d1673e8e19ef35939aad2635891947bc2cd8666981b7e10165205ef1d4",
      "canonical_tool_input_schema_hash": "d9c9ce307a1ce7c8b145f2e56ce686af8f3d3ad497ec884be73285a019a36c98"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "experimentId": {
          "type": "number",
          "description": "The ID of the experiment to retrieve"
        }
      },
      "required": ["experimentId"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__EXPERIMENT_RESULTS_GET",
    "description": "Get comprehensive experiment results including all metrics data (primary and secondary) and exposure data. This tool fetches the experiment details and executes the necessary queries to get complete experiment results. Only works with new experiments (not legacy experiments).",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "experiment-results-get",
      "canonical_tool_description_hash": "29e577149988195784b90a12453b333b596630762c5284f67523f633accb1ff7",
      "canonical_tool_input_schema_hash": "a01b80f109c7286cfc8bd5cc0b318c0f29d35a1cd56ad8040a2525156026a8a6"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "experimentId": {
          "type": "number",
          "description": "The ID of the experiment to get comprehensive results for"
        },
        "refresh": {
          "type": "boolean",
          "description": "Force refresh of results instead of using cached values"
        }
      },
      "required": ["experimentId", "refresh"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__INSIGHT_CREATE_FROM_QUERY",
    "description": "Create an insight from a query that you have previously tested with 'query-run'. You should check the query runs, before creating an insight. Do not create an insight before running the query, unless you know already that it is correct (e.g. you are making a minor modification to an existing query you have seen).",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "insight-create-from-query",
      "canonical_tool_description_hash": "630ce85fe18380683b558d3b5f52c26618597f10ccaa7e46af90e4a3e1831b94",
      "canonical_tool_input_schema_hash": "6abd587a582deac406aff3dde8d473ed9c7588ce2085e974eacea562467f5c6f"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "query": {
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": ["InsightVizNode", "DataVisualizationNode"]
                },
                "source": {
                  "description": "For new insights, use the query from your successful query-run tool call. For updates, the existing query can optionally be reused."
                }
              },
              "required": ["kind"],
              "additionalProperties": false
            },
            "description": {
              "type": "string"
            },
            "favorited": {
              "type": "boolean"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": ["name", "query", "favorited"],
          "additionalProperties": false
        }
      },
      "required": ["data"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__INSIGHT_DELETE",
    "description": "Delete an insight by ID (soft delete - marks as deleted).",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "insight-delete",
      "canonical_tool_description_hash": "5972da13f2a6eca2c5eade0a00d5e066fd1ebfbbbb60d6b330a8f602d53add0c",
      "canonical_tool_input_schema_hash": "cd78806a7501ac99b8a28f429ee48c4a2ce47477a4abb0aa57d0516e867b3d76"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "insightId": {
          "type": "string"
        }
      },
      "required": ["insightId"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__INSIGHT_GET",
    "description": "Get a specific insight by ID.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "insight-get",
      "canonical_tool_description_hash": "a3512cb13288058e03faa645735cbfafdb30d500f6f569340b1bb87020c948fd",
      "canonical_tool_input_schema_hash": "cd78806a7501ac99b8a28f429ee48c4a2ce47477a4abb0aa57d0516e867b3d76"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "insightId": {
          "type": "string"
        }
      },
      "required": ["insightId"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__INSIGHT_QUERY",
    "description": "Execute a query on an existing insight to get its results/data. Provide the insight ID to retrieve the current query results.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "insight-query",
      "canonical_tool_description_hash": "6944eef3cccb4feff9aac39f975c1c6271d5928fa7c44da017b5d17d68d2991b",
      "canonical_tool_input_schema_hash": "cd78806a7501ac99b8a28f429ee48c4a2ce47477a4abb0aa57d0516e867b3d76"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "insightId": {
          "type": "string"
        }
      },
      "required": ["insightId"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__INSIGHTS_GET_ALL",
    "description": "Get all insights in the project with optional filtering. Can filter by saved status, favorited status, or search term.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "insights-get-all",
      "canonical_tool_description_hash": "d32bce32eda9b0a1c3c8d2129e47ed1d5302bfe3c340f2194a2c2bf3cd5595e3",
      "canonical_tool_input_schema_hash": "42c782e3f286823ce10b6baec99c6bd9446cc246b23e1ef869a4f1de867c47fb"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "limit": {
              "type": "number"
            },
            "offset": {
              "type": "number"
            },
            "favorited": {
              "type": "boolean"
            },
            "search": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__INSIGHT_UPDATE",
    "description": "Update an existing insight by ID. Can update name, description, filters, and other properties. You should get the insight before update it to see it's current query structure, and only modify the parts needed to answer the user's request.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "insight-update",
      "canonical_tool_description_hash": "ec0083762814d6ca4e7776dba4ebac4fef38e95745bf646145378aab7c928b3e",
      "canonical_tool_input_schema_hash": "7c765cf02f783096dbeb31d51bb18c2c3a44ed5190c1584229a2a4bf7018b2c6"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "insightId": {
          "type": "string"
        },
        "data": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "filters": {
              "type": "object",
              "additionalProperties": {}
            },
            "query": {
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": ["InsightVizNode", "DataVisualizationNode"]
                },
                "source": {
                  "description": "For new insights, use the query from your successful query-run tool call. For updates, the existing query can optionally be reused"
                }
              },
              "required": ["kind"],
              "additionalProperties": false
            },
            "favorited": {
              "type": "boolean"
            },
            "dashboard": {
              "type": "number"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": ["query"],
          "additionalProperties": false
        }
      },
      "required": ["insightId", "data"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__QUERY_RUN",
    "description": "You should use this to answer questions that a user has about their data and for when you want to create a new insight. You can use 'event-definitions-list' to get events to use in the query, and 'event-properties-list' to get properties for those events. It can run a trend, funnel or HogQL query. Where possible, use a trend or funnel rather than a HogQL query, unless you know the HogQL is correct (e.g. it came from a previous insight.).",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "query-run",
      "canonical_tool_description_hash": "c629e93d28b27b4cd9f7ada29a249d2f4cfa43df8fba352966701e96a78c1f01",
      "canonical_tool_input_schema_hash": "48bc2948dd07cb2e45606bbf013a5f7c222ab91b8a4c7544a3e641fa50b8c96a"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "query": {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "const": "InsightVizNode"
                },
                "source": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "dateRange": {
                          "type": "object",
                          "properties": {
                            "date_from": {
                              "type": ["string", "null"]
                            },
                            "date_to": {
                              "type": ["string", "null"]
                            },
                            "explicitDate": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        },
                        "filterTestAccounts": {
                          "type": "boolean",
                          "default": false
                        },
                        "properties": {
                          "anyOf": [
                            {
                              "type": "array",
                              "items": {
                                "anyOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "key": {
                                        "type": "string"
                                      },
                                      "value": {
                                        "anyOf": [
                                          {
                                            "anyOf": [
                                              {
                                                "type": "string"
                                              },
                                              {
                                                "type": "number"
                                              },
                                              {
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                }
                                              },
                                              {
                                                "type": "array",
                                                "items": {
                                                  "type": "number"
                                                }
                                              }
                                            ]
                                          },
                                          {
                                            "type": "null"
                                          }
                                        ]
                                      },
                                      "operator": {
                                        "type": "string"
                                      },
                                      "type": {
                                        "type": "string"
                                      }
                                    },
                                    "required": ["key"],
                                    "additionalProperties": false
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": ["AND", "OR"]
                                      },
                                      "values": {
                                        "type": "array",
                                        "items": {
                                          "$ref": "#/properties/query/anyOf/0/properties/source/anyOf/0/properties/properties/anyOf/0/items/anyOf/0"
                                        }
                                      }
                                    },
                                    "required": ["type", "values"],
                                    "additionalProperties": false
                                  }
                                ]
                              }
                            },
                            {
                              "$ref": "#/properties/query/anyOf/0/properties/source/anyOf/0/properties/properties/anyOf/0/items/anyOf/1"
                            }
                          ],
                          "default": []
                        },
                        "kind": {
                          "type": "string",
                          "const": "TrendsQuery"
                        },
                        "interval": {
                          "type": "string",
                          "enum": ["hour", "day", "week", "month"],
                          "default": "day"
                        },
                        "series": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "custom_name": {
                                "type": "string",
                                "description": "A display name"
                              },
                              "math": {
                                "type": "string",
                                "enum": [
                                  "total",
                                  "dau",
                                  "weekly_active",
                                  "monthly_active",
                                  "unique_session",
                                  "first_time_for_user",
                                  "first_matching_event_for_user",
                                  "avg",
                                  "sum",
                                  "min",
                                  "max",
                                  "median",
                                  "p75",
                                  "p90",
                                  "p95",
                                  "p99"
                                ]
                              },
                              "math_property": {
                                "type": "string"
                              },
                              "properties": {
                                "anyOf": [
                                  {
                                    "type": "array",
                                    "items": {
                                      "$ref": "#/properties/query/anyOf/0/properties/source/anyOf/0/properties/properties/anyOf/0/items"
                                    }
                                  },
                                  {
                                    "$ref": "#/properties/query/anyOf/0/properties/source/anyOf/0/properties/properties/anyOf/0/items/anyOf/1"
                                  }
                                ]
                              },
                              "kind": {
                                "type": "string",
                                "const": "EventsNode"
                              },
                              "event": {
                                "type": "string"
                              },
                              "limit": {
                                "type": "number"
                              }
                            },
                            "required": ["custom_name", "kind"],
                            "additionalProperties": false
                          }
                        },
                        "trendsFilter": {
                          "type": "object",
                          "properties": {
                            "display": {
                              "type": "string",
                              "enum": [
                                "ActionsLineGraph",
                                "ActionsTable",
                                "ActionsPie",
                                "ActionsBar",
                                "ActionsBarValue",
                                "WorldMap",
                                "BoldNumber"
                              ],
                              "default": "ActionsLineGraph"
                            },
                            "showLegend": {
                              "type": "boolean",
                              "default": false
                            }
                          },
                          "additionalProperties": false
                        },
                        "breakdownFilter": {
                          "type": "object",
                          "properties": {
                            "breakdown_type": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "enum": ["person", "event"]
                                },
                                {
                                  "type": "null"
                                }
                              ],
                              "default": "event"
                            },
                            "breakdown_limit": {
                              "type": "number"
                            },
                            "breakdown": {
                              "anyOf": [
                                {
                                  "anyOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "number"
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "type": ["string", "number"]
                                      }
                                    }
                                  ]
                                },
                                {
                                  "type": "null"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        },
                        "compareFilter": {
                          "type": "object",
                          "properties": {
                            "compare": {
                              "type": "boolean",
                              "default": false
                            },
                            "compare_to": {
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "conversionGoal": {
                          "anyOf": [
                            {},
                            {
                              "type": "null"
                            }
                          ]
                        }
                      },
                      "required": ["kind", "series"],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "dateRange": {
                          "$ref": "#/properties/query/anyOf/0/properties/source/anyOf/0/properties/dateRange"
                        },
                        "filterTestAccounts": {
                          "$ref": "#/properties/query/anyOf/0/properties/source/anyOf/0/properties/filterTestAccounts"
                        },
                        "properties": {
                          "$ref": "#/properties/query/anyOf/0/properties/source/anyOf/0/properties/properties"
                        },
                        "kind": {
                          "type": "string",
                          "const": "FunnelsQuery"
                        },
                        "interval": {
                          "$ref": "#/properties/query/anyOf/0/properties/source/anyOf/0/properties/interval"
                        },
                        "series": {
                          "type": "array",
                          "items": {
                            "$ref": "#/properties/query/anyOf/0/properties/source/anyOf/0/properties/series/items"
                          },
                          "minItems": 2
                        },
                        "funnelsFilter": {
                          "type": "object",
                          "properties": {
                            "layout": {
                              "type": "string",
                              "enum": ["horizontal", "vertical"]
                            },
                            "breakdownAttributionType": {
                              "type": "string",
                              "enum": ["first_touch", "last_touch", "all_events"]
                            },
                            "breakdownAttributionValue": {
                              "type": "number"
                            },
                            "funnelToStep": {
                              "type": "number"
                            },
                            "funnelFromStep": {
                              "type": "number"
                            },
                            "funnelOrderType": {
                              "type": "string",
                              "enum": ["ordered", "unordered", "strict"]
                            },
                            "funnelVizType": {
                              "type": "string",
                              "enum": ["steps", "time_to_convert", "trends"]
                            },
                            "funnelWindowInterval": {
                              "type": "number",
                              "default": 14
                            },
                            "funnelWindowIntervalUnit": {
                              "type": "string",
                              "enum": ["minute", "hour", "day", "week", "month"],
                              "default": "day"
                            },
                            "funnelStepReference": {
                              "type": "string",
                              "enum": ["total", "previous"]
                            }
                          },
                          "additionalProperties": false
                        },
                        "breakdownFilter": {
                          "$ref": "#/properties/query/anyOf/0/properties/source/anyOf/0/properties/breakdownFilter"
                        }
                      },
                      "required": ["kind", "series"],
                      "additionalProperties": false
                    }
                  ]
                }
              },
              "required": ["kind", "source"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "const": "DataVisualizationNode"
                },
                "source": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "const": "HogQLQuery"
                    },
                    "query": {
                      "type": "string"
                    },
                    "filters": {
                      "type": "object",
                      "properties": {
                        "properties": {
                          "type": "array",
                          "items": {
                            "$ref": "#/properties/query/anyOf/0/properties/source/anyOf/0/properties/properties/anyOf/0/items"
                          }
                        },
                        "dateRange": {
                          "$ref": "#/properties/query/anyOf/0/properties/source/anyOf/0/properties/dateRange"
                        },
                        "filterTestAccounts": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "required": ["kind", "query"],
                  "additionalProperties": false
                }
              },
              "required": ["kind", "source"],
              "additionalProperties": false
            }
          ]
        }
      },
      "required": ["query"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__QUERY_GENERATE_HOGQL_FROM_QUESTION",
    "description": "This is a slow tool, and you should only use it once you have tried to create a query using the 'query-run' tool, or the query is too complicated to create a trend / funnel. Queries project's PostHog data based on a provided natural language question - don't provide SQL query as input but describe the output you want. When giving the results back to the user, first show the SQL query that was used, then provide results in reasily readable format. You should also offer to save the query as an insight if the user wants to.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "query-generate-hogql-from-question",
      "canonical_tool_description_hash": "8c389f1ac8d375f62e1fa532ba318cf9c76cc6c7320a3993867cfa4511c91daa",
      "canonical_tool_input_schema_hash": "00242e860d2bf7a17a4b15a87b8b80058997d2731bfb537612a5faca4fbd7921"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "question": {
          "type": "string",
          "maxLength": 1000,
          "description": "Your natural language query describing the SQL insight (max 1000 characters)."
        }
      },
      "required": ["question"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__GET_LLM_TOTAL_COSTS_FOR_PROJECT",
    "description": "Fetches the total LLM daily costs for each model for a project over a given number of days. If no number of days is provided, it defaults to 7. The results are sorted by model name. The total cost is rounded to 4 decimal places. The query is executed against the project's data warehouse. Show the results as a Markdown formatted table with the following information for each model: Model name, Total cost in USD, Each day's date, Each day's cost in USD. Write in bold the model name with the highest total cost. Properly render the markdown table in the response.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "get-llm-total-costs-for-project",
      "canonical_tool_description_hash": "a6adc1f6e871e821f4ad292d1eb51576fff835568bf356818c059474c78c2e92",
      "canonical_tool_input_schema_hash": "da3ae8d43b65510ba4969ddcd6ec6492907aad40935190a62cf753ccecb621bc"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "integer",
          "exclusiveMinimum": 0
        },
        "days": {
          "type": "number"
        }
      },
      "required": ["projectId"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__ORGANIZATION_DETAILS_GET",
    "description": "Get the details of the active organization.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "organization-details-get",
      "canonical_tool_description_hash": "0216c33b524929497d178301bf9dbfb89571a9b7755fb41c069dfca880a5554d",
      "canonical_tool_input_schema_hash": "f973399805c1c233633f5196cf8e2ad40ee100b94996d711dcd030813b671bc5"
    },
    "input_schema": {
      "type": "object",
      "properties": {},
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__ORGANIZATIONS_GET",
    "description": "Get the organizations the user has access to.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "organizations-get",
      "canonical_tool_description_hash": "70e240dfbf7a938cef5ab14deffac286c5790b631e31daee923c9945953e907e",
      "canonical_tool_input_schema_hash": "f973399805c1c233633f5196cf8e2ad40ee100b94996d711dcd030813b671bc5"
    },
    "input_schema": {
      "type": "object",
      "properties": {},
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__SWITCH_ORGANIZATION",
    "description": "Change the active organization from the default organization. You should only use this tool if the user asks you to change the organization - otherwise, the default organization will be used.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "switch-organization",
      "canonical_tool_description_hash": "c35c569aa6bb4327f1ffce918433bdca79fb50e2b2b66c3e537cb6d7940e3fc9",
      "canonical_tool_input_schema_hash": "145f51c36052626dc209d963c7d204ac1b51fc26cee57b633f8cdbae497d3b90"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "orgId": {
          "type": "string",
          "format": "uuid"
        }
      },
      "required": ["orgId"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__PROJECTS_GET",
    "description": "Fetches projects that the user has access to in the current organization.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "projects-get",
      "canonical_tool_description_hash": "629af76b441737d30077a18ec1ac514b094d0ceb613c3c52127cd5a7a8914f94",
      "canonical_tool_input_schema_hash": "f973399805c1c233633f5196cf8e2ad40ee100b94996d711dcd030813b671bc5"
    },
    "input_schema": {
      "type": "object",
      "properties": {},
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__EVENT_DEFINITIONS_LIST",
    "description": "List all event definitions in the project with optional filtering. Can filter by search term.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "event-definitions-list",
      "canonical_tool_description_hash": "e6b47ae1956b8d37b9873661fd2b09b044238f0da4352c4c4f909bf8560388bb",
      "canonical_tool_input_schema_hash": "6e69b7ec8596dfe34cab3396b8c1ac2b1baf009103386f9b7875c870a537c82a"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "q": {
          "type": "string",
          "description": "Search query to filter event names. Only use if there are lots of events."
        }
      },
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__PROPERTIES_LIST",
    "description": "List properties for events or persons. If fetching event properties, you must provide an event name.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "properties-list",
      "canonical_tool_description_hash": "0e4ee49c86518fc09f40b14022b94da0ad9a8656b5c9aa9421fd8988a2893cdb",
      "canonical_tool_input_schema_hash": "ac05265f8b35a6f581993447365d18f1352b48f0fbfafdba155fb5e03d7a0445"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["event", "person"],
          "description": "Type of properties to get"
        },
        "eventName": {
          "type": "string",
          "description": "Event name to filter properties by, required for event type"
        },
        "includePredefinedProperties": {
          "type": "boolean",
          "description": "Whether to include predefined properties"
        }
      },
      "required": ["type"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__SWITCH_PROJECT",
    "description": "Change the active project from the default project. You should only use this tool if the user asks you to change the project - otherwise, the default project will be used.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "switch-project",
      "canonical_tool_description_hash": "720b77908259488ff80994fd37f3ff2777e817f0b33be3c926487e78b8aeb6f6",
      "canonical_tool_input_schema_hash": "9ff076a22b7e5df5d8c436cf3caff86e2d5878a8a7de647a69f9c938248fb2bc"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "integer",
          "exclusiveMinimum": 0
        }
      },
      "required": ["projectId"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__SURVEY_CREATE",
    "description": "Creates a new survey in the project. Surveys can be popover or API-based and support various question types including open-ended, multiple choice, rating, and link questions. Once created, you should ask the user if they want to add the survey to their application code.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "survey-create",
      "canonical_tool_description_hash": "676c106de0beae1a8929c7dff5fcd985f72fe07606094fcabfe148844cc4e9d4",
      "canonical_tool_input_schema_hash": "1ae9faac5faf97460f88c079b322cec0778425168e03a8905fa842618368c26c"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["popover", "api", "widget", "external_survey"]
        },
        "questions": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "question": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "descriptionContentType": {
                    "type": "string",
                    "enum": ["html", "text"]
                  },
                  "optional": {
                    "type": "boolean"
                  },
                  "buttonText": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "const": "open"
                  }
                },
                "required": ["question", "type"],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "question": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/question"
                  },
                  "description": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/description"
                  },
                  "descriptionContentType": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/descriptionContentType"
                  },
                  "optional": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/optional"
                  },
                  "buttonText": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/buttonText"
                  },
                  "type": {
                    "type": "string",
                    "const": "link"
                  },
                  "link": {
                    "type": "string",
                    "format": "uri"
                  }
                },
                "required": ["question", "type", "link"],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "question": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/question"
                  },
                  "description": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/description"
                  },
                  "descriptionContentType": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/descriptionContentType"
                  },
                  "optional": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/optional"
                  },
                  "buttonText": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/buttonText"
                  },
                  "type": {
                    "type": "string",
                    "const": "rating"
                  },
                  "display": {
                    "type": "string",
                    "enum": ["number", "emoji"],
                    "description": "Display format: 'number' shows numeric scale, 'emoji' shows emoji scale"
                  },
                  "scale": {
                    "type": "number",
                    "enum": [3, 5, 7],
                    "description": "Rating scale can be one of 3, 5, or 7"
                  },
                  "lowerBoundLabel": {
                    "type": "string",
                    "description": "Label for the lowest rating (e.g., 'Very Poor')"
                  },
                  "upperBoundLabel": {
                    "type": "string",
                    "description": "Label for the highest rating (e.g., 'Excellent')"
                  },
                  "branching": {
                    "anyOf": [
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "const": "next_question"
                          }
                        },
                        "required": ["type"],
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "const": "end"
                          }
                        },
                        "required": ["type"],
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "const": "response_based"
                          },
                          "responseValues": {
                            "type": "object",
                            "additionalProperties": {
                              "anyOf": [
                                {
                                  "type": "number"
                                },
                                {
                                  "type": "string",
                                  "const": "end"
                                }
                              ]
                            },
                            "propertyNames": {
                              "enum": ["negative", "neutral", "positive"]
                            },
                            "description": "Only include keys for responses that should branch to a specific question or 'end'. Omit keys for responses that should proceed to the next question (default behavior)."
                          }
                        },
                        "required": ["type", "responseValues"],
                        "additionalProperties": false,
                        "description": "For rating questions: use sentiment keys based on scale thirds - negative (lower third), neutral (middle third), positive (upper third)"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "const": "specific_question"
                          },
                          "index": {
                            "type": "number"
                          }
                        },
                        "required": ["type", "index"],
                        "additionalProperties": false
                      }
                    ]
                  }
                },
                "required": ["question", "type"],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "question": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/question"
                  },
                  "description": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/description"
                  },
                  "descriptionContentType": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/descriptionContentType"
                  },
                  "optional": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/optional"
                  },
                  "buttonText": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/buttonText"
                  },
                  "type": {
                    "type": "string",
                    "const": "rating"
                  },
                  "display": {
                    "type": "string",
                    "const": "number",
                    "description": "NPS questions always use numeric scale"
                  },
                  "scale": {
                    "type": "number",
                    "const": 10,
                    "description": "NPS questions always use 0-10 scale"
                  },
                  "lowerBoundLabel": {
                    "type": "string",
                    "description": "Label for 0 rating (typically 'Not at all likely')"
                  },
                  "upperBoundLabel": {
                    "type": "string",
                    "description": "Label for 10 rating (typically 'Extremely likely')"
                  },
                  "branching": {
                    "anyOf": [
                      {
                        "$ref": "#/properties/questions/items/anyOf/2/properties/branching/anyOf/0"
                      },
                      {
                        "$ref": "#/properties/questions/items/anyOf/2/properties/branching/anyOf/1"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "const": "response_based"
                          },
                          "responseValues": {
                            "type": "object",
                            "additionalProperties": {
                              "anyOf": [
                                {
                                  "type": "number"
                                },
                                {
                                  "type": "string",
                                  "const": "end"
                                }
                              ]
                            },
                            "propertyNames": {
                              "enum": ["detractors", "passives", "promoters"]
                            },
                            "description": "Only include keys for responses that should branch to a specific question or 'end'. Omit keys for responses that should proceed to the next question (default behavior)."
                          }
                        },
                        "required": ["type", "responseValues"],
                        "additionalProperties": false,
                        "description": "For NPS rating questions: use sentiment keys based on score ranges - detractors (0-6), passives (7-8), promoters (9-10)"
                      },
                      {
                        "$ref": "#/properties/questions/items/anyOf/2/properties/branching/anyOf/3"
                      }
                    ]
                  }
                },
                "required": ["question", "type", "display", "scale"],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "question": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/question"
                  },
                  "description": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/description"
                  },
                  "descriptionContentType": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/descriptionContentType"
                  },
                  "optional": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/optional"
                  },
                  "buttonText": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/buttonText"
                  },
                  "type": {
                    "type": "string",
                    "const": "single_choice"
                  },
                  "choices": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "minItems": 2,
                    "maxItems": 20,
                    "description": "Array of choice options. Choice indices (0, 1, 2, etc.) are used for branching logic"
                  },
                  "shuffleOptions": {
                    "type": "boolean",
                    "description": "Whether to randomize the order of choices for each respondent"
                  },
                  "hasOpenChoice": {
                    "type": "boolean",
                    "description": "Whether the last choice (typically 'Other', is an open text input question"
                  },
                  "branching": {
                    "anyOf": [
                      {
                        "$ref": "#/properties/questions/items/anyOf/2/properties/branching/anyOf/0"
                      },
                      {
                        "$ref": "#/properties/questions/items/anyOf/2/properties/branching/anyOf/1"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "const": "response_based"
                          },
                          "responseValues": {
                            "type": "object",
                            "additionalProperties": {
                              "anyOf": [
                                {
                                  "type": "number"
                                },
                                {
                                  "type": "string",
                                  "const": "end"
                                }
                              ]
                            },
                            "description": "Only include keys for responses that should branch to a specific question or 'end'. Omit keys for responses that should proceed to the next question (default behavior)."
                          }
                        },
                        "required": ["type", "responseValues"],
                        "additionalProperties": false,
                        "description": "For single choice questions: use choice indices as string keys (\"0\", \"1\", \"2\", etc.)"
                      },
                      {
                        "$ref": "#/properties/questions/items/anyOf/2/properties/branching/anyOf/3"
                      }
                    ]
                  }
                },
                "required": ["question", "type", "choices"],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "question": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/question"
                  },
                  "description": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/description"
                  },
                  "descriptionContentType": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/descriptionContentType"
                  },
                  "optional": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/optional"
                  },
                  "buttonText": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/buttonText"
                  },
                  "type": {
                    "type": "string",
                    "const": "multiple_choice"
                  },
                  "choices": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "minItems": 2,
                    "maxItems": 20,
                    "description": "Array of choice options. Multiple selections allowed. No branching logic supported."
                  },
                  "shuffleOptions": {
                    "type": "boolean",
                    "description": "Whether to randomize the order of choices for each respondent"
                  },
                  "hasOpenChoice": {
                    "type": "boolean",
                    "description": "Whether the last choice (typically 'Other', is an open text input question"
                  }
                },
                "required": ["question", "type", "choices"],
                "additionalProperties": false
              }
            ]
          },
          "minItems": 1
        },
        "appearance": {
          "type": "object",
          "properties": {
            "backgroundColor": {
              "type": "string"
            },
            "submitButtonColor": {
              "type": "string"
            },
            "textColor": {
              "type": "string"
            },
            "submitButtonText": {
              "type": "string"
            },
            "submitButtonTextColor": {
              "type": "string"
            },
            "descriptionTextColor": {
              "type": "string"
            },
            "ratingButtonColor": {
              "type": "string"
            },
            "ratingButtonActiveColor": {
              "type": "string"
            },
            "ratingButtonHoverColor": {
              "type": "string"
            },
            "whiteLabel": {
              "type": "boolean"
            },
            "autoDisappear": {
              "type": "boolean"
            },
            "displayThankYouMessage": {
              "type": "boolean"
            },
            "thankYouMessageHeader": {
              "type": "string"
            },
            "thankYouMessageDescription": {
              "type": "string"
            },
            "thankYouMessageDescriptionContentType": {
              "type": "string",
              "enum": ["html", "text"]
            },
            "thankYouMessageCloseButtonText": {
              "type": "string"
            },
            "borderColor": {
              "type": "string"
            },
            "placeholder": {
              "type": "string"
            },
            "shuffleQuestions": {
              "type": "boolean"
            },
            "surveyPopupDelaySeconds": {
              "type": "number"
            },
            "widgetType": {
              "type": "string",
              "enum": ["button", "tab", "selector"]
            },
            "widgetSelector": {
              "type": "string"
            },
            "widgetLabel": {
              "type": "string"
            },
            "widgetColor": {
              "type": "string"
            },
            "fontFamily": {
              "type": "string"
            },
            "maxWidth": {
              "type": "string"
            },
            "zIndex": {
              "type": "string"
            },
            "disabledButtonOpacity": {
              "type": "string"
            },
            "boxPadding": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "start_date": {
          "anyOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Setting this will launch the survey immediately. Don't add a start_date unless explicitly requested to do so."
        },
        "responses_limit": {
          "anyOf": [
            {
              "type": "number",
              "exclusiveMinimum": 0
            },
            {
              "type": "null"
            }
          ],
          "description": "The maximum number of responses before automatically stopping the survey."
        },
        "iteration_count": {
          "anyOf": [
            {
              "type": "number",
              "exclusiveMinimum": 0
            },
            {
              "type": "null"
            }
          ],
          "description": "For a recurring schedule, this field specifies the number of times the survey should be shown to the user. Use 1 for 'once every X days', higher numbers for multiple repetitions. Works together with iteration_frequency_days to determine the overall survey schedule."
        },
        "iteration_frequency_days": {
          "anyOf": [
            {
              "type": "number",
              "exclusiveMinimum": 0,
              "maximum": 365
            },
            {
              "type": "null"
            }
          ],
          "description": "For a recurring schedule, this field specifies the interval in days between each survey instance shown to the user, used alongside iteration_count for precise scheduling."
        },
        "enable_partial_responses": {
          "type": "boolean",
          "description": "When at least one question is answered, the response is stored (true). The response is stored when all questions are answered (false)."
        },
        "linked_flag_id": {
          "type": ["number", "null"],
          "description": "The feature flag linked to this survey"
        },
        "targeting_flag_filters": {
          "type": "object",
          "properties": {
            "groups": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "properties": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "value": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            },
                            {
                              "type": "boolean"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            }
                          ]
                        },
                        "operator": {
                          "type": "string",
                          "enum": [
                            "exact",
                            "is_not",
                            "is_set",
                            "is_not_set",
                            "icontains",
                            "not_icontains",
                            "regex",
                            "not_regex",
                            "is_cleaned_path_exact",
                            "exact",
                            "is_not",
                            "is_set",
                            "is_not_set",
                            "gt",
                            "gte",
                            "lt",
                            "lte",
                            "min",
                            "max",
                            "exact",
                            "is_not",
                            "is_set",
                            "is_not_set",
                            "in",
                            "not_in"
                          ]
                        }
                      },
                      "required": ["key", "value"],
                      "additionalProperties": false
                    }
                  },
                  "rollout_percentage": {
                    "type": "number"
                  }
                },
                "required": ["properties", "rollout_percentage"],
                "additionalProperties": false
              }
            }
          },
          "required": ["groups"],
          "additionalProperties": false,
          "description": "Target specific users based on their properties. Example: {groups: [{properties: [{key: 'email', value: ['@company.com'], operator: 'icontains'}], rollout_percentage: 100}]}"
        }
      },
      "required": ["name", "questions"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__SURVEY_GET",
    "description": "Get a specific survey by ID. Returns the survey configuration including questions, targeting, and scheduling details.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "survey-get",
      "canonical_tool_description_hash": "40bf7f33282b749ea23c5ed4a7d91cb94a5108915bc3d23ddf9b2823499ca515",
      "canonical_tool_input_schema_hash": "6f45899b9493d8f582e59b8e294bdd59aa696730ae5fa5b6f3c6434ee91147dc"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "surveyId": {
          "type": "string"
        }
      },
      "required": ["surveyId"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__SURVEYS_GET_ALL",
    "description": "Get all surveys in the project with optional filtering. Can filter by search term or use pagination.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "surveys-get-all",
      "canonical_tool_description_hash": "80cb97a7a429c65f890e66e444f338ec52c00e9bb08c246dc9bc4cc00642e4a8",
      "canonical_tool_input_schema_hash": "918213ecd5f480bb59c197838714f9be5b2c39732ffee332653d9b8e447af024"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "number"
        },
        "offset": {
          "type": "number"
        },
        "search": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__SURVEY_UPDATE",
    "description": "Update an existing survey by ID. Can update name, description, questions, scheduling, and other survey properties.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "survey-update",
      "canonical_tool_description_hash": "22b0c6669c4ebac476237ebcf2a2216617f174f30b844bf79261452bd35414d8",
      "canonical_tool_input_schema_hash": "929953a576ba6911c5d3cad12fb680cde4a3c8014413d85d667179c55552b215"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["popover", "api", "widget", "external_survey"]
        },
        "questions": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "question": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "descriptionContentType": {
                    "type": "string",
                    "enum": ["html", "text"]
                  },
                  "optional": {
                    "type": "boolean"
                  },
                  "buttonText": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "const": "open"
                  }
                },
                "required": ["question", "type"],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "question": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/question"
                  },
                  "description": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/description"
                  },
                  "descriptionContentType": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/descriptionContentType"
                  },
                  "optional": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/optional"
                  },
                  "buttonText": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/buttonText"
                  },
                  "type": {
                    "type": "string",
                    "const": "link"
                  },
                  "link": {
                    "type": "string",
                    "format": "uri"
                  }
                },
                "required": ["question", "type", "link"],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "question": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/question"
                  },
                  "description": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/description"
                  },
                  "descriptionContentType": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/descriptionContentType"
                  },
                  "optional": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/optional"
                  },
                  "buttonText": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/buttonText"
                  },
                  "type": {
                    "type": "string",
                    "const": "rating"
                  },
                  "display": {
                    "type": "string",
                    "enum": ["number", "emoji"],
                    "description": "Display format: 'number' shows numeric scale, 'emoji' shows emoji scale"
                  },
                  "scale": {
                    "type": "number",
                    "enum": [3, 5, 7],
                    "description": "Rating scale can be one of 3, 5, or 7"
                  },
                  "lowerBoundLabel": {
                    "type": "string",
                    "description": "Label for the lowest rating (e.g., 'Very Poor')"
                  },
                  "upperBoundLabel": {
                    "type": "string",
                    "description": "Label for the highest rating (e.g., 'Excellent')"
                  },
                  "branching": {
                    "anyOf": [
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "const": "next_question"
                          }
                        },
                        "required": ["type"],
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "const": "end"
                          }
                        },
                        "required": ["type"],
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "const": "response_based"
                          },
                          "responseValues": {
                            "type": "object",
                            "additionalProperties": {
                              "anyOf": [
                                {
                                  "type": "number"
                                },
                                {
                                  "type": "string",
                                  "const": "end"
                                }
                              ]
                            },
                            "propertyNames": {
                              "enum": ["negative", "neutral", "positive"]
                            },
                            "description": "Only include keys for responses that should branch to a specific question or 'end'. Omit keys for responses that should proceed to the next question (default behavior)."
                          }
                        },
                        "required": ["type", "responseValues"],
                        "additionalProperties": false,
                        "description": "For rating questions: use sentiment keys based on scale thirds - negative (lower third), neutral (middle third), positive (upper third)"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "const": "specific_question"
                          },
                          "index": {
                            "type": "number"
                          }
                        },
                        "required": ["type", "index"],
                        "additionalProperties": false
                      }
                    ]
                  }
                },
                "required": ["question", "type"],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "question": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/question"
                  },
                  "description": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/description"
                  },
                  "descriptionContentType": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/descriptionContentType"
                  },
                  "optional": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/optional"
                  },
                  "buttonText": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/buttonText"
                  },
                  "type": {
                    "type": "string",
                    "const": "rating"
                  },
                  "display": {
                    "type": "string",
                    "const": "number",
                    "description": "NPS questions always use numeric scale"
                  },
                  "scale": {
                    "type": "number",
                    "const": 10,
                    "description": "NPS questions always use 0-10 scale"
                  },
                  "lowerBoundLabel": {
                    "type": "string",
                    "description": "Label for 0 rating (typically 'Not at all likely')"
                  },
                  "upperBoundLabel": {
                    "type": "string",
                    "description": "Label for 10 rating (typically 'Extremely likely')"
                  },
                  "branching": {
                    "anyOf": [
                      {
                        "$ref": "#/properties/questions/items/anyOf/2/properties/branching/anyOf/0"
                      },
                      {
                        "$ref": "#/properties/questions/items/anyOf/2/properties/branching/anyOf/1"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "const": "response_based"
                          },
                          "responseValues": {
                            "type": "object",
                            "additionalProperties": {
                              "anyOf": [
                                {
                                  "type": "number"
                                },
                                {
                                  "type": "string",
                                  "const": "end"
                                }
                              ]
                            },
                            "propertyNames": {
                              "enum": ["detractors", "passives", "promoters"]
                            },
                            "description": "Only include keys for responses that should branch to a specific question or 'end'. Omit keys for responses that should proceed to the next question (default behavior)."
                          }
                        },
                        "required": ["type", "responseValues"],
                        "additionalProperties": false,
                        "description": "For NPS rating questions: use sentiment keys based on score ranges - detractors (0-6), passives (7-8), promoters (9-10)"
                      },
                      {
                        "$ref": "#/properties/questions/items/anyOf/2/properties/branching/anyOf/3"
                      }
                    ]
                  }
                },
                "required": ["question", "type", "display", "scale"],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "question": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/question"
                  },
                  "description": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/description"
                  },
                  "descriptionContentType": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/descriptionContentType"
                  },
                  "optional": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/optional"
                  },
                  "buttonText": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/buttonText"
                  },
                  "type": {
                    "type": "string",
                    "const": "single_choice"
                  },
                  "choices": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "minItems": 2,
                    "maxItems": 20,
                    "description": "Array of choice options. Choice indices (0, 1, 2, etc.) are used for branching logic"
                  },
                  "shuffleOptions": {
                    "type": "boolean",
                    "description": "Whether to randomize the order of choices for each respondent"
                  },
                  "hasOpenChoice": {
                    "type": "boolean",
                    "description": "Whether the last choice (typically 'Other', is an open text input question"
                  },
                  "branching": {
                    "anyOf": [
                      {
                        "$ref": "#/properties/questions/items/anyOf/2/properties/branching/anyOf/0"
                      },
                      {
                        "$ref": "#/properties/questions/items/anyOf/2/properties/branching/anyOf/1"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "const": "response_based"
                          },
                          "responseValues": {
                            "type": "object",
                            "additionalProperties": {
                              "anyOf": [
                                {
                                  "type": "number"
                                },
                                {
                                  "type": "string",
                                  "const": "end"
                                }
                              ]
                            },
                            "description": "Only include keys for responses that should branch to a specific question or 'end'. Omit keys for responses that should proceed to the next question (default behavior)."
                          }
                        },
                        "required": ["type", "responseValues"],
                        "additionalProperties": false,
                        "description": "For single choice questions: use choice indices as string keys (\"0\", \"1\", \"2\", etc.)"
                      },
                      {
                        "$ref": "#/properties/questions/items/anyOf/2/properties/branching/anyOf/3"
                      }
                    ]
                  }
                },
                "required": ["question", "type", "choices"],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "question": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/question"
                  },
                  "description": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/description"
                  },
                  "descriptionContentType": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/descriptionContentType"
                  },
                  "optional": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/optional"
                  },
                  "buttonText": {
                    "$ref": "#/properties/questions/items/anyOf/0/properties/buttonText"
                  },
                  "type": {
                    "type": "string",
                    "const": "multiple_choice"
                  },
                  "choices": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "minItems": 2,
                    "maxItems": 20,
                    "description": "Array of choice options. Multiple selections allowed. No branching logic supported."
                  },
                  "shuffleOptions": {
                    "type": "boolean",
                    "description": "Whether to randomize the order of choices for each respondent"
                  },
                  "hasOpenChoice": {
                    "type": "boolean",
                    "description": "Whether the last choice (typically 'Other', is an open text input question"
                  }
                },
                "required": ["question", "type", "choices"],
                "additionalProperties": false
              }
            ]
          },
          "minItems": 1
        },
        "conditions": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string"
            },
            "selector": {
              "type": "string"
            },
            "seenSurveyWaitPeriodInDays": {
              "type": "number",
              "description": "Don't show this survey to users who saw any survey in the last x days."
            },
            "urlMatchType": {
              "type": "string",
              "enum": ["regex", "not_regex", "exact", "is_not", "icontains", "not_icontains"],
              "description": "URL/device matching types: 'regex' (matches regex pattern), 'not_regex' (does not match regex pattern), 'exact' (exact string match), 'is_not' (not exact match), 'icontains' (case-insensitive contains), 'not_icontains' (case-insensitive does not contain)"
            },
            "events": {
              "type": "object",
              "properties": {
                "repeatedActivation": {
                  "type": "boolean",
                  "description": "Whether to show the survey every time one of the events is triggered (true), or just once (false)"
                },
                "values": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": ["name"],
                    "additionalProperties": false
                  },
                  "description": "Array of event names that trigger the survey"
                }
              },
              "additionalProperties": false
            },
            "deviceTypes": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["Desktop", "Mobile", "Tablet"]
              }
            },
            "deviceTypesMatchType": {
              "$ref": "#/properties/conditions/properties/urlMatchType",
              "description": "URL/device matching types: 'regex' (matches regex pattern), 'not_regex' (does not match regex pattern), 'exact' (exact string match), 'is_not' (not exact match), 'icontains' (case-insensitive contains), 'not_icontains' (case-insensitive does not contain)"
            },
            "linkedFlagVariant": {
              "type": "string",
              "description": "The variant of the feature flag linked to this survey"
            }
          },
          "additionalProperties": false
        },
        "appearance": {
          "type": "object",
          "properties": {
            "backgroundColor": {
              "type": "string"
            },
            "submitButtonColor": {
              "type": "string"
            },
            "textColor": {
              "type": "string"
            },
            "submitButtonText": {
              "type": "string"
            },
            "submitButtonTextColor": {
              "type": "string"
            },
            "descriptionTextColor": {
              "type": "string"
            },
            "ratingButtonColor": {
              "type": "string"
            },
            "ratingButtonActiveColor": {
              "type": "string"
            },
            "ratingButtonHoverColor": {
              "type": "string"
            },
            "whiteLabel": {
              "type": "boolean"
            },
            "autoDisappear": {
              "type": "boolean"
            },
            "displayThankYouMessage": {
              "type": "boolean"
            },
            "thankYouMessageHeader": {
              "type": "string"
            },
            "thankYouMessageDescription": {
              "type": "string"
            },
            "thankYouMessageDescriptionContentType": {
              "type": "string",
              "enum": ["html", "text"]
            },
            "thankYouMessageCloseButtonText": {
              "type": "string"
            },
            "borderColor": {
              "type": "string"
            },
            "placeholder": {
              "type": "string"
            },
            "shuffleQuestions": {
              "type": "boolean"
            },
            "surveyPopupDelaySeconds": {
              "type": "number"
            },
            "widgetType": {
              "type": "string",
              "enum": ["button", "tab", "selector"]
            },
            "widgetSelector": {
              "type": "string"
            },
            "widgetLabel": {
              "type": "string"
            },
            "widgetColor": {
              "type": "string"
            },
            "fontFamily": {
              "type": "string"
            },
            "maxWidth": {
              "type": "string"
            },
            "zIndex": {
              "type": "string"
            },
            "disabledButtonOpacity": {
              "type": "string"
            },
            "boxPadding": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "schedule": {
          "type": "string",
          "enum": ["once", "recurring", "always"],
          "description": "Survey scheduling behavior: 'once' = show once per user (default), 'recurring' = repeat based on iteration_count and iteration_frequency_days settings, 'always' = show every time conditions are met (mainly for widget surveys)"
        },
        "start_date": {
          "type": "string",
          "format": "date-time",
          "description": "When the survey should start being shown to users. Setting this will launch the survey"
        },
        "end_date": {
          "type": "string",
          "format": "date-time",
          "description": "When the survey stopped being shown to users. Setting this will complete the survey."
        },
        "archived": {
          "type": "boolean"
        },
        "responses_limit": {
          "anyOf": [
            {
              "type": "number",
              "exclusiveMinimum": 0
            },
            {
              "type": "null"
            }
          ],
          "description": "The maximum number of responses before automatically stopping the survey."
        },
        "iteration_count": {
          "anyOf": [
            {
              "type": "number",
              "exclusiveMinimum": 0
            },
            {
              "type": "null"
            }
          ],
          "description": "For a recurring schedule, this field specifies the number of times the survey should be shown to the user. Use 1 for 'once every X days', higher numbers for multiple repetitions. Works together with iteration_frequency_days to determine the overall survey schedule."
        },
        "iteration_frequency_days": {
          "anyOf": [
            {
              "type": "number",
              "exclusiveMinimum": 0,
              "maximum": 365
            },
            {
              "type": "null"
            }
          ],
          "description": "For a recurring schedule, this field specifies the interval in days between each survey instance shown to the user, used alongside iteration_count for precise scheduling."
        },
        "enable_partial_responses": {
          "type": "boolean",
          "description": "When at least one question is answered, the response is stored (true). The response is stored when all questions are answered (false)."
        },
        "linked_flag_id": {
          "type": ["number", "null"],
          "description": "The feature flag to link to this survey"
        },
        "targeting_flag_id": {
          "type": "number",
          "description": "An existing targeting flag to use for this survey"
        },
        "targeting_flag_filters": {
          "type": "object",
          "properties": {
            "groups": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "properties": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "value": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            },
                            {
                              "type": "boolean"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            }
                          ]
                        },
                        "operator": {
                          "type": "string",
                          "enum": [
                            "exact",
                            "is_not",
                            "is_set",
                            "is_not_set",
                            "icontains",
                            "not_icontains",
                            "regex",
                            "not_regex",
                            "is_cleaned_path_exact",
                            "exact",
                            "is_not",
                            "is_set",
                            "is_not_set",
                            "gt",
                            "gte",
                            "lt",
                            "lte",
                            "min",
                            "max",
                            "exact",
                            "is_not",
                            "is_set",
                            "is_not_set",
                            "in",
                            "not_in"
                          ]
                        }
                      },
                      "required": ["key", "value"],
                      "additionalProperties": false
                    }
                  },
                  "rollout_percentage": {
                    "type": "number"
                  }
                },
                "required": ["properties", "rollout_percentage"],
                "additionalProperties": false
              }
            }
          },
          "required": ["groups"],
          "additionalProperties": false,
          "description": "Target specific users based on their properties. Example: {groups: [{properties: [{key: 'email', value: ['@company.com'], operator: 'icontains'}], rollout_percentage: 50}]}"
        },
        "remove_targeting_flag": {
          "type": "boolean",
          "description": "Set to true to completely remove all targeting filters from the survey, making it visible to all users (subject to other display conditions like URL matching)."
        },
        "surveyId": {
          "type": "string"
        }
      },
      "required": ["surveyId"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__SURVEY_DELETE",
    "description": "Delete a survey by ID (soft delete - marks as archived).",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "survey-delete",
      "canonical_tool_description_hash": "51fe94b2b56dc0a513ca2f55b1c48bfec3fc99e5822ef8ffa9f60d0d6729bfb8",
      "canonical_tool_input_schema_hash": "6f45899b9493d8f582e59b8e294bdd59aa696730ae5fa5b6f3c6434ee91147dc"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "surveyId": {
          "type": "string"
        }
      },
      "required": ["surveyId"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__SURVEYS_GLOBAL_STATS",
    "description": "Get aggregated response statistics across all surveys in the project. Includes event counts (shown, dismissed, sent), unique respondents, conversion rates, and timing data. Supports optional date filtering.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "surveys-global-stats",
      "canonical_tool_description_hash": "457ce4dbe924b51ed088fde0628609e1576fe52dfc274350960d28b4a7991a32",
      "canonical_tool_input_schema_hash": "c9c0976d599dfe00f25fa6ea7b35f967f1555c675df5285a5cb29823fb4db22c"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "date_from": {
          "type": "string",
          "format": "date-time",
          "description": "Optional ISO timestamp for start date (e.g. 2024-01-01T00:00:00Z)"
        },
        "date_to": {
          "type": "string",
          "format": "date-time",
          "description": "Optional ISO timestamp for end date (e.g. 2024-01-31T23:59:59Z)"
        }
      },
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "POSTHOG__SURVEY_STATS",
    "description": "Get response statistics for a specific survey. Includes detailed event counts (shown, dismissed, sent), unique respondents, conversion rates, and timing data. Supports optional date filtering.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "survey-stats",
      "canonical_tool_description_hash": "e95fb7b8c0cabf49e3b08e47ed2b4b136f27a6ca6d798e5ef854b463336b49c9",
      "canonical_tool_input_schema_hash": "b5f6f973a15bfea043f2ceb9be1d8d53a830e14aa41c384b9557861a1c961b77"
    },
    "input_schema": {
      "type": "object",
      "properties": {
        "survey_id": {
          "type": "string"
        },
        "date_from": {
          "type": "string",
          "format": "date-time",
          "description": "Optional ISO timestamp for start date (e.g. 2024-01-01T00:00:00Z)"
        },
        "date_to": {
          "type": "string",
          "format": "date-time",
          "description": "Optional ISO timestamp for end date (e.g. 2024-01-31T23:59:59Z)"
        }
      },
      "required": ["survey_id"],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  }
]
