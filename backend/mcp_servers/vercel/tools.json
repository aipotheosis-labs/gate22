[
  {
    "name": "VERCEL__GET_URL_TO_INSTALL_VERCEL_APP_IN_GITHUB",
    "description": "Installs the Vercel app in a GitHub repository. It will return a URL that user can follow to install the Vercel app in their GitHub repository.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "GET_URL_TO_INSTALL_VERCEL_APP_IN_GITHUB",
      "canonical_tool_description_hash": "0467a8a3d6e059a8c0982365b46a923fc712702963cb7630cd1f97b3550d53ca",
      "canonical_tool_input_schema_hash": "d746974fa9afd5e951f76f9af38954b0ad7f436f2120dc974da65e5ee39f856f"
    },
    "input_schema": {
      "type": "object",
      "required": [],
      "properties": {},
      "additionalProperties": false
    }
  },
  {
    "name": "VERCEL__CREATE_PROJECT",
    "description": "Creates a new project on Vercel.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CREATE_PROJECT",
      "canonical_tool_description_hash": "764477a45c7eee14ca61091d91ecc2f9ec0926e91bc272f4afe17e7a85a306bb",
      "canonical_tool_input_schema_hash": "67335fa5576af43ea9a66223ac176603148d9e506dc08922e6541e85a724c825"
    },
    "input_schema": {
      "type": "object",
      "required": ["body"],
      "properties": {
        "body": {
          "type": "object",
          "required": ["name"],
          "properties": {
            "name": {
              "type": "string",
              "description": "The desired name for the project"
            },
            "framework": {
              "oneOf": [
                {
                  "enum": [
                    "blitzjs",
                    "nextjs",
                    "gatsby",
                    "remix",
                    "react-router",
                    "astro",
                    "hexo",
                    "eleventy",
                    "docusaurus-2",
                    "docusaurus",
                    "preact",
                    "solidstart-1",
                    "solidstart",
                    "dojo",
                    "ember",
                    "vue",
                    "scully",
                    "ionic-angular",
                    "angular",
                    "polymer",
                    "svelte",
                    "sveltekit",
                    "sveltekit-1",
                    "ionic-react",
                    "create-react-app",
                    "gridsome",
                    "umijs",
                    "sapper",
                    "saber",
                    "stencil",
                    "nuxtjs",
                    "redwoodjs",
                    "hugo",
                    "jekyll",
                    "brunch",
                    "middleman",
                    "zola",
                    "hydrogen",
                    "vite",
                    "vitepress",
                    "vuepress",
                    "parcel",
                    "fasthtml",
                    "sanity-v3",
                    "sanity",
                    "storybook"
                  ],
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The framework that is being used for this project. When null is used no framework is selected"
            },
            "gitRepository": {
              "type": "object",
              "required": ["repo", "type"],
              "properties": {
                "repo": {
                  "type": "string",
                  "description": "The name of the git repository."
                },
                "type": {
                  "enum": ["github", "gitlab", "bitbucket"],
                  "type": "string",
                  "default": "github",
                  "description": "The Git Provider of the repository"
                }
              },
              "description": "The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed. The Vercel app must be installed first to use this feature.",
              "additionalProperties": false
            },
            "rootDirectory": {
              "type": "string",
              "description": "The name of a directory or relative path to the source code of your project. When null is used it will default to the project root. Maximum length: 256."
            },
            "environmentVariables": {
              "type": "array",
              "items": {
                "type": "object",
                "visible": ["key", "target", "value", "gitBranch", "type"],
                "required": ["key", "target", "value", "type"],
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Name of the ENV variable"
                  },
                  "type": {
                    "enum": ["system", "secret", "encrypted", "plain", "sensitive"],
                    "type": "string",
                    "description": "Type of the ENV variable"
                  },
                  "value": {
                    "type": "string",
                    "description": "Value for the ENV variable"
                  },
                  "target": {
                    "enum": ["production", "preview", "development"],
                    "type": "string",
                    "description": "Deployment Target or Targets in which the ENV variable will be used"
                  },
                  "gitBranch": {
                    "type": "string",
                    "description": "If defined, the git branch of the environment variable (must have target=preview). Maximum length: 250."
                  }
                },
                "additionalProperties": false
              },
              "description": "Environment variables to be applied to the project"
            }
          },
          "description": "Request body parameters",
          "additionalProperties": false
        },
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "slug": {
              "type": "string",
              "description": "The Team slug to perform the request on behalf of."
            },
            "teamId": {
              "type": "string",
              "description": "The Team identifier to perform the request on behalf of."
            }
          },
          "description": "Optional query parameters for the http request",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "VERCEL__UPDATE_PROJECT",
    "description": "Updates an existing project on Vercel using either its name or id.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "UPDATE_PROJECT",
      "canonical_tool_description_hash": "c8f428ba2c32f784693d72254c0b44f54b1fbd8ef50c13fce0e6c42904b17618",
      "canonical_tool_input_schema_hash": "e3d84829ece45f3aef7e07dcff2b3c888e50a36a1782d29907807107c9458ea9"
    },
    "input_schema": {
      "type": "object",
      "required": ["path"],
      "properties": {
        "body": {
          "type": "object",
          "required": [],
          "properties": {
            "name": {
              "type": "string",
              "description": "The desired name for the project. Maximum length: 100."
            },
            "framework": {
              "enum": [
                "blitzjs",
                "nextjs",
                "gatsby",
                "remix",
                "react-router",
                "astro",
                "hexo",
                "eleventy",
                "docusaurus-2",
                "docusaurus",
                "preact",
                "solidstart-1",
                "solidstart",
                "dojo",
                "ember",
                "vue",
                "scully",
                "ionic-angular",
                "angular",
                "polymer",
                "svelte",
                "sveltekit",
                "sveltekit-1",
                "ionic-react",
                "create-react-app",
                "gridsome",
                "umijs",
                "sapper",
                "saber",
                "stencil",
                "nuxtjs",
                "redwoodjs",
                "hugo",
                "jekyll",
                "brunch",
                "middleman",
                "zola",
                "hydrogen",
                "vite",
                "vitepress",
                "vuepress",
                "parcel",
                "fasthtml",
                "sanity-v3",
                "sanity",
                "storybook",
                null
              ],
              "type": "string",
              "description": "The framework that is being used for this project. When null is used no framework is selected"
            },
            "devCommand": {
              "type": "string",
              "description": "The dev command for this project. When null is used this value will be automatically detected. Maximum length: 256."
            },
            "buildCommand": {
              "type": "string",
              "description": "The build command for this project. When null is used this value will be automatically detected. Maximum length: 256."
            },
            "rootDirectory": {
              "type": "string",
              "description": "The name of a directory or relative path to the source code of your project. When null is used it will default to the project root. Maximum length: 256."
            },
            "installCommand": {
              "type": "string",
              "description": "The install command for this project. When null is used this value will be automatically detected. Maximum length: 256."
            }
          },
          "description": "Request body parameters for updating the project",
          "additionalProperties": false
        },
        "path": {
          "type": "object",
          "required": ["idOrName"],
          "properties": {
            "idOrName": {
              "type": "string",
              "description": "The unique project identifier or the project name."
            }
          },
          "description": "Path parameters for the http request",
          "additionalProperties": false
        },
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "slug": {
              "type": "string",
              "description": "The Team slug to perform the request on behalf of."
            },
            "teamId": {
              "type": "string",
              "description": "The Team identifier to perform the request on behalf of."
            }
          },
          "description": "Optional query parameters for the http request",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "VERCEL__LIST_PROJECTS",
    "description": "Lists all projects for the authenticated user.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "LIST_PROJECTS",
      "canonical_tool_description_hash": "8b92af721339af03b6c88876346f4aace42166ff41bb84f1912c4cb9f7dbc5c2",
      "canonical_tool_input_schema_hash": "26521a167cd0fd758c68b89715b5b63a7fecca7fd702a0e015846c946564f7e0"
    },
    "input_schema": {
      "type": "object",
      "required": [],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "repo": {
              "type": "string",
              "description": "Filter results to only include projects belonging to the specified repository."
            },
            "slug": {
              "type": "string",
              "description": "The team slug to perform the request on behalf of a specific team."
            },
            "limit": {
              "type": "string",
              "description": "Limits the number of projects returned in the response."
            },
            "repoId": {
              "type": "string",
              "description": "Filter results by the unique Repository ID."
            },
            "search": {
              "type": "string",
              "description": "Search for projects by their name. Maximum length: 100 characters."
            },
            "teamId": {
              "type": "string",
              "description": "The Team identifier to perform the request on behalf of."
            },
            "repoUrl": {
              "type": "string",
              "description": "Filter results by the full Repository URL."
            }
          },
          "description": "Optional query parameters for the http request",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "VERCEL__FIND_PROJECT_BY_ID_OR_NAME",
    "description": "Get the information for a specific project by passing either the project id or name in the URL.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "FIND_PROJECT_BY_ID_OR_NAME",
      "canonical_tool_description_hash": "9286924e76834e9c3dd619607777e88500fb27bed9984c9294fb27e5ca4e1fbb",
      "canonical_tool_input_schema_hash": "54dce37ee0a91062bc3519ee0f41e17447a54601583203981f7a288773e43403"
    },
    "input_schema": {
      "type": "object",
      "required": ["path"],
      "properties": {
        "path": {
          "type": "object",
          "required": ["idOrName"],
          "properties": {
            "idOrName": {
              "type": "string",
              "description": "The unique project identifier or the project name."
            }
          },
          "description": "Path parameters for the http request",
          "additionalProperties": false
        },
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "slug": {
              "type": "string",
              "description": "The Team slug to perform the request on behalf of."
            },
            "teamId": {
              "type": "string",
              "description": "The Team identifier to perform the request on behalf of."
            }
          },
          "description": "Optional query parameters for the http request",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "VERCEL__DELETE_PROJECT",
    "description": "Deletes a specific project by its id or name on Vercel.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "DELETE_PROJECT",
      "canonical_tool_description_hash": "3eec5a1efbc9d3549672ed8a5c3b6c5542c5b2eb6ebce9b858062bee02a68ea8",
      "canonical_tool_input_schema_hash": "54dce37ee0a91062bc3519ee0f41e17447a54601583203981f7a288773e43403"
    },
    "input_schema": {
      "type": "object",
      "required": ["path"],
      "properties": {
        "path": {
          "type": "object",
          "required": ["idOrName"],
          "properties": {
            "idOrName": {
              "type": "string",
              "description": "The unique project identifier or the project name."
            }
          },
          "description": "Path parameters for the http request",
          "additionalProperties": false
        },
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "slug": {
              "type": "string",
              "description": "The Team slug to perform the request on behalf of."
            },
            "teamId": {
              "type": "string",
              "description": "The Team identifier to perform the request on behalf of."
            }
          },
          "description": "Optional query parameters for the http request",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "VERCEL__DEPLOY",
    "description": "Creates a new deployment on Vercel. A vercel project must be created first.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "DEPLOY",
      "canonical_tool_description_hash": "47924a3b6e17d9a09dddf51a1688fe796506d5998b65295eb7f6be9d2b1cfba9",
      "canonical_tool_input_schema_hash": "59ec11e4cd0dd87cd4bb48541e9ba581f2560ca8790c66f148d1b43691d3409b"
    },
    "input_schema": {
      "type": "object",
      "required": ["body"],
      "properties": {
        "body": {
          "type": "object",
          "required": ["name", "gitSource", "project"],
          "properties": {
            "name": {
              "type": "string",
              "description": "A string with the project name used in the deployment URL."
            },
            "target": {
              "type": "string",
              "description": "Either not defined, 'staging', 'production', or a custom environment identifier. If omitted, the target will be preview."
            },
            "project": {
              "type": "string",
              "description": "The target project identifier in which the deployment will be created. Overrides name if defined."
            },
            "gitSource": {
              "type": "object",
              "required": ["org", "ref", "repo", "type"],
              "properties": {
                "org": {
                  "type": "string",
                  "description": "The organization/user of the repo."
                },
                "ref": {
                  "type": "string",
                  "description": "The branch or ref to deploy."
                },
                "sha": {
                  "type": "string",
                  "description": "The commit SHA to deploy."
                },
                "repo": {
                  "type": "string",
                  "description": "The repository name."
                },
                "type": {
                  "enum": ["github"],
                  "type": "string",
                  "description": "The Git provider type. Only 'github' is supported."
                }
              },
              "description": "Defines the Git Repository source to be deployed. Required for git deployments.",
              "additionalProperties": false
            },
            "deploymentId": {
              "type": "string",
              "description": "A deployment id for an existing deployment to redeploy."
            },
            "withLatestCommit": {
              "type": "boolean",
              "description": "When true and deploymentId is passed in, the sha from the previous deployment's gitSource is removed forcing the latest commit to be used."
            },
            "customEnvironmentSlugOrId": {
              "type": "string",
              "description": "Deploy to a custom environment, which will override the default environment."
            }
          },
          "description": "Request body parameters for deployment creation.",
          "additionalProperties": false
        },
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "slug": {
              "type": "string",
              "description": "The Team slug to perform the request on behalf of."
            },
            "teamId": {
              "type": "string",
              "description": "The Team identifier to perform the request on behalf of."
            },
            "forceNew": {
              "enum": ["0", "1"],
              "type": "string",
              "description": "Forces a new deployment even if there is a previous similar deployment."
            },
            "skipAutoDetectionConfirmation": {
              "enum": ["0", "1"],
              "type": "string",
              "description": "Allows to skip framework detection so the API would not fail to ask for confirmation."
            }
          },
          "description": "Optional query parameters for the http request.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "VERCEL__LIST_DEPLOYMENTS",
    "description": "List deployments under the authenticated user or team. If a deployment hasn't finished uploading (is incomplete), the url property will have a value of null.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "LIST_DEPLOYMENTS",
      "canonical_tool_description_hash": "f6e056cf09ac0ca3256de0cdc5cc8c47ed2e5c305189b405fb5702eaef8021b5",
      "canonical_tool_input_schema_hash": "5a25084e56a9e455be38566b02f210e693d7718a993f87e7561bd6db59334ab7"
    },
    "input_schema": {
      "type": "object",
      "required": [],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "app": {
              "type": "string",
              "description": "Name of the deployment."
            },
            "sha": {
              "type": "string",
              "description": "Filter deployments based on the SHA"
            },
            "slug": {
              "type": "string",
              "description": "The Team slug to perform the request on behalf of."
            },
            "limit": {
              "type": "number",
              "description": "Maximum number of deployments to list from a request."
            },
            "since": {
              "type": "number",
              "description": "Get Deployments created after this JavaScript timestamp."
            },
            "state": {
              "type": "string",
              "description": "Filter deployments based on their state (BUILDING, ERROR, INITIALIZING, QUEUED, READY, CANCELED)"
            },
            "until": {
              "type": "number",
              "description": "Get Deployments created before this JavaScript timestamp."
            },
            "users": {
              "type": "string",
              "description": "Filter out deployments based on users who have created the deployment."
            },
            "branch": {
              "type": "string",
              "description": "Filter deployments based on the branch name"
            },
            "target": {
              "type": "string",
              "description": "Filter deployments based on the environment."
            },
            "teamId": {
              "type": "string",
              "description": "The Team identifier to perform the request on behalf of."
            },
            "projectId": {
              "type": "string",
              "description": "Filter deployments from the given ID or name."
            },
            "rollbackCandidate": {
              "type": "boolean",
              "description": "Filter deployments based on their rollback candidacy"
            }
          },
          "description": "Optional query parameters for filtering deployments",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "VERCEL__GET_DEPLOYMENT",
    "description": "Retrieves information for a deployment either by supplying its ID (id property) or Hostname (url property). Additional details will be included when the authenticated user or team is an owner of the deployment.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "GET_DEPLOYMENT",
      "canonical_tool_description_hash": "34006d624d7c16012f4c76245a8bdfb8845f7bccb5d689c9966752ce2abdf0d7",
      "canonical_tool_input_schema_hash": "30deb4e4aa006f83eeddf670985a2b607d20f2d951e7ed6bbdfcf11814484066"
    },
    "input_schema": {
      "type": "object",
      "required": ["path"],
      "properties": {
        "path": {
          "type": "object",
          "required": ["idOrUrl"],
          "properties": {
            "idOrUrl": {
              "type": "string",
              "description": "The unique identifier or hostname of the deployment."
            }
          },
          "description": "Path parameters for the http request",
          "additionalProperties": false
        },
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "slug": {
              "type": "string",
              "description": "The Team slug to perform the request on behalf of."
            },
            "teamId": {
              "type": "string",
              "description": "The Team identifier to perform the request on behalf of."
            },
            "withGitRepoInfo": {
              "type": "string",
              "description": "Whether to add in gitRepo information."
            }
          },
          "description": "Optional query parameters for the http request",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "VERCEL__GET_DEPLOYMENT_EVENTS",
    "description": "Get the build logs of a deployment by deployment ID and build ID. It can work as an infinite stream of logs or as a JSON endpoint depending on the input parameters.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "GET_DEPLOYMENT_EVENTS",
      "canonical_tool_description_hash": "c3741032bcdf0d4b5d436254fd69ab64b04ce9f9ad5b242720de3058d4d4e245",
      "canonical_tool_input_schema_hash": "f2119df941a4eab4bc497e4844e56b476de4a34a65c7a3edeb0e6354a16f85c2"
    },
    "input_schema": {
      "type": "object",
      "required": ["path"],
      "properties": {
        "path": {
          "type": "object",
          "required": ["idOrUrl"],
          "properties": {
            "idOrUrl": {
              "type": "string",
              "description": "The unique identifier or hostname of the deployment."
            }
          },
          "description": "Path parameters for the http request",
          "additionalProperties": false
        },
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "name": {
              "type": "string",
              "description": "Deployment build ID."
            },
            "slug": {
              "type": "string",
              "description": "The Team slug to perform the request on behalf of."
            },
            "limit": {
              "type": "number",
              "description": "Maximum number of events to return. Provide -1 to return all available logs."
            },
            "since": {
              "type": "number",
              "description": "Timestamp for when build logs should be pulled from."
            },
            "until": {
              "type": "number",
              "description": "Timestamp for when the build logs should be pulled up until."
            },
            "builds": {
              "enum": [0, 1],
              "type": "number",
              "description": "Whether to include build information in the response."
            },
            "follow": {
              "enum": [0, 1],
              "type": "number",
              "description": "When enabled, this endpoint will return live events as they happen."
            },
            "teamId": {
              "type": "string",
              "description": "The Team identifier to perform the request on behalf of."
            },
            "delimiter": {
              "enum": [0, 1],
              "type": "number",
              "description": "Whether to include delimiter in the response."
            },
            "direction": {
              "enum": ["backward", "forward"],
              "type": "string",
              "default": "forward",
              "description": "Order of the returned events based on the timestamp."
            },
            "statusCode": {
              "type": "number",
              "description": "HTTP status code range to filter events by."
            }
          },
          "description": "Optional query parameters for filtering and controlling event output",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "VERCEL__ADD_DOMAIN_TO_PROJECT",
    "description": "Adds a domain to a Vercel project by project id or name.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "ADD_DOMAIN_TO_PROJECT",
      "canonical_tool_description_hash": "aed432faddbed666c64b63b3fdd65a1b3db2b9a8fd7732c4d83e30ccec28d245",
      "canonical_tool_input_schema_hash": "122e97547690321715ca110c0145cce192d2793e9fae91a6ece412b88eb15b18"
    },
    "input_schema": {
      "type": "object",
      "required": ["path", "body"],
      "properties": {
        "body": {
          "type": "object",
          "required": ["name"],
          "properties": {
            "name": {
              "type": "string",
              "description": "The project domain name."
            }
          },
          "description": "Request body parameters for adding a domain to a project.",
          "additionalProperties": false
        },
        "path": {
          "type": "object",
          "required": ["idOrName"],
          "properties": {
            "idOrName": {
              "type": "string",
              "description": "The unique project identifier or the project name."
            }
          },
          "description": "Path parameters for the http request",
          "additionalProperties": false
        },
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "slug": {
              "type": "string",
              "description": "The Team slug to perform the request on behalf of."
            },
            "teamId": {
              "type": "string",
              "description": "The Team identifier to perform the request on behalf of."
            }
          },
          "description": "Optional query parameters for the http request",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "VERCEL__RETRIEVE_PROJECT_DOMAINS",
    "description": "Retrieves the domains associated with a Vercel project by project id or name. Supports filtering by production, target, gitBranch, redirects, verified, limit, teamId, and slug.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "RETRIEVE_PROJECT_DOMAINS",
      "canonical_tool_description_hash": "8827e85172d0ea0223ad0ab560888cdda54f2dd3d794e06490d46aa98a087af8",
      "canonical_tool_input_schema_hash": "6e1b5ddd50b9a4f164a17f8fd69159f543cbadff93a659725d2cb62478c602bd"
    },
    "input_schema": {
      "type": "object",
      "required": ["path"],
      "properties": {
        "path": {
          "type": "object",
          "required": ["idOrName"],
          "properties": {
            "idOrName": {
              "type": "string",
              "description": "The unique project identifier or the project name."
            }
          },
          "description": "Path parameters for the http request",
          "additionalProperties": false
        },
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "slug": {
              "type": "string",
              "description": "The Team slug to perform the request on behalf of."
            },
            "limit": {
              "type": "number",
              "description": "Maximum number of domains to list from a request (max 100)."
            },
            "target": {
              "enum": ["production", "preview"],
              "type": "string",
              "description": "Filters on the target of the domain."
            },
            "teamId": {
              "type": "string",
              "description": "The Team identifier to perform the request on behalf of."
            },
            "verified": {
              "enum": ["true", "false"],
              "type": "string",
              "description": "Filters domains based on their verification status."
            },
            "gitBranch": {
              "type": "string",
              "description": "Filters domains based on specific branch."
            },
            "redirects": {
              "enum": ["true", "false"],
              "type": "string",
              "description": "Includes or excludes redirect project domains."
            },
            "production": {
              "enum": ["true", "false"],
              "type": "string",
              "description": "Filters only production domains when set to true."
            }
          },
          "description": "Optional query parameters for filtering domains.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "VERCEL__GET_A_PROJECT_DOMAIN",
    "description": "Gets a project domain by project id or name and domain name.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "GET_A_PROJECT_DOMAIN",
      "canonical_tool_description_hash": "7ec1be0a6a620183d4afb91c2b0418b8bf27760ddadbd1af403e2793ca9a356e",
      "canonical_tool_input_schema_hash": "04795e0b9172f623c06f6007272c0b8d02a96916e70aba87a07056b655941315"
    },
    "input_schema": {
      "type": "object",
      "required": ["path"],
      "properties": {
        "path": {
          "type": "object",
          "required": ["idOrName", "domain"],
          "properties": {
            "domain": {
              "type": "string",
              "description": "The project domain name."
            },
            "idOrName": {
              "type": "string",
              "description": "The unique project identifier or the project name."
            }
          },
          "description": "Path parameters for the http request",
          "additionalProperties": false
        },
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "slug": {
              "type": "string",
              "description": "The Team slug to perform the request on behalf of."
            },
            "teamId": {
              "type": "string",
              "description": "The Team identifier to perform the request on behalf of."
            }
          },
          "description": "Optional query parameters for the http request",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "VERCEL__REMOVE_DOMAIN_FROM_PROJECT",
    "description": "Removes a domain from a Vercel project by project id or name and domain name. Optionally removes all redirects to the domain.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "REMOVE_DOMAIN_FROM_PROJECT",
      "canonical_tool_description_hash": "e6e3ea46481aedaff68fb8112f6c40a3e8fe18bff35bd0e706c835beb27af80a",
      "canonical_tool_input_schema_hash": "79dede22d1868766fff96fead4ffe59b1d2e2f592bd1917deec5dd879412ec83"
    },
    "input_schema": {
      "type": "object",
      "required": ["path"],
      "properties": {
        "body": {
          "type": "object",
          "required": [],
          "properties": {
            "removeRedirects": {
              "type": "boolean",
              "description": "Whether to remove all domains from this project that redirect to the domain being removed."
            }
          },
          "description": "Optional body parameters for removing a domain from a project.",
          "additionalProperties": false
        },
        "path": {
          "type": "object",
          "required": ["idOrName", "domain"],
          "properties": {
            "domain": {
              "type": "string",
              "description": "The project domain name."
            },
            "idOrName": {
              "type": "string",
              "description": "The unique project identifier or the project name."
            }
          },
          "description": "Path parameters for the http request",
          "additionalProperties": false
        },
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "slug": {
              "type": "string",
              "description": "The Team slug to perform the request on behalf of."
            },
            "teamId": {
              "type": "string",
              "description": "The Team identifier to perform the request on behalf of."
            }
          },
          "description": "Optional query parameters for the http request",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "VERCEL__CREATE_ENVIRONMENT_VARIABLES",
    "description": "Create one or more environment variables for a project by passing its key, value, type and target and by specifying the project by either passing the project id or name in the URL. If you include upsert=true as a query parameter, a new environment variable will not be created if it already exists but, the existing variable's value will be updated.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CREATE_ENVIRONMENT_VARIABLES",
      "canonical_tool_description_hash": "9c2a71244e7c4e8f13bccf3a15e54d0c6866f96a5613c3e815b35ae714d79497",
      "canonical_tool_input_schema_hash": "101e4a35f0d278a06d39fd2b7eee06c5607ac0940e9f6aa50b1b448fa039f58f"
    },
    "input_schema": {
      "type": "object",
      "required": ["path", "body"],
      "properties": {
        "body": {
          "type": "object",
          "required": ["key", "value", "type", "target"],
          "properties": {
            "key": {
              "type": "string",
              "description": "Name of the ENV variable."
            },
            "type": {
              "enum": ["system", "secret", "encrypted", "plain", "sensitive"],
              "type": "string",
              "description": "Type of the ENV variable."
            },
            "value": {
              "type": "string",
              "description": "Value for the ENV variable."
            },
            "target": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "available options: production, preview, development"
              },
              "description": "Deployment Target or Targets in which the ENV variable will be used."
            }
          },
          "description": "Request body parameters for creating environment variables.",
          "additionalProperties": false
        },
        "path": {
          "type": "object",
          "required": ["idOrName"],
          "properties": {
            "idOrName": {
              "type": "string",
              "description": "The unique project identifier or the project name."
            }
          },
          "description": "Path parameters for the http request",
          "additionalProperties": false
        },
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "slug": {
              "type": "string",
              "description": "The Team slug to perform the request on behalf of."
            },
            "teamId": {
              "type": "string",
              "description": "The Team identifier to perform the request on behalf of."
            },
            "upsert": {
              "type": "string",
              "description": "Allow override of environment variable if it already exists."
            }
          },
          "description": "Optional query parameters for the http request",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "VERCEL__EDIT_ENVIRONMENT_VARIABLE",
    "description": "Edit a specific environment variable for a given project by passing the environment variable identifier and either passing the project id or name in the URL.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "EDIT_ENVIRONMENT_VARIABLE",
      "canonical_tool_description_hash": "fc59bd0188e06373498df2920e9ba951a3729dbf5a220ea716f516f7383887b3",
      "canonical_tool_input_schema_hash": "f6d4740a3207d29b12f50d01e1deb116fad2733b841a596c249f14e553500489"
    },
    "input_schema": {
      "type": "object",
      "required": ["path", "body"],
      "properties": {
        "body": {
          "type": "object",
          "required": [],
          "properties": {
            "key": {
              "type": "string",
              "description": "The name of the environment variable."
            },
            "type": {
              "enum": ["plain", "sensitive"],
              "type": "string",
              "description": "The type of environment variable."
            },
            "value": {
              "type": "string",
              "description": "The value of the environment variable."
            },
            "target": {
              "type": "array",
              "items": {
                "enum": ["production", "preview", "development"],
                "type": "string"
              },
              "description": "The target environment of the environment variable."
            },
            "comment": {
              "type": "string",
              "description": "A comment to add context on what this env var is for. Maximum length: 500."
            },
            "gitBranch": {
              "type": "string",
              "description": "If defined, the git branch of the environment variable (must have target=preview). Maximum length: 250."
            },
            "customEnvironmentIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The custom environments that the environment variable should be synced to."
            }
          },
          "description": "Request body parameters for editing an environment variable.",
          "additionalProperties": false
        },
        "path": {
          "type": "object",
          "required": ["idOrName", "id"],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique environment variable identifier."
            },
            "idOrName": {
              "type": "string",
              "description": "The unique project identifier or the project name."
            }
          },
          "description": "Path parameters for the http request",
          "additionalProperties": false
        },
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "slug": {
              "type": "string",
              "description": "The Team slug to perform the request on behalf of."
            },
            "teamId": {
              "type": "string",
              "description": "The Team identifier to perform the request on behalf of."
            }
          },
          "description": "Optional query parameters for the http request",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "VERCEL__REMOVE_ENVIRONMENT_VARIABLE",
    "description": "Delete a specific environment variable for a given project by passing the environment variable identifier and either passing the project id or name in the URL.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "REMOVE_ENVIRONMENT_VARIABLE",
      "canonical_tool_description_hash": "7d4d192b090163748a18f849e41ffa83baf791e0db19cc4aca84a2b001127a00",
      "canonical_tool_input_schema_hash": "5d90cd0b1ab7b5fb008cd4aeae17720430a04dc87a07b8fb755701732c3ccdbc"
    },
    "input_schema": {
      "type": "object",
      "required": ["path"],
      "properties": {
        "path": {
          "type": "object",
          "required": ["idOrName", "id"],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique environment variable identifier."
            },
            "idOrName": {
              "type": "string",
              "description": "The unique project identifier or the project name."
            }
          },
          "description": "Path parameters for the http request",
          "additionalProperties": false
        },
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "slug": {
              "type": "string",
              "description": "The Team slug to perform the request on behalf of."
            },
            "teamId": {
              "type": "string",
              "description": "The Team identifier to perform the request on behalf of."
            },
            "customEnvironmentId": {
              "type": "string",
              "description": "The unique custom environment identifier within the project."
            }
          },
          "description": "Optional query parameters for the http request",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "VERCEL__RETRIEVE_ENVIRONMENT_VARIABLES",
    "description": "Retrieve the environment variables for a given project by passing either the project id or name in the URL.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "RETRIEVE_ENVIRONMENT_VARIABLES",
      "canonical_tool_description_hash": "ac12459c1c96790beb633425f72c5687832baa639492463ac7c4eca0e5b64467",
      "canonical_tool_input_schema_hash": "9ebe5dd5f4afbaf6b2df95690cd0beefa0eaaacafc90482c7c2ee8fa7b79358f"
    },
    "input_schema": {
      "type": "object",
      "required": ["path"],
      "properties": {
        "path": {
          "type": "object",
          "required": ["idOrName"],
          "properties": {
            "idOrName": {
              "type": "string",
              "description": "The unique project identifier or the project name."
            }
          },
          "description": "Path parameters for the http request",
          "additionalProperties": false
        },
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "slug": {
              "type": "string",
              "description": "The Team slug to perform the request on behalf of."
            },
            "source": {
              "type": "string",
              "description": "The source that is calling the endpoint."
            },
            "teamId": {
              "type": "string",
              "description": "The Team identifier to perform the request on behalf of."
            },
            "decrypt": {
              "enum": ["true", "false"],
              "type": "string",
              "description": "If true, the environment variable value will be decrypted. (deprecated)"
            },
            "gitBranch": {
              "type": "string",
              "description": "If defined, the git branch of the environment variable to filter the results (must have target=preview). Maximum length: 250."
            },
            "customEnvironmentId": {
              "type": "string",
              "description": "The unique custom environment identifier within the project."
            },
            "customEnvironmentSlug": {
              "type": "string",
              "description": "The custom environment slug (name) within the project."
            }
          },
          "description": "Optional query parameters for the http request",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "VERCEL__RETRIEVE_DECRYPTED_ENVIRONMENT_VARIABLE",
    "description": "Retrieve the decrypted value of an environment variable for a given project.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "RETRIEVE_DECRYPTED_ENVIRONMENT_VARIABLE",
      "canonical_tool_description_hash": "0ff1d43062c567ffc1a7fddd2be9537b62fff2c5a6a9bd41e8f0e5fd1122ff71",
      "canonical_tool_input_schema_hash": "71e985e1687a0063a369c66597a0c4b4506d31981e5b3fc5876b91bfcce2948d"
    },
    "input_schema": {
      "type": "object",
      "required": ["path"],
      "properties": {
        "path": {
          "type": "object",
          "required": ["idOrName", "id"],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique ID for the environment variable to get the decrypted value."
            },
            "idOrName": {
              "type": "string",
              "description": "The unique project identifier or the project name."
            }
          },
          "description": "Path parameters for the http request",
          "additionalProperties": false
        },
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "slug": {
              "type": "string",
              "description": "The Team slug to perform the request on behalf of."
            },
            "teamId": {
              "type": "string",
              "description": "The Team identifier to perform the request on behalf of."
            }
          },
          "description": "Optional query parameters for the http request",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  }
]
