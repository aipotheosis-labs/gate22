[
  {
    "name": "COINMARKETCAP__CRYPTOCURRENCY_LISTINGS_LATEST",
    "description": "CoinMarketCap Listings Latest API returns a paginated list of all active cryptocurrencies with the latest market data. The default sort by 'market_cap' returns cryptocurrencies in order of CoinMarketCap's market cap rank, but you may configure sorting by other market ranking fields. Use the 'convert' option to return market values in multiple fiat and cryptocurrency conversions in the same call.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CRYPTOCURRENCY_LISTINGS_LATEST",
      "canonical_tool_description_hash": "5c8da769b72ef862239e1817204aaa935c852e3ab5409e6d75416fec174b5247",
      "canonical_tool_input_schema_hash": "8c83cc0a8333de35cf107eae9e023c386a54bc40bfe116bbe4fccd3d61911319"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "aux": {
              "type": "string",
              "default": "num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply",
              "description": "Optionally specify a comma-separated list of supplemental data fields to return."
            },
            "tag": {
              "enum": ["all", "defi", "filesharing"],
              "type": "string",
              "default": "all",
              "description": "The tag of cryptocurrency to include."
            },
            "sort": {
              "enum": [
                "market_cap",
                "name",
                "symbol",
                "date_added",
                "market_cap_strict",
                "price",
                "circulating_supply",
                "total_supply",
                "max_supply",
                "num_market_pairs",
                "volume_24h",
                "percent_change_1h",
                "percent_change_24h",
                "percent_change_7d",
                "market_cap_by_total_supply_strict",
                "volume_7d",
                "volume_30d"
              ],
              "type": "string",
              "default": "market_cap",
              "description": "What field to sort the list of cryptocurrencies by."
            },
            "limit": {
              "type": "integer",
              "default": 100,
              "maximum": 5000,
              "minimum": 1,
              "description": "Optionally specify the number of results to return. Range: 1 to 5000."
            },
            "start": {
              "type": "integer",
              "default": 1,
              "minimum": 1,
              "description": "Optionally offset the start (1-based index) of the paginated list of items to return."
            },
            "convert": {
              "type": "string",
              "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Basic tier users are limited to 1 convert options."
            },
            "sort_dir": {
              "enum": ["asc", "desc"],
              "type": "string",
              "description": "The direction in which to order cryptocurrencies against the specified sort."
            },
            "price_max": {
              "type": "number",
              "description": "Optionally specify a threshold of maximum USD price to filter results by."
            },
            "price_min": {
              "type": "number",
              "description": "Optionally specify a threshold of minimum USD price to filter results by."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This parameter cannot be used when convert is used. Basic tier users are limited to 1 convert options."
            },
            "market_cap_max": {
              "type": "number",
              "description": "Optionally specify a threshold of maximum market cap to filter results by."
            },
            "market_cap_min": {
              "type": "number",
              "description": "Optionally specify a threshold of minimum market cap to filter results by."
            },
            "volume_24h_max": {
              "type": "number",
              "description": "Optionally specify a threshold of maximum 24 hour USD volume to filter results by."
            },
            "volume_24h_min": {
              "type": "number",
              "description": "Optionally specify a threshold of minimum 24 hour USD volume to filter results by."
            },
            "cryptocurrency_type": {
              "enum": ["all", "coins", "tokens"],
              "type": "string",
              "default": "all",
              "description": "The type of cryptocurrency to include."
            },
            "circulating_supply_max": {
              "type": "number",
              "description": "Optionally specify a threshold of maximum circulating supply to filter results by."
            },
            "circulating_supply_min": {
              "type": "number",
              "description": "Optionally specify a threshold of minimum circulating supply to filter results by."
            },
            "percent_change_24h_max": {
              "type": "number",
              "minimum": -100,
              "description": "Optionally specify a threshold of maximum 24 hour percent change to filter results by."
            },
            "percent_change_24h_min": {
              "type": "number",
              "minimum": -100,
              "description": "Optionally specify a threshold of minimum 24 hour percent change to filter results by."
            },
            "unlocked_market_cap_max": {
              "type": "number",
              "description": "Optionally specify a threshold of maximum unlocked market cap to filter results by."
            },
            "unlocked_market_cap_min": {
              "type": "number",
              "description": "Optionally specify a threshold of minimum unlocked market cap to filter results by."
            },
            "self_reported_market_cap_max": {
              "type": "number",
              "description": "Optionally specify a threshold of maximum self reported market cap to filter results by."
            },
            "self_reported_market_cap_min": {
              "type": "number",
              "description": "Optionally specify a threshold of minimum self reported market cap to filter results by."
            },
            "unlocked_circulating_supply_max": {
              "type": "number",
              "description": "Optionally specify a threshold of maximum unlocked circulating supply to filter results by."
            },
            "unlocked_circulating_supply_min": {
              "type": "number",
              "description": "Optionally specify a threshold of minimum unlocked circulating supply to filter results by."
            },
            "self_reported_circulating_supply_max": {
              "type": "number",
              "description": "Optionally specify a threshold of maximum self reported circulating supply to filter results by."
            },
            "self_reported_circulating_supply_min": {
              "type": "number",
              "description": "Optionally specify a threshold of minimum self reported circulating supply to filter results by."
            }
          },
          "description": "Query parameters for retrieving the latest cryptocurrency listings with market data.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__CMC_CRYPTO_FEAR_GREED_LATEST",
    "description": "Returns the latest CMC Crypto Fear and Greed Index value along with its classification. This endpoint is updated every 15 minutes and is available on the Basic, Startup, Hobbyist, Standard, Professional, and Enterprise plans. Data provided by CoinMarketCap.com. Your product must display the attribution 'Data provided by CoinMarketCap.com' with a hyperlink to https://coinmarketcap.com.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CMC_CRYPTO_FEAR_GREED_LATEST",
      "canonical_tool_description_hash": "32d2e7ab95f4ee5a647c71fd645826f8c06a7116c81fa28eb8817496a0da5f9b",
      "canonical_tool_input_schema_hash": "44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a"
    },
    "input_schema": {}
  },
  {
    "name": "COINMARKETCAP__CRYPTOCURRENCY_AIRDROP",
    "description": "CoinMarketCap Airdrop API returns information about a single airdrop, including cryptocurrency metadata.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CRYPTOCURRENCY_AIRDROP",
      "canonical_tool_description_hash": "363fff09f58d78924beb60a28469d65abb9feac5d9dea4118781a175458d7a81",
      "canonical_tool_input_schema_hash": "714dc670d1fa88c23e06a12243af35cef3088193cd23c938d31cf77e2c81b79d"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": ["id"],
          "properties": {
            "id": {
              "type": "string",
              "description": "Airdrop Unique ID. This can be found using the Airdrops API."
            }
          },
          "description": "Query parameters",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__CRYPTOCURRENCY_AIRDROPS",
    "description": "CoinMarketCap Airdrops API returns a list of past, present, or future airdrops available on CoinMarketCap.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CRYPTOCURRENCY_AIRDROPS",
      "canonical_tool_description_hash": "4a02fa4abaded1a8254c1c64cd824eb4ffe12bb7285f0b4645a60fc87deda5bc",
      "canonical_tool_input_schema_hash": "e4cc232e623f65bb3d881e662903f6743a1c01f8a99f05d58ea488aececc4c41"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "id": {
              "type": "string",
              "description": "Filter airdrops by one cryptocurrency CoinMarketCap ID. Example: '1'."
            },
            "slug": {
              "type": "string",
              "description": "Alternatively filter airdrops by a cryptocurrency slug. Example: 'bitcoin'."
            },
            "limit": {
              "type": "integer",
              "default": 100,
              "maximum": 5000,
              "minimum": 1,
              "description": "Optionally specify the number of results to return. Range: 1 to 5000."
            },
            "start": {
              "type": "integer",
              "default": 1,
              "minimum": 1,
              "description": "Optionally offset the start (1-based index) of the paginated list of items to return."
            },
            "status": {
              "enum": ["ONGOING", "ENDED", "UPCOMING"],
              "type": "string",
              "description": "Filter airdrops by their status: ONGOING, ENDED, or UPCOMING."
            },
            "symbol": {
              "type": "string",
              "description": "Alternatively filter airdrops by a cryptocurrency symbol. Example: 'BTC'."
            }
          },
          "description": "Query parameters for retrieving airdrops.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__CRYPTOCURRENCY_CATEGORIES",
    "description": "Retrieve information about all coin categories available on CoinMarketCap, including a paginated list of cryptocurrency quotes and metadata for each category.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CRYPTOCURRENCY_CATEGORIES",
      "canonical_tool_description_hash": "feb130cdb9f26733063de689d6f6c3e1afe25718302f766ee54762a748efae8f",
      "canonical_tool_input_schema_hash": "1747551baf91f06240fa7303a796612113e616c979073749eafea63b680205df"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "id": {
              "type": "string",
              "description": "Filter categories by one or more comma-separated cryptocurrency CoinMarketCap IDs. Example: 1,2"
            },
            "slug": {
              "type": "string",
              "description": "Filter categories by a comma-separated list of cryptocurrency slugs. Example: bitcoin,ethereum"
            },
            "limit": {
              "type": "integer",
              "default": 100,
              "maximum": 5000,
              "minimum": 1,
              "description": "The number of results to return. Use this with the 'start' parameter to paginate."
            },
            "start": {
              "type": "integer",
              "default": 1,
              "minimum": 1,
              "description": "Optionally offset the start (1-based index) of the paginated list of items to return."
            },
            "symbol": {
              "type": "string",
              "description": "Filter categories by one or more comma-separated cryptocurrency symbols. Example: BTC,ETH"
            }
          },
          "description": "Query parameters for retrieving cryptocurrency categories.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__CRYPTOCURRENCY_CATEGORY",
    "description": "Returns information about a single coin category available on CoinMarketCap, including a paginated list of the cryptocurrency quotes and detailed metadata for the specified category. This endpoint is available on the Free, Hobbyist, Startup, Standard, Professional, and Enterprise plans, and data is updated only as needed (approximately every 30 seconds). The endpoint uses call credits calculated as 1 API call per request plus additional credits based on the number of cryptocurrencies returned and convert options used.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CRYPTOCURRENCY_CATEGORY",
      "canonical_tool_description_hash": "adb2a83d2e60197788bcf234a00fab152386c1d41629c9a734566d4be496ceed",
      "canonical_tool_input_schema_hash": "33702dce79075c3e8ceecc4815a026bf95e00b21116516011a0b48273606bda0"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": ["id"],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique Category ID. This parameter is required and identifies the coin category. The ID can be obtained using the Categories API. (COINMARKETCAP__CRYPTOCURRENCY_CATEGORIES)"
            },
            "limit": {
              "type": "integer",
              "default": 100,
              "maximum": 1000,
              "minimum": 1,
              "description": "Optionally specify the number of coins to return for the category. Acceptable values range from 1 to 1000. Use this parameter together with 'start' to control pagination size. Default is 100."
            },
            "start": {
              "type": "integer",
              "default": 1,
              "minimum": 1,
              "description": "Optionally offset the start (1-based index) of the paginated list of coins returned within the category. Must be an integer greater than or equal to 1. Default is 1."
            },
            "convert": {
              "type": "string",
              "default": "USD",
              "description": "Optionally calculate market quotes in up to 120 currencies by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first may require additional call credits. Defaults to 'USD' if not specified."
            }
          },
          "description": "Query parameters for retrieving a single coin category. This includes the mandatory Category ID (retrieved via the Categories API) and optional pagination and conversion parameters.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__CRYPTOCURRENCY_ID_MAP",
    "description": "Returns a mapping of all cryptocurrencies to unique CoinMarketCap IDs. This endpoint provides each cryptocurrency's standard identifiers\u2014such as name, symbol, and token_address\u2014for secure identification in your application. By default, it returns cryptocurrencies with actively tracked markets on supported exchanges. You can also retrieve inactive cryptocurrencies by passing listing_status=inactive or registered but untracked cryptocurrencies by passing listing_status=untracked (multiple comma-separated values are allowed). Additional auxiliary fields (such as platform, first_historical_data, last_historical_data, and is_active) can be included via the aux parameter to slim down the payload or provide extra details. Mapping data is updated as needed (approximately every 30 seconds) and this endpoint is available on Basic, Hobbyist, Startup, Standard, Professional, and Enterprise plans. It consumes 1 API call credit per request regardless of query size.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CRYPTOCURRENCY_ID_MAP",
      "canonical_tool_description_hash": "9a98c6f29ba3d0863115a32d80356390b7bf8fbb65624ac5b9ca037201266a99",
      "canonical_tool_input_schema_hash": "7a51cf0324379e4ed151f9d4c2919225bdaa58817da670d48da057f0cf7a1b47"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "aux": {
              "type": "string",
              "default": "platform,first_historical_data,last_historical_data,is_active",
              "description": "Optionally specify a comma-separated list of supplemental data fields to return with each cryptocurrency. By default, the response includes 'platform,first_historical_data,last_historical_data,is_active'. To include all available auxiliary fields, you can pass: 'platform,first_historical_data,last_historical_data,is_active,status'."
            },
            "sort": {
              "enum": ["id", "cmc_rank"],
              "type": "string",
              "default": "id",
              "description": "Determines the field by which to sort the list of cryptocurrencies. Acceptable values are 'id' or 'cmc_rank'. Default is 'id'."
            },
            "limit": {
              "type": "integer",
              "default": 5000,
              "maximum": 5000,
              "minimum": 1,
              "description": "Optionally specify the number of results to return. Acceptable values range from 1 to 5000. Use this parameter together with 'start' to control the pagination size."
            },
            "start": {
              "type": "integer",
              "default": 1,
              "minimum": 1,
              "description": "Optionally offset the start of the paginated list of items to return. This is a 1-based index and must be an integer greater than or equal to 1. Default is 1."
            },
            "symbol": {
              "type": "string",
              "description": "Optionally pass a comma-separated list of cryptocurrency symbols to specifically return CoinMarketCap IDs for. If this option is provided, all other query parameters (listing_status, start, limit, sort, aux) will be ignored."
            },
            "listing_status": {
              "type": "string",
              "default": "active",
              "description": "Determines which cryptocurrencies are returned based on their market activity. By default, 'active' is used to return only cryptocurrencies with actively tracked markets. Pass 'inactive' to retrieve cryptocurrencies that are no longer active, or 'untracked' to get those listed but not meeting the methodology requirements for tracked markets. Multiple comma-separated values are allowed."
            }
          },
          "description": "Query parameters for retrieving a mapping of all cryptocurrencies to their unique CoinMarketCap IDs. By default, only active cryptocurrencies (with tracked markets) are returned. You can modify this behavior with the listing_status parameter. Other parameters allow you to paginate the results, sort them by a specific field, filter by cryptocurrency symbols (which will override other query options), and select additional auxiliary fields to be returned.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__CRYPTOCURRENCY_METADATA_V2",
    "description": "Returns all static metadata available for one or more cryptocurrencies. This endpoint provides detailed information such as the cryptocurrency logo, description, official website URL, social links, and links to technical documentation. Identification can be performed using one or more of the following: CoinMarketCap IDs, slugs, symbols, or a contract address. At least one identifier (id, slug, symbol, or address) is required. Note that when requesting by symbol (which is not unique), the response will include an array of objects for each symbol. The skip_invalid flag allows the request to bypass validation errors for invalid cryptocurrencies, and the aux parameter can be used to limit or expand the supplemental data fields returned. This endpoint is available on Basic, Startup, Hobbyist, Standard, Professional, and Enterprise plans. Static data is updated as needed (approximately every 30 seconds), and plan credit use is 1 call credit per 100 cryptocurrencies returned (rounded up).",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CRYPTOCURRENCY_METADATA_V2",
      "canonical_tool_description_hash": "0b6d78fd615f476daf38965e54f7b8b6b16651606378b563d4f4288279d7ffae",
      "canonical_tool_input_schema_hash": "9b8d7b04ba81699a05e96b055d79ee8df73f9d94d0b53c5650fd1fbc0c93b07e"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "id": {
              "type": "string",
              "description": "One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: '1,2'. These IDs uniquely identify cryptocurrencies in the CoinMarketCap database."
            },
            "aux": {
              "type": "string",
              "default": "urls,logo,description,tags,platform,date_added,notice",
              "description": "A comma-separated list of supplemental data fields to include in the response. The default is 'urls,logo,description,tags,platform,date_added,notice'. To include all auxiliary fields, you can pass 'urls,logo,description,tags,platform,date_added,notice,status'."
            },
            "slug": {
              "type": "string",
              "description": "A comma-separated list of cryptocurrency slugs. Slugs are web-friendly versions of cryptocurrency names. Example: 'bitcoin,ethereum'."
            },
            "symbol": {
              "type": "string",
              "description": "One or more comma-separated cryptocurrency symbols (ticker symbols). Example: 'BTC,ETH'. When requested by symbol, the response will include an array of objects since symbols are not unique."
            },
            "address": {
              "type": "string",
              "description": "A contract address for a cryptocurrency token. Example: '0xc40af1e4fecfa05ce6bab79dcd8b373d2e436c4e'. Use this parameter when you want to retrieve metadata for a token deployed on a specific blockchain."
            },
            "skip_invalid": {
              "type": "boolean",
              "default": false,
              "description": "Set to true to relax request validation rules. When true, invalid cryptocurrency identifiers will be skipped rather than causing an error, allowing valid records to be returned. Default is false."
            }
          },
          "description": "Query parameters for retrieving static metadata for one or more cryptocurrencies. At least one identifier is required to specify which cryptocurrencies to retrieve. Use the 'id' for unique CoinMarketCap IDs, 'slug' for URL-friendly names, 'symbol' for ticker symbols (note: this may return multiple entries per symbol), or 'address' for a contract address. The skip_invalid flag relaxes validation errors for invalid identifiers, and the aux parameter controls which supplemental fields are included in the response.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__CRYPTOCURRENCY_LISTINGS_HISTORICAL",
    "description": "CoinMarketCap Cryptocurrency Listings Historical API returns a ranked and sorted list of all cryptocurrencies for a historical UTC date. Daily snapshots reflect market data at the end of each UTC day.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CRYPTOCURRENCY_LISTINGS_HISTORICAL",
      "canonical_tool_description_hash": "374febee966318be7f693f7ed86315dd960a037f2598f534b7e83fc1d371df81",
      "canonical_tool_input_schema_hash": "417ce3af56f13e71706a5feccb30cc4a52e0ef717958b073396f851ae6d1c1f2"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": ["date"],
          "properties": {
            "aux": {
              "type": "string",
              "default": "platform,tags,date_added,circulating_supply,total_supply,max_supply,cmc_rank,num_market_pairs",
              "description": "Optionally specify a comma-separated list of supplemental data fields to return."
            },
            "date": {
              "type": "string",
              "description": "Date (Unix timestamp or ISO 8601) to reference day of snapshot. Recommended format: 'YYYY-MM-DD'."
            },
            "sort": {
              "enum": [
                "cmc_rank",
                "name",
                "symbol",
                "market_cap",
                "price",
                "circulating_supply",
                "total_supply",
                "max_supply",
                "num_market_pairs",
                "volume_24h",
                "percent_change_1h",
                "percent_change_24h",
                "percent_change_7d"
              ],
              "type": "string",
              "default": "cmc_rank",
              "description": "Field to sort the list of cryptocurrencies by."
            },
            "limit": {
              "type": "integer",
              "default": 100,
              "maximum": 5000,
              "minimum": 1,
              "description": "Optionally specify the number of results to return. Range: 1 to 5000."
            },
            "start": {
              "type": "integer",
              "default": 1,
              "minimum": 1,
              "description": "Optionally offset the start (1-based index) of the paginated list of items to return."
            },
            "convert": {
              "type": "string",
              "description": "Optionally calculate market quotes in up to 120 currencies by passing a comma-separated list of currency symbols."
            },
            "sort_dir": {
              "enum": ["asc", "desc"],
              "type": "string",
              "default": "asc",
              "description": "The direction in which to order cryptocurrencies against the specified sort."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol."
            },
            "cryptocurrency_type": {
              "enum": ["all", "coins", "tokens"],
              "type": "string",
              "default": "all",
              "description": "The type of cryptocurrency to include."
            }
          },
          "description": "Query parameters for retrieving historical cryptocurrency listings.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__CRYPTOCURRENCY_LISTINGS_NEW",
    "description": "CoinMarketCap Cryptocurrency Listings New API returns a paginated list of the most recently added cryptocurrencies.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CRYPTOCURRENCY_LISTINGS_NEW",
      "canonical_tool_description_hash": "6f487ebddccb5c58c3fba07118007f10954ba283da7c24e40c81b0a75bf749f1",
      "canonical_tool_input_schema_hash": "c49abe6d31aff82c5b4152465a67ded29c7aaaf9f7ad978b01f8897e9d6e3c04"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "limit": {
              "type": "integer",
              "default": 100,
              "maximum": 5000,
              "minimum": 1,
              "description": "Optionally specify the number of results to return. Range: 1 to 5000."
            },
            "start": {
              "type": "integer",
              "default": 1,
              "minimum": 1,
              "description": "Optionally offset the start (1-based index) of the paginated list of items to return."
            },
            "convert": {
              "type": "string",
              "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols."
            },
            "sort_dir": {
              "enum": ["asc", "desc"],
              "type": "string",
              "default": "asc",
              "description": "The direction in which to order cryptocurrencies against the specified sort."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol."
            }
          },
          "description": "Query parameters for retrieving recently added cryptocurrencies.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__CRYPTOCURRENCY_TRENDING_GAINERS_LOSERS",
    "description": "CoinMarketCap Cryptocurrency Trending Gainers & Losers API returns a paginated list of trending cryptocurrencies sorted by the largest price gains or losses.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CRYPTOCURRENCY_TRENDING_GAINERS_LOSERS",
      "canonical_tool_description_hash": "f8e06888ba1f3c61869fc854ae1cc69ebcd7b5c162810ab0ab78ada4ad489f25",
      "canonical_tool_input_schema_hash": "95f7d179ddfc6e206cf8c2b0860540fe313a90cb5b3d3a7994a6e42deaa5951a"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "sort": {
              "enum": ["percent_change_24h"],
              "type": "string",
              "default": "percent_change_24h",
              "description": "What field to sort the list of cryptocurrencies by."
            },
            "limit": {
              "type": "integer",
              "default": 100,
              "maximum": 1000,
              "minimum": 1,
              "description": "Optionally specify the number of results to return. Range: 1 to 1000."
            },
            "start": {
              "type": "integer",
              "default": 1,
              "minimum": 1,
              "description": "Optionally offset the start (1-based index) of the paginated list of items to return."
            },
            "convert": {
              "type": "string",
              "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols."
            },
            "sort_dir": {
              "enum": ["asc", "desc"],
              "type": "string",
              "default": "asc",
              "description": "The direction in which to order cryptocurrencies against the specified sort."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol."
            },
            "time_period": {
              "enum": ["1h", "24h", "7d", "30d"],
              "type": "string",
              "default": "24h",
              "description": "Adjusts the overall window of time for the biggest gainers and losers."
            }
          },
          "description": "Query parameters for retrieving trending gainers & losers cryptocurrencies.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__CRYPTOCURRENCY_TRENDING_LATEST",
    "description": "CoinMarketCap Cryptocurrency Trending Latest API returns a paginated list of all trending cryptocurrency market data, determined and sorted by CoinMarketCap search volume.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CRYPTOCURRENCY_TRENDING_LATEST",
      "canonical_tool_description_hash": "c56d97ada828bb02ac74d039ac2f370e313b13e49f21f7666fa67fe1bf2e710e",
      "canonical_tool_input_schema_hash": "d486510687d6753fcaa9152a805ce2dcc132b70567b41b635830d868f3875d66"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "limit": {
              "type": "integer",
              "default": 100,
              "maximum": 1000,
              "minimum": 1,
              "description": "Optionally specify the number of results to return. Range: 1 to 1000."
            },
            "start": {
              "type": "integer",
              "default": 1,
              "minimum": 1,
              "description": "Optionally offset the start (1-based index) of the paginated list of items to return."
            },
            "convert": {
              "type": "string",
              "description": "Optionally calculate market quotes in up to 120 currencies by passing a comma-separated list of cryptocurrency or fiat currency symbols."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol."
            },
            "time_period": {
              "enum": ["24h", "30d", "7d"],
              "type": "string",
              "default": "24h",
              "description": "Adjusts the overall window of time for the latest trending coins."
            }
          },
          "description": "Query parameters for retrieving trending cryptocurrency market data sorted by search volume.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__CRYPTOCURRENCY_TRENDING_MOST_VISITED",
    "description": "CoinMarketCap Cryptocurrency Trending Most Visited API returns a paginated list of all trending cryptocurrency market data, determined and sorted by traffic to coin detail pages.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CRYPTOCURRENCY_TRENDING_MOST_VISITED",
      "canonical_tool_description_hash": "8ea98d7c6966933cec17b3a6e544b1c83c0c6cac23ce45384d5e32c6aa7c11f5",
      "canonical_tool_input_schema_hash": "fa4a500dbbc5c4ce8e192c8a91883bd4a19979b26698c269213e0154d567b19c"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "limit": {
              "type": "integer",
              "default": 100,
              "maximum": 1000,
              "minimum": 1,
              "description": "Optionally specify the number of results to return. Range: 1 to 1000."
            },
            "start": {
              "type": "integer",
              "default": 1,
              "minimum": 1,
              "description": "Optionally offset the start (1-based index) of the paginated list of items to return."
            },
            "convert": {
              "type": "string",
              "description": "Optionally calculate market quotes in up to 120 currencies by passing a comma-separated list of cryptocurrency or fiat currency symbols."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol."
            },
            "time_period": {
              "enum": ["24h", "30d", "7d"],
              "type": "string",
              "default": "24h",
              "description": "Adjusts the overall window of time for most visited currencies."
            }
          },
          "description": "Query parameters for retrieving the most visited trending cryptocurrencies.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__CRYPTOCURRENCY_MARKET_PAIRS_LATEST",
    "description": "CoinMarketCap Market Pairs Latest v2 API lists all active market pairs that CoinMarketCap tracks for a given cryptocurrency or fiat currency. It returns the latest price and volume information for each market pair.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CRYPTOCURRENCY_MARKET_PAIRS_LATEST",
      "canonical_tool_description_hash": "ea02872f8762518647925d25dd228205f86464c84f592ce1fce40a399d78e1f1",
      "canonical_tool_input_schema_hash": "c99a91a9e1bea87c524b8c4111fc011afbe8266b395ada5ea3f0fd4883b394e9"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "id": {
              "type": "string",
              "description": "A cryptocurrency or fiat currency by CoinMarketCap ID to list market pairs for. Example: \"1\"."
            },
            "aux": {
              "type": "string",
              "default": "num_market_pairs,category,fee_type",
              "description": "Optionally specify a comma-separated list of supplemental data fields to return. For minimal auxiliary fields, use \"num_market_pairs,category,fee_type\"."
            },
            "slug": {
              "type": "string",
              "description": "Alternatively pass a cryptocurrency by slug. Example: \"bitcoin\"."
            },
            "sort": {
              "enum": [
                "volume_24h_strict",
                "cmc_rank",
                "cmc_rank_advanced",
                "effective_liquidity",
                "market_score",
                "market_reputation"
              ],
              "type": "string",
              "default": "volume_24h_strict",
              "description": "Optionally specify the sort order of markets returned. By default a strict sort on 24-hour reported volume is applied."
            },
            "limit": {
              "type": "integer",
              "default": 100,
              "maximum": 5000,
              "minimum": 1,
              "description": "Optionally specify the number of results to return. Range: 1 to 5000."
            },
            "start": {
              "type": "integer",
              "default": 1,
              "minimum": 1,
              "description": "Optionally offset the start (1-based index) of the paginated list of items to return."
            },
            "symbol": {
              "type": "string",
              "description": "Alternatively pass a cryptocurrency by symbol. Fiat currencies are not supported by this field. Example: \"BTC\"."
            },
            "convert": {
              "type": "string",
              "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols."
            },
            "category": {
              "enum": ["all", "spot", "derivatives", "otc", "perpetual"],
              "type": "string",
              "default": "all",
              "description": "The category of trading this market falls under."
            },
            "fee_type": {
              "enum": ["all", "percentage", "no-fees", "transactional-mining", "unknown"],
              "type": "string",
              "default": "all",
              "description": "The fee type the exchange enforces for this market."
            },
            "sort_dir": {
              "enum": ["asc", "desc"],
              "type": "string",
              "default": "desc",
              "description": "Optionally specify the sort direction of markets returned."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol."
            },
            "matched_id": {
              "type": "string",
              "description": "Optionally include one or more fiat or cryptocurrency IDs to filter market pairs by. For example, ?id=1&matched_id=2781 would only return BTC markets that matched: \"BTC/USD\" or \"USD/BTC\". This parameter cannot be used when matched_symbol is used."
            },
            "matched_symbol": {
              "type": "string",
              "description": "Optionally include one or more fiat or cryptocurrency symbols to filter market pairs by. For example, ?symbol=BTC&matched_symbol=USD would only return BTC markets that matched: \"BTC/USD\" or \"USD/BTC\". This parameter cannot be used when matched_id is used."
            }
          },
          "description": "Query parameters for retrieving the latest market pairs.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__CRYPTOCURRENCY_OHLCV_HISTORICAL_V2",
    "description": "CoinMarketCap OHLCV Historical v2 API returns historical OHLCV data along with market cap for one or more cryptocurrencies using time interval parameters. It supports daily and hourly periods along with flexible interval sampling.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CRYPTOCURRENCY_OHLCV_HISTORICAL_V2",
      "canonical_tool_description_hash": "99cf38b4c98ec680f0b223f0285ed1a831fad2cc4d2e88f99321e9f35823affe",
      "canonical_tool_input_schema_hash": "35752a01566f6497f59c4bc33459a40a9d48fa07641a47c70b7c1d8aa3787679"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "id": {
              "type": "string",
              "description": "One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \"1,1027\"."
            },
            "slug": {
              "type": "string",
              "description": "Alternatively, a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"."
            },
            "count": {
              "type": "number",
              "default": 10,
              "maximum": 10000,
              "minimum": 1,
              "description": "Limit the number of time periods to return. The default is 10 items. Query limit is between 1 and 10000."
            },
            "symbol": {
              "type": "string",
              "description": "Alternatively, one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one of 'id', 'slug', or 'symbol' is required."
            },
            "convert": {
              "type": "string",
              "description": "Optionally calculate market quotes in up to 3 additional fiat or cryptocurrency currencies (comma-separated). Default market quotes are in USD."
            },
            "interval": {
              "type": "string",
              "description": "Adjust the frequency that 'time_period' is sampled. Supported values include calendar intervals (\"daily\", \"hourly\", \"weekly\", \"monthly\", \"yearly\") and relative intervals (e.g., \"1h\", \"2h\", \"1d\", \"7d\", \"30d\", etc.)."
            },
            "time_end": {
              "type": "string",
              "description": "Timestamp (Unix or ISO 8601) to stop returning OHLCV time periods for (inclusive). Optional; defaults to current time if not provided. For daily data, use a date format like \"2018-09-19\" (without time)."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. Cannot be used when 'convert' is provided."
            },
            "time_start": {
              "type": "string",
              "description": "Timestamp (Unix or ISO 8601) to start returning OHLCV time periods for. For daily data, use a date format like \"2018-09-19\" (without time)."
            },
            "time_period": {
              "enum": ["daily", "hourly"],
              "type": "string",
              "default": "daily",
              "description": "Time period to return OHLCV data for. The default is \"daily\". If hourly, the open will be 01:00 and the close 01:59."
            },
            "skip_invalid": {
              "type": "boolean",
              "default": true,
              "description": "Pass true to relax validation rules. When requesting multiple cryptocurrencies, invalid lookups will be skipped. Defaults to true."
            }
          },
          "description": "Query parameters for retrieving historical OHLCV data.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__CRYPTOCURRENCY_OHLCV_LATEST_V2",
    "description": "CoinMarketCap OHLCV Latest v2 API returns the latest OHLCV (Open, High, Low, Close, Volume) market values for one or more cryptocurrencies for the current UTC day. Since the current day is active, these values are updated frequently. For finalized OHLCV data for the previous UTC day and historical values, use the /cryptocurrency/ohlcv/historical endpoint.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CRYPTOCURRENCY_OHLCV_LATEST_V2",
      "canonical_tool_description_hash": "1398080c61d5aab2e4cfdc9ddc827d409ec71f6a7dd7c8033147983a2672f679",
      "canonical_tool_input_schema_hash": "2d012d945c8060bf6b41f0876c09882c9a5ab581954ae46e600359e1551e8dc8"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "id": {
              "type": "string",
              "description": "One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: \"1,2\"."
            },
            "symbol": {
              "type": "string",
              "description": "Alternatively, one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\"."
            },
            "convert": {
              "type": "string",
              "description": "Optionally calculate market quotes in up to 120 currencies by passing a comma-separated list of currency symbols."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. Cannot be used when 'convert' is provided."
            },
            "skip_invalid": {
              "type": "boolean",
              "default": true,
              "description": "Pass true to relax validation rules. When requesting records on multiple cryptocurrencies, invalid lookups will be skipped. Defaults to true."
            }
          },
          "description": "Query parameters for retrieving the latest OHLCV data. At least one of 'id' or 'symbol' is required.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__CRYPTOCURRENCY_PRICE_PERFORMANCE_STATS_LATEST_V2",
    "description": "CoinMarketCap Price Performance Stats v2 API returns price performance statistics for one or more cryptocurrencies, including launch price ROI and all-time high/low values. By default stats are returned for the 'all_time' period, but additional rolling time periods (e.g., yesterday, 24h, 7d, etc.) can be requested.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CRYPTOCURRENCY_PRICE_PERFORMANCE_STATS_LATEST_V2",
      "canonical_tool_description_hash": "0d9bdb427a0587e30e23faedc0f68249d3d88485af824badfa138cdae9325180",
      "canonical_tool_input_schema_hash": "ddc19d176e98bce28a12f8c047abf24af5341d8801eebd2d860a2a30f374b6a6"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "id": {
              "type": "string",
              "description": "One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: \"1,2\"."
            },
            "slug": {
              "type": "string",
              "description": "Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"."
            },
            "symbol": {
              "type": "string",
              "description": "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one of 'id', 'slug', or 'symbol' is required."
            },
            "convert": {
              "type": "string",
              "description": "Optionally calculate quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an extra call credit."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate quotes by CoinMarketCap ID instead of symbol. Cannot be used when 'convert' is provided."
            },
            "time_period": {
              "type": "string",
              "description": "Specify one or more comma-delimited time periods to return stats for. Default is \"all_time\". For example: \"all_time,yesterday,24h,7d,30d,90d,365d\"."
            },
            "skip_invalid": {
              "type": "boolean",
              "default": true,
              "description": "Pass true to relax request validation rules. If set to true, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned."
            }
          },
          "description": "Query parameters for retrieving price performance statistics.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__CRYPTOCURRENCY_QUOTES_HISTORICAL_V2",
    "description": "CoinMarketCap Quotes Historical v2 API returns an interval of historic market quotes for one or more cryptocurrencies based on provided time and interval parameters. A historic quote for every interval period between time_start and time_end will be returned.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CRYPTOCURRENCY_QUOTES_HISTORICAL_V2",
      "canonical_tool_description_hash": "688d5bd65b05efd67258e3ae73e81981e9bcc0338481c45e6d8e657677cfd53a",
      "canonical_tool_input_schema_hash": "a0718113093474197116bdc54ed05113d76082d849334f75641998d1c2341861"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "id": {
              "type": "string",
              "description": "One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \"1,2\"."
            },
            "aux": {
              "type": "string",
              "default": "price,volume,market_cap,circulating_supply,total_supply,quote_timestamp,is_active,is_fiat",
              "description": "Optionally specify a comma-separated list of supplemental data fields to return. Default: \"price,volume,market_cap,circulating_supply,total_supply,quote_timestamp,is_active,is_fiat\"."
            },
            "count": {
              "type": "number",
              "default": 10,
              "maximum": 10000,
              "minimum": 1,
              "description": "The number of interval periods to return results for. Default is 10. Range: 1 to 10000."
            },
            "symbol": {
              "type": "string",
              "description": "Alternatively, one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one of 'id' or 'symbol' is required."
            },
            "convert": {
              "type": "string",
              "description": "Optionally calculate market quotes in up to 3 additional fiat currencies or cryptocurrencies by passing a comma-separated list of symbols. Defaults to USD if not provided."
            },
            "interval": {
              "type": "string",
              "description": "Interval of time to return data points for. Supported values include calendar intervals (e.g., \"daily\", \"hourly\", \"weekly\", \"monthly\", \"yearly\") and relative intervals (e.g., \"5m\", \"10m\", \"15m\", \"30m\", \"45m\", \"1h\", \"2h\", \"3h\", \"4h\", \"6h\", \"12h\", \"24h\", \"1d\", \"2d\", \"3d\", \"7d\", \"14d\", \"15d\", \"30d\", \"60d\", \"90d\", \"365d\")."
            },
            "time_end": {
              "type": "string",
              "description": "Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional; if not provided, defaults to the current time."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. Cannot be used when 'convert' is provided."
            },
            "time_start": {
              "type": "string",
              "description": "Timestamp (Unix or ISO 8601) to start returning quotes for. Optional; if not provided, quotes are returned in reverse order from time_end."
            },
            "skip_invalid": {
              "type": "boolean",
              "default": true,
              "description": "Pass true to relax request validation rules. Defaults to true."
            }
          },
          "description": "Query parameters for retrieving historical market quotes.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__CRYPTOCURRENCY_QUOTES_LATEST_V2",
    "description": "CoinMarketCap Quotes Latest v2 API returns the latest market quote for one or more cryptocurrencies. Use the 'convert' option to return market values in multiple fiat and cryptocurrency conversions in the same call.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CRYPTOCURRENCY_QUOTES_LATEST_V2",
      "canonical_tool_description_hash": "9621ea55697ea6ecab3c58a092b032c3efadfe2997081414744abd4cec5ff932",
      "canonical_tool_input_schema_hash": "94c5d3577c2be5ababda2fe114b2408f9493877b68db34091b25737a76759537"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "id": {
              "type": "string",
              "description": "One or more comma-separated cryptocurrency CoinMarketCap IDs. Example: \"1,2\"."
            },
            "aux": {
              "type": "string",
              "description": "Optionally specify a comma-separated list of supplemental data fields to return. Default: \"num_market_pairs,cmc_rank,date_added,tags,platform,max_supply,circulating_supply,total_supply,is_active,is_fiat\". Additional auxiliary fields can also be requested."
            },
            "slug": {
              "type": "string",
              "description": "Alternatively pass a comma-separated list of cryptocurrency slugs. Example: \"bitcoin,ethereum\"."
            },
            "symbol": {
              "type": "string",
              "description": "Alternatively pass one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one of 'id', 'slug', or 'symbol' is required."
            },
            "convert": {
              "type": "string",
              "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit. Basic tier users are limited to 1 convert options."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. Ex: \"convert_id=1,2781\" would replace \"convert=BTC,USD\" in your query. This parameter cannot be used when convert is used. Basic tier users are limited to 1 convert options."
            },
            "skip_invalid": {
              "type": "boolean",
              "default": true,
              "description": "Pass true to relax request validation rules. When requesting records on multiple cryptocurrencies, invalid lookups will be skipped allowing valid cryptocurrencies to still be returned."
            }
          },
          "description": "Query parameters for retrieving the latest market quotes.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__CRYPTOCURRENCY_QUOTES_HISTORICAL_V3",
    "description": "CoinMarketCap Quotes Historical v3 API returns an interval of historic market quotes for one or more cryptocurrencies based on provided time and interval parameters. A historic quote for every interval period between time_start and time_end will be returned.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CRYPTOCURRENCY_QUOTES_HISTORICAL_V3",
      "canonical_tool_description_hash": "c3f10caf32b143035ed5294b2a9668615e3c6edd9b3fe8ac039b6a2d55e7c2a5",
      "canonical_tool_input_schema_hash": "d06dd293a7bdde1a1a4fae3a873d458ff645299b5195e9518f642940c7a89cd5"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "id": {
              "type": "string",
              "description": "One or more comma-separated CoinMarketCap cryptocurrency IDs. Example: \"1,2\"."
            },
            "aux": {
              "type": "string",
              "default": "price,volume,market_cap,circulating_supply,total_supply,quote_timestamp,is_active,is_fiat",
              "description": "Optionally specify a comma-separated list of supplemental data fields to return. Default: \"price,volume,market_cap,circulating_supply,total_supply,quote_timestamp,is_active,is_fiat\"."
            },
            "count": {
              "type": "number",
              "default": 10,
              "maximum": 10000,
              "minimum": 1,
              "description": "The number of interval periods to return results for. Default is 10. Range: 1 to 10000."
            },
            "symbol": {
              "type": "string",
              "description": "Alternatively, one or more comma-separated cryptocurrency symbols. Example: \"BTC,ETH\". At least one of 'id' or 'symbol' is required."
            },
            "convert": {
              "type": "string",
              "description": "By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies by passing a comma-separated list of symbols."
            },
            "interval": {
              "type": "string",
              "description": "Interval of time to return data points for. Supported values include calendar intervals (e.g., \"daily\", \"hourly\", \"weekly\", \"monthly\", \"yearly\") and relative intervals (e.g., \"5m\", \"10m\", \"15m\", \"30m\", \"45m\", \"1h\", \"2h\", \"3h\", \"4h\", \"6h\", \"12h\", \"24h\", \"1d\", \"2d\", \"3d\", \"7d\", \"14d\", \"15d\", \"30d\", \"60d\", \"90d\", \"365d\")."
            },
            "time_end": {
              "type": "string",
              "description": "Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional; if not provided, defaults to the current time."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. This option cannot be used when 'convert' is provided."
            },
            "time_start": {
              "type": "string",
              "description": "Timestamp (Unix or ISO 8601) to start returning quotes for. Optional; if not provided, quotes are returned in reverse order from time_end."
            },
            "skip_invalid": {
              "type": "boolean",
              "default": true,
              "description": "Pass true to relax request validation rules. When requesting records on multiple cryptocurrencies, invalid lookups will be skipped. Defaults to true."
            }
          },
          "description": "Query parameters for retrieving historical market quotes (v3).",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__DEX_METADATA",
    "description": "Returns all static metadata for one or more decentralized exchanges (DEXes) tracked by CoinMarketCap. This endpoint provides details such as the exchange's launch date, logo URL, official website, social links, and market fee documentation URL. You must provide one or more exchange IDs (as a comma-separated string) via the 'id' parameter. Optionally, you can specify additional supplemental data fields using the 'aux' parameter. Valid 'aux' values include: 'urls', 'logo', 'description', 'date_launched', and 'notice'.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "DEX_METADATA",
      "canonical_tool_description_hash": "f5a7249263a17d906213630645a9795f41aa8ee5d014253d0c1922613a82ede8",
      "canonical_tool_input_schema_hash": "52f81287e7faefe628bee8bdca774dc1e61d8802510a4ea72df053489d6f80c3"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": ["id"],
          "properties": {
            "id": {
              "type": "string",
              "description": "One or more comma-separated CoinMarketCap cryptocurrency exchange IDs."
            },
            "aux": {
              "type": "string",
              "default": "",
              "description": "Optionally specify a comma-separated list of supplemental data fields to return. Valid values include: 'urls', 'logo', 'description', 'date_launched', and 'notice'. Default is an empty string."
            }
          },
          "description": "Query parameters for retrieving static metadata for decentralized exchanges. Provide one or more comma-separated CoinMarketCap cryptocurrency exchange IDs using the 'id' parameter. Optionally, specify a comma-separated list of supplemental data fields to return using the 'aux' parameter. Valid values for 'aux' are 'urls', 'logo', 'description', 'date_launched', and 'notice'.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__DEX_NETWORKS_LIST",
    "description": "Returns a list of all networks mapped to unique CoinMarketCap IDs. Per best practices, it is recommended to use the CoinMarketCap ID instead of network symbols for secure identification with other endpoints and within your application logic. Each network returned includes typical identifiers such as name, symbol, and token_address for flexible mapping to an ID.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "DEX_NETWORKS_LIST",
      "canonical_tool_description_hash": "1f58f47a1fa596d5dbdb27e97c60337f46f7f63238e39d8f6a6a5c232a7fd7ba",
      "canonical_tool_input_schema_hash": "760410de0a0906434cc7fc96fa6ca7d6e4fd83cff007d4b4ad0a52bbee7940a2"
    },
    "input_schema": {
      "type": "object",
      "required": [],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "aux": {
              "type": "string",
              "default": "",
              "description": "Optionally specify a comma-separated list of supplemental data fields to return. Valid values include: 'alternativeName', 'cryptocurrencyId', 'cryptocurrenySlug', 'wrappedTokenId', 'wrappedTokenSlug', 'tokenExplorerUrl', 'poolExplorerUrl', and 'transactionHashUrl'. Default is an empty string."
            },
            "sort": {
              "enum": ["id", "name"],
              "type": "string",
              "default": "id",
              "description": "Specifies the field by which to sort the list of networks. Valid values are 'id' and 'name'. Default is 'id'."
            },
            "limit": {
              "type": "string",
              "default": "100",
              "description": "Optionally specify the number of results to return. Use this parameter along with 'start' to control the pagination size."
            },
            "start": {
              "type": "string",
              "default": "1",
              "description": "Optionally offset the start (1-based index) of the paginated list of items to return."
            },
            "sort_dir": {
              "enum": ["desc", "asc"],
              "type": "string",
              "default": "desc",
              "description": "Specifies the direction to order the networks based on the 'sort' field. Valid values are 'desc' and 'asc'. Default is 'desc'."
            }
          },
          "description": "Query parameters for retrieving a list of networks with their unique CoinMarketCap IDs. You can optionally offset the start of the paginated list, specify the number of results to return, and sort the list by a specific field. Additionally, you may include a comma-separated list of supplemental data fields using the 'aux' parameter.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__DEX_LISTINGS_QUOTES",
    "description": "Returns a paginated list of all decentralized cryptocurrency exchanges along with the latest aggregate market data for each exchange. This endpoint allows you to retrieve market data such as trading volume and market share for DEXes, and you can use the 'convert_id' option to return market values in multiple fiat and cryptocurrency conversions in a single call.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "DEX_LISTINGS_QUOTES",
      "canonical_tool_description_hash": "698d378c54e2d2838a7f979085fd1c4ad7736729738eaeb28ffbb77b2baeb7a3",
      "canonical_tool_input_schema_hash": "e09cbbeb7990a8743becc721d6e567b5bf99c07ff07e0e9392f16c50b05479e6"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "aux": {
              "type": "string",
              "default": "",
              "description": "Optionally specify a comma-separated list of supplemental data fields to return. Valid value is 'date_launched'. Default is an empty string."
            },
            "sort": {
              "enum": ["name", "volume_24h", "market_share", "num_markets"],
              "type": "string",
              "default": "volume_24h",
              "description": "Specifies the field by which to sort the list of exchanges. Valid values are 'name', 'volume_24h', 'market_share', and 'num_markets'. Default is 'volume_24h'."
            },
            "type": {
              "enum": ["all", "orderbook", "swap", "aggregator"],
              "type": "string",
              "default": "all",
              "description": "Specifies the category for the exchange. Valid values are 'all', 'orderbook', 'swap', and 'aggregator'. Default is 'all'."
            },
            "limit": {
              "type": "string",
              "default": "100",
              "description": "Optionally specify the number of results to return. Use this parameter in combination with 'start' to control pagination size."
            },
            "start": {
              "type": "string",
              "default": "1",
              "description": "Optionally offset the start (1-based index) of the paginated list of items to return."
            },
            "sort_dir": {
              "enum": ["desc", "asc"],
              "type": "string",
              "default": "desc",
              "description": "Specifies the direction in which to order exchanges against the specified sort field. Valid values are 'desc' and 'asc'. Default is 'desc'."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes in up to 30 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency IDs. Each additional convert option beyond the first requires an additional call credit. Each conversion is returned in its own 'quote' object."
            }
          },
          "description": "Query parameters for retrieving the latest decentralized exchange listings. These parameters control pagination, sorting, filtering by exchange type, and the inclusion of supplemental data fields. Use 'start' and 'limit' to paginate the results; 'sort' and 'sort_dir' to order the list; 'type' to filter by exchange category; 'aux' to include additional fields (e.g. 'date_launched'); and 'convert_id' to perform market conversions using CoinMarketCap IDs.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__DEX_PAIRS_OHLCV_HISTORICAL",
    "description": "CoinMarketCap DEX Pairs OHLCV Historical API returns historical OHLCV data along with market cap for any spot pairs using time interval parameters.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "DEX_PAIRS_OHLCV_HISTORICAL",
      "canonical_tool_description_hash": "7220c0088bea09fd746277c8d6cb30f4b262b8b53a7024f19d95db2740af9ee4",
      "canonical_tool_input_schema_hash": "2152069ac2ef970fc3dfce4ba245108005d826bcf7eea18ed79853a4140cc61f"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "aux": {
              "type": "string",
              "default": "",
              "description": "Optionally specify a comma-separated list of supplemental data fields to return. Valid values: \"pool_created\", \"percent_pooled_base_asset\", \"num_transactions_24h\", \"pool_base_asset\", \"pool_quote_asset\", \"24h_volume_quote_asset\", \"total_supply_quote_asset\", \"total_supply_base_asset\", \"holders\", \"buy_tax\", \"sell_tax\", \"security_scan\", \"24h_no_of_buys\", \"24h_no_of_sells\", \"24h_buy_volume\", \"24h_sell_volume\". Default: \"\"."
            },
            "count": {
              "type": "string",
              "default": "10",
              "description": "Optionally limit the number of time periods to return results for. Default is 10 items. The current query limit is 500 items."
            },
            "interval": {
              "type": "string",
              "default": "daily",
              "description": "Optionally adjust the interval that \"time_period\" is sampled. Default: \"daily\". Valid values: \"1m\", \"5m\", \"15m\", \"30m\", \"1h\", \"4h\", \"8h\", \"12h\", \"daily\", \"weekly\", \"monthly\"."
            },
            "time_end": {
              "type": "string",
              "description": "Timestamp (Unix or ISO 8601) to stop returning OHLCV time periods for (inclusive). Optional; if not passed, defaults to the current time. For daily OHLCV, use an ISO date like \"2018-09-19\" without time."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. Cannot be used when convert is used."
            },
            "network_id": {
              "type": "string",
              "description": "One or more CoinMarketCap cryptocurrency network ids."
            },
            "time_start": {
              "type": "string",
              "description": "Timestamp (Unix or ISO 8601) to start returning OHLCV time periods for. Only the date portion is used for daily OHLCV; it is recommended to use an ISO date format like \"2018-09-19\" without time."
            },
            "time_period": {
              "type": "string",
              "default": "daily",
              "description": "Time period to return OHLCV data for. Default: \"daily\". Valid values: \"daily\", \"hourly\", \"1m\", \"5m\", \"15m\", \"30m\", \"4h\", \"8h\", \"12h\", \"weekly\", \"monthly\". If hourly, the open will be 01:00 and the close 01:59. If daily, the open is 00:00:00 and the close is 23:59:99."
            },
            "network_slug": {
              "type": "string",
              "description": "Alternatively, one network name in URL friendly shorthand \"slug\" format (all lowercase, spaces replaced with hyphens). You can only choose either network_id or network_slug, not both."
            },
            "skip_invalid": {
              "type": "string",
              "description": "Pass true to relax request validation rules. When requesting records on multiple spot pairs, an error is returned if no match is found for one or more requested pairs. If set to true, invalid lookups will be skipped, returning only valid results."
            },
            "reverse_order": {
              "type": "string",
              "description": "Pass true to invert the order of a spot pair. For example, if a trading pair is set up as Token B/Token A in the contract (commonly referred to as Token A/Token B), reverse_order will return the true Token B/Token A pairing as it exists in the pool."
            },
            "contract_address": {
              "type": "string",
              "description": "One contract address. Example: \"0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640\". If network/dex/base asset/quote asset information is passed, contract_address cannot be passed. Note: contract_address is case sensitive for non-EVM chains and not case sensitive for EVM chains."
            }
          },
          "description": "Query parameters for retrieving historical OHLCV data for DEX pairs.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__DEX_PAIRS_OHLCV_LATEST",
    "description": "CoinMarketCap DEX Pairs OHLCV Latest API returns the latest OHLCV (Open, High, Low, Close, Volume) market values for one or more spot pairs for the current UTC day. Since the current UTC day is active, these values are updated frequently.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "DEX_PAIRS_OHLCV_LATEST",
      "canonical_tool_description_hash": "c270fa3ac42126dfb5a7c925795d1196f8420c83357787c1a57431a8b52fdd54",
      "canonical_tool_input_schema_hash": "73faf9f0e67666c43af7bc462a351502c1813ee92a9b09adb87ae506eb2227ff"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "aux": {
              "type": "string",
              "default": "",
              "description": "Optionally specify a comma-separated list of supplemental data fields to return. Valid values: \"pool_created\", \"percent_pooled_base_asset\", \"num_transactions_24h\", \"pool_base_asset\", \"pool_quote_asset\", \"24h_volume_quote_asset\", \"total_supply_quote_asset\", \"total_supply_base_asset\", \"holders\", \"buy_tax\", \"sell_tax\", \"security_scan\", \"24h_no_of_buys\", \"24h_no_of_sells\", \"24h_buy_volume\", \"24h_sell_volume\"."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. Example: \"convert_id=1,2781\" would replace convert=BTC,USD in your query. This parameter cannot be used when convert is used."
            },
            "network_id": {
              "type": "string",
              "description": "One or more CoinMarketCap cryptocurrency network ids."
            },
            "network_slug": {
              "type": "string",
              "description": "Alternatively, one network name in URL-friendly shorthand 'slug' format (all lowercase, spaces replaced with hyphens). You can only choose either network_id or network_slug, not both."
            },
            "skip_invalid": {
              "type": "string",
              "description": "Pass true to relax request validation rules. When requesting records on multiple spot pairs, an error is returned if no match is found for one or more pairs. If set to true, invalid lookups will be skipped, returning only valid results."
            },
            "reverse_order": {
              "type": "string",
              "description": "Pass true to invert the order of a spot pair. For example, if a trading pair is set up as Token B/Token A (commonly referred to as Token A/Token B), using reverse_order would return the true Token B/Token A pairing as it exists in the pool."
            },
            "contract_address": {
              "type": "string",
              "description": "One or more comma-separated contract addresses. Example: \"0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640\"."
            }
          },
          "description": "Query parameters for retrieving the latest OHLCV market values for DEX pairs.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__DEX_PAIRS_QUOTES_LATEST",
    "description": "Returns the latest market quote for one or more spot pairs on decentralized exchanges. This endpoint retrieves up-to-date market data for specified spot pairs, identified by one or more contract addresses. You can also specify the network using either a CoinMarketCap network ID or a URL-friendly network slug. Additionally, supplemental data fields can be requested via the 'aux' parameter. Use 'convert_id' to obtain market quotes in multiple fiat or cryptocurrency conversions (each conversion is returned in its own 'quote' object). The 'skip_invalid' flag relaxes validation errors for unmatched spot pairs, and 'reverse_order' allows inverting the order of a spot pair as defined in the smart contract.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "DEX_PAIRS_QUOTES_LATEST",
      "canonical_tool_description_hash": "8a61ac5223dd4d65c40389dd30c37da461fbbc72084c2ab6477f40afd227cddb",
      "canonical_tool_input_schema_hash": "51ccbd5510ba9468e8379d7e86f719ac48edfc1d16346376bef136d1c764233d"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "aux": {
              "type": "string",
              "default": "",
              "description": "Optionally specify a comma-separated list of supplemental data fields to return. Valid values include: 'pool_created', 'percent_pooled_base_asset', 'num_transactions_24h', 'pool_base_asset', 'pool_quote_asset', '24h_volume_quote_asset', 'total_supply_quote_asset', 'total_supply_base_asset', 'holders', 'buy_tax', 'sell_tax', 'security_scan', '24h_no_of_buys', '24h_no_of_sells', '24h_buy_volume', and '24h_sell_volume'. Default is an empty string."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. For example, 'convert_id=1,2781' would replace a convert query of 'BTC,USD'. This parameter cannot be used simultaneously with a 'convert' parameter."
            },
            "network_id": {
              "type": "string",
              "description": "One or more CoinMarketCap cryptocurrency network IDs associated with the spot pairs."
            },
            "network_slug": {
              "type": "string",
              "description": "Alternatively, specify a network by its URL-friendly slug (all lowercase, spaces replaced with hyphens). You can only choose either network_id or network_slug, not both."
            },
            "skip_invalid": {
              "type": "string",
              "default": "false",
              "description": "Pass 'true' to relax request validation rules. When requesting records for multiple spot pairs, an error is returned if any requested pair is not found. If set to 'true', invalid lookups will be skipped, and valid spot pairs will still be returned."
            },
            "reverse_order": {
              "type": "string",
              "default": "false",
              "description": "Pass 'true' to invert the order of a spot pair. For example, if a trading pair is defined in the contract as Token B/Token A but is commonly referred to as Token A/Token B, setting this parameter to 'true' will return the pair in its true order (Token B/Token A)."
            },
            "contract_address": {
              "type": "string",
              "description": "One or more comma-separated contract addresses for the spot pairs. Example: '0xabc123,0xdef456'."
            }
          },
          "description": "Query parameters for retrieving the latest market quotes for one or more spot pairs on decentralized exchanges. Specify one or more contract addresses via 'contract_address'. Optionally, use 'network_id' or 'network_slug' to identify the blockchain network. Use 'aux' to request additional supplemental data fields, 'convert_id' to obtain multi-currency market quotes by CoinMarketCap ID, 'skip_invalid' to bypass errors for unmatched pairs, and 'reverse_order' to invert the order of a spot pair as stored in the contract.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__DEX_PAIRS_TRADE_LATEST",
    "description": "Returns up to the latest 100 trades for a single spot pair on decentralized exchanges. This endpoint provides the most recent trade data including pricing and volume details for the specified spot pair. Use the 'convert_id' option to return market quotes in multiple fiat and cryptocurrency conversions in the same call, with each conversion returned in its own 'trade' object. The 'skip_invalid' parameter allows the request to bypass validation errors if no matching records are found for one or more requested spot pairs, and the 'reverse_order' parameter can be used to invert the order of a spot pair as defined in the smart contract.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "DEX_PAIRS_TRADE_LATEST",
      "canonical_tool_description_hash": "6184104e82c1968be0c4d272eeaa28eca982e97b81d629fa5743e5cc127250ee",
      "canonical_tool_input_schema_hash": "862b4e099194d28bb6ed715434b6a5c5a6177c134d2e45b06d5c7024ed1ccc1d"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": ["contract_address"],
          "properties": {
            "aux": {
              "type": "string",
              "default": "",
              "description": "Optionally specify a comma-separated list of supplemental data fields to return. Valid values include: 'transaction_hash' and 'blockchain_explorer_link'. Default is an empty string."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes in up to 30 currencies by passing a comma-separated list of cryptocurrency or fiat currency IDs. Each additional convert option beyond the first requires an additional call credit. For example: 'convert_id=1,2781'. This parameter cannot be used when a 'convert' parameter is provided."
            },
            "network_id": {
              "type": "string",
              "description": "One CoinMarketCap cryptocurrency network ID associated with the spot pair."
            },
            "network_slug": {
              "type": "string",
              "description": "Alternatively, specify the network using a URL-friendly slug (all lowercase, spaces replaced with hyphens). Example: 'ethereum'. You can only choose either network_id or network_slug, not both."
            },
            "skip_invalid": {
              "type": "string",
              "default": "false",
              "description": "Pass 'true' to relax request validation rules. If no matching records are found for one or more requested spot pairs, setting this parameter to 'true' will skip invalid lookups and return only valid trades."
            },
            "reverse_order": {
              "type": "string",
              "default": "false",
              "description": "Pass 'true' to invert the order of the spot pair. For instance, if the trading pair is stored in the contract as Token B/Token A but commonly referred to as Token A/Token B, setting this to 'true' will return the true order as Token B/Token A."
            },
            "contract_address": {
              "type": "string",
              "description": "One or more comma-separated contract addresses for the spot pair. Example: '0xabc123'. This parameter is required to specify the spot pair. Basic tier users are limited to 1 contract_address."
            }
          },
          "description": "Query parameters for retrieving the latest trades for a spot pair on decentralized exchanges. Specify one or more contract addresses via 'contract_address' to identify the spot pair. Optionally, include the network identifier using 'network_id' or the network slug using 'network_slug'. Supplemental data fields can be requested using 'aux'. Use 'convert_id' to perform multi-currency market conversions, 'skip_invalid' to bypass errors for unmatched spot pairs, and 'reverse_order' to invert the spot pair order as stored in the contract.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__DEX_SPOT_PAIRS_LATEST",
    "description": "Returns a paginated list of all active decentralized exchange (DEX) spot pairs along with the latest market data. This endpoint supports filtering by various identifiers for networks, DEX exchanges, base assets, and quote assets. At least one network identifier (network_id or network_slug), one DEX identifier (dex_id or dex_slug), and one base asset identifier (base_asset_id, base_asset_symbol, base_asset_contract_address, or base_asset_ucid) along with one quote asset identifier (quote_asset_id, quote_asset_symbol, quote_asset_contract_address, or quote_asset_ucid) are required.  Additional, you can use various filtering parameters (liquidity, volume, transactions, percent change) to narrow down the results. Sorting is available via the 'sort' and 'sort_dir' parameters, supplemental data fields can be requested using 'aux', 'reverse_order' allows inverting the order of a spot pair, and 'convert_id' enables multi-currency market conversions.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "DEX_SPOT_PAIRS_LATEST",
      "canonical_tool_description_hash": "9ca4f42d47a3ffd7492fe87a4243c94b2497368127a98ee5fd8bc4cf9f492f29",
      "canonical_tool_input_schema_hash": "69429620a34f76127cbc63f7f2675a67b7dc9f99a7b4914ee2d2a1f956ad580c"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "aux": {
              "type": "string",
              "default": "",
              "description": "Optionally specify a comma-separated list of supplemental data fields to return. Valid values include: 'pool_created', 'percent_pooled_base_asset', 'num_transactions_24h', 'pool_base_asset', 'pool_quote_asset', '24h_volume_quote_asset', 'total_supply_quote_asset', 'total_supply_base_asset', 'holders', 'buy_tax', 'sell_tax', 'security_scan', '24h_no_of_buys', '24h_no_of_sells', '24h_buy_volume', and '24h_sell_volume'. Default is an empty string."
            },
            "sort": {
              "enum": [
                "name",
                "date_added",
                "price",
                "volume_24h",
                "percent_change_1h",
                "percent_change_24h",
                "liquidity",
                "fully_diluted_value",
                "no_of_transactions_24h"
              ],
              "type": "string",
              "default": "volume_24h",
              "description": "Specifies the field by which to sort the list of DEX spot pairs. Valid values include 'name', 'date_added', 'price', 'volume_24h', 'percent_change_1h', 'percent_change_24h', 'liquidity', 'fully_diluted_value', and 'no_of_transactions_24h'. Default is 'volume_24h'."
            },
            "limit": {
              "type": "string",
              "default": "100",
              "description": "Optionally specify the number of results to return. Use this parameter along with 'scroll_id' to control pagination. Default is '100'."
            },
            "dex_id": {
              "type": "string",
              "description": "One or more comma-separated CoinMarketCap DEX exchange IDs to filter results by."
            },
            "dex_slug": {
              "type": "string",
              "description": "Alternatively, one or more comma-separated DEX exchange names in URL-friendly slug format (all lowercase, spaces replaced with hyphens). At least one DEX identifier (id or slug) is required."
            },
            "sort_dir": {
              "enum": ["desc", "asc"],
              "type": "string",
              "default": "desc",
              "description": "Specifies the direction in which to order DEX spot pairs based on the 'sort' field. Valid values are 'desc' and 'asc'. Default is 'desc'."
            },
            "scroll_id": {
              "type": "string",
              "default": "",
              "description": "After your initial query, the API returns a scroll_id with the result set. Use this scroll_id in subsequent requests to retrieve the next set of results as an alternative to traditional pagination."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. For example, 'convert_id=1,2781' would replace a convert query of 'BTC,USD'. This parameter cannot be used when a 'convert' parameter is provided."
            },
            "network_id": {
              "type": "string",
              "description": "One or more comma-separated CoinMarketCap cryptocurrency network IDs to filter results by."
            },
            "network_slug": {
              "type": "string",
              "description": "Alternatively, one or more comma-separated network names in URL-friendly slug format (all lowercase, spaces replaced with hyphens). At least one network identifier (id or slug) is required. You can only choose either network_id or network_slug, not both."
            },
            "base_asset_id": {
              "type": "string",
              "description": "One or more comma-separated CoinMarketCap cryptocurrency IDs for the base asset."
            },
            "liquidity_max": {
              "type": "string",
              "description": "Optionally specify a threshold for the maximum liquidity to filter results by."
            },
            "liquidity_min": {
              "type": "string",
              "description": "Optionally specify a threshold for the minimum liquidity to filter results by."
            },
            "reverse_order": {
              "type": "string",
              "default": "false",
              "description": "Pass 'true' to invert the order of a spot pair. For example, if a trading pair is stored as Token B/Token A in the contract but commonly referred to as Token A/Token B, setting this parameter to 'true' will return the true order as Token B/Token A."
            },
            "quote_asset_id": {
              "type": "string",
              "description": "One or more comma-separated CoinMarketCap cryptocurrency IDs for the quote asset."
            },
            "volume_24h_max": {
              "type": "string",
              "description": "Optionally specify a threshold for the maximum 24-hour USD volume to filter results by."
            },
            "volume_24h_min": {
              "type": "string",
              "description": "Optionally specify a threshold for the minimum 24-hour USD volume to filter results by."
            },
            "base_asset_ucid": {
              "type": "string",
              "description": "One or more comma-separated unique CoinMarketCap cryptocurrency IDs for the base asset."
            },
            "quote_asset_ucid": {
              "type": "string",
              "description": "One or more comma-separated unique CoinMarketCap cryptocurrency IDs for the quote asset."
            },
            "base_asset_symbol": {
              "type": "string",
              "description": "Alternatively, one or more comma-separated base asset symbols in URL-friendly slug format (all lowercase, spaces replaced with hyphens). At least one base asset identifier (id or symbol) is required."
            },
            "quote_asset_symbol": {
              "type": "string",
              "description": "Alternatively, one or more comma-separated quote asset symbols in URL-friendly slug format (all lowercase, spaces replaced with hyphens). At least one quote asset identifier (id or symbol) is required."
            },
            "percent_change_24h_max": {
              "type": "string",
              "description": "Optionally specify a threshold for the maximum 24-hour percent change to filter results by."
            },
            "percent_change_24h_min": {
              "type": "string",
              "description": "Optionally specify a threshold for the minimum 24-hour percent change to filter results by."
            },
            "no_of_transactions_24h_max": {
              "type": "string",
              "description": "Optionally specify a threshold for the maximum number of transactions in the last 24 hours to filter results by."
            },
            "no_of_transactions_24h_min": {
              "type": "string",
              "description": "Optionally specify a threshold for the minimum number of transactions in the last 24 hours to filter results by."
            },
            "base_asset_contract_address": {
              "type": "string",
              "description": "Alternatively, a base asset contract address in URL-friendly slug format (all lowercase, spaces replaced with hyphens). At least one base asset identifier is required."
            },
            "quote_asset_contract_address": {
              "type": "string",
              "description": "Alternatively, a quote asset contract address in URL-friendly slug format (all lowercase, spaces replaced with hyphens). At least one quote asset identifier is required."
            }
          },
          "description": "Query parameters for retrieving the latest listings of DEX spot pairs. Use one or more identifiers to filter results by network, DEX, base asset, and quote asset. You may also use 'scroll_id' for pagination, 'limit' to control result count, and additional filtering parameters for liquidity, volume, number of transactions, and percent change. Sorting options are available with 'sort' and 'sort_dir', while 'aux' can request supplemental data fields. The 'reverse_order' parameter inverts the pair order as defined in the smart contract, and 'convert_id' returns market quotes in additional currencies using CoinMarketCap IDs.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__EXCHANGE_ASSETS",
    "description": "Returns the exchange assets in the form of token holdings. This endpoint provides detailed information such as the wallet address, associated cryptocurrency, blockchain platform, balance, and related data for an exchange's asset holdings. Note that only wallets containing at least 100,000 USD in balance are shown and that wallet balances may be delayed. Disclaimer: All information and data regarding the holdings in third-party wallet addresses are provided by those third parties to CoinMarketCap. CoinMarketCap does not verify or confirm the accuracy or timeliness of this information; it is provided 'as is' without warranty. CoinMarketCap shall have no responsibility or liability for these third parties\u2019 data or any inquiries into its completeness, accuracy, sufficiency, or timeliness.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "EXCHANGE_ASSETS",
      "canonical_tool_description_hash": "e128142bacbacac67f9223eb00805236811a5281d2d31cc9d98d3abb1613a0c0",
      "canonical_tool_input_schema_hash": "c30f9de9879fd1cc9b64487a40819298e9b18609989f19ece37b6e24290677a8"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": ["id"],
          "properties": {
            "id": {
              "type": "string",
              "description": "A CoinMarketCap exchange ID. Example: '270'."
            }
          },
          "description": "Query parameters for retrieving the exchange assets. You must provide a CoinMarketCap exchange ID to specify which exchange's asset holdings to retrieve. Example: '270'.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__EXCHANGE_INFO",
    "description": "Returns all static metadata for one or more cryptocurrency exchanges. This endpoint provides detailed information such as the exchange's launch date, logo, official website URL, social links, and market fee documentation URL. You can identify exchanges by providing one or more comma-separated exchange IDs (using the 'id' parameter) or by exchange slugs (using the 'slug' parameter in URL-friendly format). At least one identifier is required. Optionally, you may include supplemental data fields using the 'aux' parameter. Valid supplemental fields include 'urls', 'logo', 'description', 'date_launched', and 'notice'. To return all available auxiliary fields, use 'urls,logo,description,date_launched,notice,status'.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "EXCHANGE_INFO",
      "canonical_tool_description_hash": "759f1844704d5d6258eb970e7205b33210a4cb831a2b75395f920faa04c59c62",
      "canonical_tool_input_schema_hash": "c52c3f32363a9e00cd602ccbbd8f39c0e44623173c8d81d14a0b043921fa0c7b"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "id": {
              "type": "string",
              "description": "One or more comma-separated CoinMarketCap cryptocurrency exchange IDs."
            },
            "aux": {
              "type": "string",
              "default": "urls,logo,description,date_launched,notice",
              "description": "Optionally specify a comma-separated list of supplemental data fields to return. The default is 'urls,logo,description,date_launched,notice'. To include all auxiliary fields, pass 'urls,logo,description,date_launched,notice,status'."
            },
            "slug": {
              "type": "string",
              "description": "Alternatively, one or more comma-separated exchange slugs in URL-friendly format (all lowercase, spaces replaced with hyphens). Example: 'binance,gdax'. At least one of 'id' or 'slug' is required."
            }
          },
          "description": "Query parameters for retrieving static metadata for one or more exchanges. Provide either one or more comma-separated exchange IDs via the 'id' parameter or exchange slugs via the 'slug' parameter. Optionally, specify supplemental data fields using 'aux'.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__EXCHANGE_MAP",
    "description": "Returns a paginated list of all active cryptocurrency exchanges by their unique CoinMarketCap IDs. This convenience endpoint is designed to help you lookup and utilize our unique exchange ID across all endpoints, ensuring reliable identification even if typical exchange identifiers change over time. By default, only exchanges with at least one actively tracked market are returned (listing_status = 'active'). You can also filter for inactive exchanges (listing_status = 'inactive') or for exchanges that are registered but not meeting the tracking methodology (listing_status = 'untracked'). Optionally, you may pass a comma-separated list of exchange slugs to restrict the list or use the 'aux' parameter to slim down the payload. Additionally, you can filter exchanges by a fiat or cryptocurrency ID using the 'crypto_id' parameter.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "EXCHANGE_MAP",
      "canonical_tool_description_hash": "a4794a2e33d844775ca12a15cadd197210ec424a8becad848961bd97b87347a7",
      "canonical_tool_input_schema_hash": "561f76ec8fd2fa4e40a756b2043358f3dbca58caf3b7638ef5a97bdb93681a67"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "aux": {
              "type": "string",
              "default": "first_historical_data,last_historical_data,is_active",
              "description": "Optionally specify a comma-separated list of supplemental data fields to return. The default is 'first_historical_data,last_historical_data,is_active'. To include all available auxiliary fields, pass 'first_historical_data,last_historical_data,is_active,status'."
            },
            "slug": {
              "type": "string",
              "description": "Optionally, provide a comma-separated list of exchange slugs (URL-friendly, all lowercase with spaces replaced by dashes) to filter the results. If specified, all other query options will be ignored."
            },
            "sort": {
              "enum": ["id", "volume_24h"],
              "type": "string",
              "default": "id",
              "description": "Specifies the field by which to sort the list of exchanges. Valid values are 'id' and 'volume_24h'. Default is 'id'."
            },
            "limit": {
              "type": "integer",
              "default": 100,
              "maximum": 5000,
              "minimum": 1,
              "description": "Optionally specify the number of results to return. Valid values range from 1 to 5000. Use this together with 'start' to control the pagination size."
            },
            "start": {
              "type": "integer",
              "default": 1,
              "minimum": 1,
              "description": "Optionally offset the start (1-based index) of the paginated list of items to return. Default is 1."
            },
            "crypto_id": {
              "type": "string",
              "description": "Optionally, pass one fiat or cryptocurrency ID to filter the exchanges. For example, 'crypto_id=1' will return only exchanges that have BTC in their market pairs."
            },
            "listing_status": {
              "type": "string",
              "default": "active",
              "description": "Filter exchanges by their listing status. By default, 'active' is used to return only exchanges with at least one actively tracked market. You can also pass 'inactive' to get exchanges that are no longer active or 'untracked' to get exchanges registered but not meeting methodology requirements. Multiple comma-separated values are allowed."
            }
          },
          "description": "Query parameters for retrieving the CoinMarketCap ID map for cryptocurrency exchanges. By default, only active exchanges (listing_status = 'active') are returned. You may optionally specify a comma-separated list of listing statuses (e.g. 'active,inactive,untracked'). If you provide the 'slug' parameter, it will filter the results to only include the specified exchanges and ignore other query filters. The 'start' and 'limit' parameters enable pagination, 'sort' allows sorting by either 'id' or 'volume_24h', 'aux' lets you include supplemental fields, and 'crypto_id' filters the exchanges by the presence of a specific cryptocurrency in their markets.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__EXCHANGE_LISTINGS_LATEST",
    "description": "CoinMarketCap Listings Latest API returns a paginated list of all cryptocurrency exchanges including the latest aggregate market data for each exchange. Use the 'convert' option to return market values in multiple fiat and cryptocurrency conversions in the same call. NOTE: Use this endpoint for a sorted and paginated list of exchanges. For market data on specific exchanges, use /v1/exchange/quotes/latest. The response data between these endpoints is otherwise the same. 'exchange_score' will be deprecated on 4 November 2024 and will return null after that date.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "EXCHANGE_LISTINGS_LATEST",
      "canonical_tool_description_hash": "917c5cd342f16215cda81daf6a55433a9e17b4cd2184d4939d32a42af2fb48aa",
      "canonical_tool_input_schema_hash": "6c2c1c0725cc000da5067a60ce8633718de3e1a9029102537fd0b24a91ff64ba"
    },
    "input_schema": {
      "type": "object",
      "required": [],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "aux": {
              "type": "string",
              "default": "num_market_pairs,traffic_score,rank,exchange_score,effective_liquidity_24h",
              "description": "Optionally specify a comma-separated list of supplemental data fields to return. Default: \"num_market_pairs,traffic_score,rank,exchange_score,effective_liquidity_24h\"."
            },
            "sort": {
              "enum": ["volume_24h", "name", "volume_24h_adjusted", "exchange_score"],
              "type": "string",
              "default": "volume_24h",
              "description": "What field to sort the list of exchanges by."
            },
            "limit": {
              "type": "integer",
              "default": 100,
              "maximum": 5000,
              "minimum": 1,
              "description": "Optionally specify the number of results to return. Range: 1 to 5000."
            },
            "start": {
              "type": "integer",
              "default": 1,
              "minimum": 1,
              "description": "Optionally offset the start (1-based index) of the paginated list of items to return."
            },
            "convert": {
              "type": "string",
              "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit."
            },
            "category": {
              "enum": ["all", "spot", "derivatives", "dex", "lending"],
              "type": "string",
              "default": "all",
              "description": "The category for this exchange."
            },
            "sort_dir": {
              "enum": ["asc", "desc"],
              "type": "string",
              "description": "The direction in which to order exchanges against the specified sort."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. Ex: convert_id=1,2781 would replace convert=BTC,USD in your query. This parameter cannot be used when convert is used."
            },
            "market_type": {
              "enum": ["all", "fees", "no_fees"],
              "type": "string",
              "default": "all",
              "description": "The type of exchange markets to include in rankings. This field is deprecated. Please use 'all' for accurate sorting."
            }
          },
          "description": "Query parameters for retrieving the latest cryptocurrency exchange listings with market data.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__EXCHANGE_MARKET_PAIRS_LATEST",
    "description": "CoinMarketCap Market Pairs Latest API returns all active market pairs tracked for a given exchange, including the latest price and volume data for each market. Use the 'convert' option to return market values in multiple fiat and cryptocurrency conversions in the same call.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "EXCHANGE_MARKET_PAIRS_LATEST",
      "canonical_tool_description_hash": "0866da85669030fc2745a92758ba7aac5fde4e7ff335996daac24d980f7afecc",
      "canonical_tool_input_schema_hash": "19ba45c038b9798c582ab425fc9ffa89dd074ab83eea626b4cf5d72ea0ab1d77"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "id": {
              "type": "string",
              "description": "A CoinMarketCap exchange ID. Example: \"1\"."
            },
            "aux": {
              "type": "string",
              "default": "num_market_pairs,category,fee_type",
              "description": "Optionally specify a comma-separated list of supplemental data fields to return. Default is \"num_market_pairs,category,fee_type\". Additional fields such as \"market_url\", \"currency_name\", \"currency_slug\", \"price_quote\", \"effective_liquidity\", \"market_score\", \"market_reputation\" may be included."
            },
            "slug": {
              "type": "string",
              "description": "Alternatively, an exchange slug (URL-friendly lowercase shorthand version of the name with spaces replaced with hyphens). Example: \"binance\". One of 'id' or 'slug' is required."
            },
            "limit": {
              "type": "integer",
              "default": 100,
              "maximum": 5000,
              "minimum": 1,
              "description": "Optionally specify the number of results to return. Range: 1 to 5000."
            },
            "start": {
              "type": "integer",
              "default": 1,
              "minimum": 1,
              "description": "Optionally offset the start (1-based index) of the paginated list."
            },
            "convert": {
              "type": "string",
              "description": "Optionally calculate market quotes in up to 120 currencies by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit."
            },
            "category": {
              "enum": ["all", "spot", "derivatives", "otc", "futures", "perpetual"],
              "type": "string",
              "default": "all",
              "description": "The category of trading the market falls under."
            },
            "fee_type": {
              "enum": ["all", "percentage", "no-fees", "transactional-mining", "unknown"],
              "type": "string",
              "default": "all",
              "description": "The fee type enforced by the exchange for this market."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. Example: \"convert_id=1,2781\" would replace convert=BTC,USD. Cannot be used when convert is provided."
            },
            "matched_id": {
              "type": "string",
              "description": "Optionally include one or more comma-delimited fiat or cryptocurrency IDs to filter market pairs. For example, ?matched_id=2781 returns only BTC markets matching \"BTC/USD\" or \"USD/BTC\". Cannot be used with matched_symbol."
            },
            "matched_symbol": {
              "type": "string",
              "description": "Optionally include one or more comma-delimited fiat or cryptocurrency symbols to filter market pairs. For example, ?matched_symbol=USD returns only BTC markets matching \"BTC/USD\" or \"USD/BTC\". Cannot be used with matched_id."
            }
          },
          "description": "Query parameters for retrieving market pairs for a given exchange.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__EXCHANGE_QUOTES_HISTORICAL",
    "description": "CoinMarketCap Exchange Quotes Historical API returns an interval of historic quotes for one or more exchanges based on provided time and interval parameters. A historic quote for every interval period between time_start and time_end will be returned.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "EXCHANGE_QUOTES_HISTORICAL",
      "canonical_tool_description_hash": "476db6429e1154653ecd4eb1afe704a8fd195bc9c21234717682002a871811bd",
      "canonical_tool_input_schema_hash": "3729416929636849644dec07095c747b20cbca337b22cbad80b720ef679fbc60"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "id": {
              "type": "string",
              "description": "One or more comma-separated exchange CoinMarketCap ids. Example: \"24,270\"."
            },
            "slug": {
              "type": "string",
              "description": "Alternatively, one or more comma-separated exchange slugs in URL-friendly shorthand (all lowercase, spaces replaced with hyphens). Example: \"binance,kraken\". At least one of 'id' or 'slug' is required."
            },
            "count": {
              "type": "number",
              "default": 10,
              "maximum": 10000,
              "minimum": 1,
              "description": "The number of interval periods to return results for. Default is 10. Range: 1 to 10000."
            },
            "convert": {
              "type": "string",
              "description": "By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies by passing a comma-separated list of symbols."
            },
            "interval": {
              "type": "string",
              "description": "Interval of time to return data points for. Supported values include calendar intervals (e.g., \"hourly\", \"daily\", \"weekly\", \"monthly\", \"yearly\") and relative intervals (e.g., \"5m\", \"10m\", \"15m\", \"30m\", \"45m\", \"1h\", \"2h\", \"3h\", \"4h\", \"6h\", \"12h\", \"24h\", \"1d\", \"2d\", \"3d\", \"7d\", \"14d\", \"15d\", \"30d\", \"60d\", \"90d\", \"365d\")."
            },
            "time_end": {
              "type": "string",
              "description": "Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional; if not provided, defaults to the current time."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. Example: \"convert_id=1,2781\" would replace convert=BTC,USD in your query. This parameter cannot be used when convert is provided."
            },
            "time_start": {
              "type": "string",
              "description": "Timestamp (Unix or ISO 8601) to start returning quotes for. Optional; if not provided, quotes are returned in reverse from time_end."
            }
          },
          "description": "Query parameters for retrieving historical quotes for exchanges.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__EXCHANGE_QUOTES_LATEST",
    "description": "CoinMarketCap Quotes Latest API returns the latest aggregate market data for one or more exchanges. Use the 'convert' option to return market values in multiple fiat and cryptocurrency conversions in the same call. NOTE: 'exchange_score' will be deprecated on 4 November 2024.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "EXCHANGE_QUOTES_LATEST",
      "canonical_tool_description_hash": "4720506806a23b8204e27cd052cd35466d4b785398e8c767f3b42df4356fffc1",
      "canonical_tool_input_schema_hash": "e0f1ad95282b902728eaf6f7ec8ca797cb33fb77c6b289254cb462c256612298"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "id": {
              "type": "string",
              "description": "One or more comma-separated CoinMarketCap exchange IDs. Example: \"1,2\"."
            },
            "aux": {
              "type": "string",
              "description": "Optionally specify a comma-separated list of supplemental data fields to return. Default: \"num_market_pairs,traffic_score,rank,exchange_score,liquidity_score,effective_liquidity_24h\"."
            },
            "slug": {
              "type": "string",
              "description": "Alternatively, pass a comma-separated list of exchange slugs (URL-friendly, all lowercase with spaces replaced by hyphens). Example: \"binance,gdax\". At least one of 'id' or 'slug' is required."
            },
            "convert": {
              "type": "string",
              "description": "Optionally calculate market quotes in up to 120 currencies at once by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. Ex: \"convert_id=1,2781\" would replace \"convert=BTC,USD\" in your query. This parameter cannot be used when 'convert' is provided."
            }
          },
          "description": "Query parameters for retrieving the latest aggregate market data for exchanges.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__GLOBAL_METRICS_QUOTES_HISTORICAL",
    "description": "CoinMarketCap Global Metrics Quotes Historical API returns an interval of historical global cryptocurrency market metrics based on provided time and interval parameters. A historic quote for every interval period between time_start and time_end will be returned.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "GLOBAL_METRICS_QUOTES_HISTORICAL",
      "canonical_tool_description_hash": "3b388b7d856a05bdbd37dffe9f81db055bf65bd925f3a3b2b2640f4cdf226c3b",
      "canonical_tool_input_schema_hash": "3f6f003008391b54a6ab7e22c7922d248460ba872d91bd15e146c4d4a91f1820"
    },
    "input_schema": {
      "type": "object",
      "required": [],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "aux": {
              "type": "string",
              "default": "btc_dominance,eth_dominance,active_cryptocurrencies,active_exchanges,active_market_pairs,total_volume_24h,total_volume_24h_reported,altcoin_market_cap,altcoin_volume_24h,altcoin_volume_24h_reported",
              "description": "Optionally specify a comma-separated list of supplemental data fields to return. Default: \"btc_dominance,eth_dominance,active_cryptocurrencies,active_exchanges,active_market_pairs,total_volume_24h,total_volume_24h_reported,altcoin_market_cap,altcoin_volume_24h,altcoin_volume_24h_reported\"."
            },
            "count": {
              "type": "number",
              "default": 10,
              "maximum": 10000,
              "minimum": 1,
              "description": "The number of interval periods to return results for. Optional; default is 10. Range: 1 to 10000."
            },
            "convert": {
              "type": "string",
              "description": "By default market quotes are returned in USD. Optionally calculate market quotes in up to 3 other fiat currencies or cryptocurrencies by passing a comma-separated list of symbols."
            },
            "interval": {
              "type": "string",
              "default": "1d",
              "description": "Interval of time to return data points for. Default is \"1d\". Valid values include calendar intervals (e.g., \"hourly\", \"daily\", \"weekly\", \"monthly\", \"yearly\") and relative intervals (e.g., \"5m\", \"10m\", \"15m\", \"30m\", \"45m\", \"1h\", \"2h\", \"3h\", \"4h\", \"6h\", \"12h\", \"24h\", \"1d\", \"2d\", \"3d\", \"7d\", \"14d\", \"15d\", \"30d\", \"60d\", \"90d\", \"365d\")."
            },
            "time_end": {
              "type": "string",
              "description": "Timestamp (Unix or ISO 8601) to stop returning quotes for (inclusive). Optional; if not supplied, defaults to the current time."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. Ex: \"convert_id=1,2781\" replaces convert=BTC,USD in your query. This parameter cannot be used when convert is provided."
            },
            "time_start": {
              "type": "string",
              "description": "Timestamp (Unix or ISO 8601) to start returning quotes for. Optional; if not supplied, quotes are returned in reverse order from time_end."
            }
          },
          "description": "Query parameters for retrieving historical global cryptocurrency market metrics.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__GLOBAL_METRICS_QUOTES_LATEST",
    "description": "CoinMarketCap Global Metrics Quotes Latest API returns the latest global cryptocurrency market metrics. Use the 'convert' option to return market values in multiple fiat and cryptocurrency conversions in the same call.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "GLOBAL_METRICS_QUOTES_LATEST",
      "canonical_tool_description_hash": "e5123293f34acc8d7bdb96dd7c3311c9ea0da9b43cb86a132af5d9031b9e8f9c",
      "canonical_tool_input_schema_hash": "c01100c665e0af978ecfe7d00d5425c6718627e4d94a0b224eae171a56321762"
    },
    "input_schema": {
      "type": "object",
      "required": [],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "convert": {
              "type": "string",
              "description": "Optionally calculate market quotes in up to 120 currencies by passing a comma-separated list of cryptocurrency or fiat currency symbols. Each additional convert option beyond the first requires an additional call credit."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. Ex: \"convert_id=1,2781\" would replace convert=BTC,USD in your query. This parameter cannot be used when convert is used."
            }
          },
          "description": "Query parameters for retrieving the latest global cryptocurrency market metrics.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__CMC100_INDEX_HISTORICAL",
    "description": "Returns an interval of historic CoinMarketCap 100 Index values based on the interval parameter. This endpoint retrieves historical index data for the CoinMarketCap 100 Index. You may specify the starting timestamp (time_start) and ending timestamp (time_end) to define the period for which to return data. If time_start is not provided, the API returns quotes in reverse order starting from time_end. The 'count' parameter specifies the number of interval periods to return (default is 5 items; if time_start and time_end are supplied, the limit is 10 with count starting from time_start). The 'interval' parameter allows you to adjust the granularity of the data (valid values are '5m', '15m', or 'daily').\n\nData provided by CoinMarketCap.com. For commercial agreement details, please refer to https://pro.coinmarketcap.com/user-agreement-commercial/.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CMC100_INDEX_HISTORICAL",
      "canonical_tool_description_hash": "5c0f5d337e65bb108d110ae2043a983875ee4526a11b4cfc6315bb48cc0dfa1b",
      "canonical_tool_input_schema_hash": "cf079a0aca575be301ce6daf71d26b683f743ce4c669aa4bd5e9cd97d5ff9267"
    },
    "input_schema": {
      "type": "object",
      "required": [],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "count": {
              "type": "string",
              "default": "5",
              "description": "The number of interval periods to return. Optional; required if neither time_start nor time_end is supplied. The default is 5 items. If both time_start and time_end are provided, the query limit is 10 and the count starts from time_start."
            },
            "interval": {
              "type": "string",
              "description": "Optionally adjust the interval of the returned data. Valid values are '5m' for 5 minutes, '15m' for 15 minutes, or 'daily' for daily intervals."
            },
            "time_end": {
              "type": "string",
              "description": "Timestamp (Unix or ISO 8601) to stop returning CoinMarketCap 100 Index data for (inclusive). Optional; if not provided, defaults to the current time. When omitted with time_start, results are returned in reverse order from this time."
            },
            "time_start": {
              "type": "string",
              "description": "Timestamp (Unix or ISO 8601) to start returning CoinMarketCap 100 Index data for. Optional; if not provided, results are returned in reverse order from time_end."
            }
          },
          "description": "Query parameters for retrieving historical CoinMarketCap 100 Index data. 'time_start' is the timestamp (Unix or ISO 8601) to begin returning index data. 'time_end' is the timestamp (Unix or ISO 8601) to stop returning data (inclusive). If 'time_start' is omitted, the endpoint returns quotes in reverse order starting from 'time_end'. The 'count' parameter specifies the number of interval periods to return (default is 5 items, or up to 10 if both 'time_start' and 'time_end' are provided). The 'interval' parameter adjusts the data granularity; valid values are '5m', '15m', and 'daily'.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__CMC100_INDEX_LATEST",
    "description": "Returns the latest CoinMarketCap 100 Index value along with its current constituents and their respective weights. This endpoint is updated every 5 minutes and is available on the Basic, Startup, Hobbyist, Standard, Professional, and Enterprise plans. Data provided by CoinMarketCap.com. Your product must display the attribution: 'Data provided by CoinMarketCap.com' with a hyperlink to https://coinmarketcap.com.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CMC100_INDEX_LATEST",
      "canonical_tool_description_hash": "8b39fae556444b9a4d88ecf0ed0e51cfd9cb96bc68c86b5d30f9ed7caa3c8028",
      "canonical_tool_input_schema_hash": "44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a"
    },
    "input_schema": {}
  },
  {
    "name": "COINMARKETCAP__CMC_CRYPTO_FEAR_GREED_HISTORICAL",
    "description": "Returns a paginated list of all CMC Crypto Fear and Greed Index values recorded at 12am UTC. This endpoint provides historical index data along with its classification (e.g., 'Fear' or 'Greed'). It is available on the Basic, Startup, Hobbyist, Standard, Professional, and Enterprise plans and is updated every 15 seconds. Plan credit use is 1 call credit per request. Data provided by CoinMarketCap.com. Your product must display the attribution 'Data provided by CoinMarketCap.com' with a hyperlink to https://coinmarketcap.com.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "CMC_CRYPTO_FEAR_GREED_HISTORICAL",
      "canonical_tool_description_hash": "8874c8bca90c2d95976082e317b5d86fb37209d43813aa834ba346240b8e3259",
      "canonical_tool_input_schema_hash": "0cb1844ca963038cfa1eb78f030151ef23f8f5f1727137b5e8f84660a0ca8f8e"
    },
    "input_schema": {
      "type": "object",
      "required": [],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "limit": {
              "type": "integer",
              "default": 50,
              "maximum": 500,
              "minimum": 1,
              "description": "Optionally specify the number of historical data records to return. Valid range is 1 to 500. Default is 50."
            },
            "start": {
              "type": "integer",
              "default": 1,
              "minimum": 1,
              "description": "Optionally offset the start (1-based index) of the historical data records to return. Must be at least 1. Default is 1."
            }
          },
          "description": "Query parameters for retrieving historical CMC Crypto Fear and Greed Index data recorded at 12am UTC. Use 'start' to specify the 1-based index offset of the paginated list and 'limit' to define the number of results to return. If not provided, 'start' defaults to 1 and 'limit' defaults to 50.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__FIAT_MAP",
    "description": "Returns a mapping of all supported fiat currencies to unique CoinMarketCap IDs. This endpoint is designed to help you reliably identify fiat assets using their CMC ID rather than currency symbols, which may change over time. By default, it returns data for fiat currencies with updated mapping data every 30 seconds. Optionally, you can include precious metals by setting 'include_metals' to true. This endpoint is available on Basic, Hobbyist, Startup, Standard, Professional, and Enterprise plans.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "FIAT_MAP",
      "canonical_tool_description_hash": "7bf5357a4cb17eb8349504d0c6533ed6f3ac89271e6e6516fb15f75d3b33f1e6",
      "canonical_tool_input_schema_hash": "4f29069490963c9eeb5c8f1019ee93ddb61c331a21d4784201432f01cc421a0b"
    },
    "input_schema": {
      "type": "object",
      "required": [],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "sort": {
              "enum": ["id", "name"],
              "type": "string",
              "default": "id",
              "description": "Specifies the field by which to sort the list of fiat currencies. Valid values are 'id' and 'name'. Default is 'id'."
            },
            "limit": {
              "type": "integer",
              "default": 100,
              "maximum": 5000,
              "minimum": 1,
              "description": "Optionally specify the number of results to return. Valid values range from 1 to 5000."
            },
            "start": {
              "type": "integer",
              "default": 1,
              "minimum": 1,
              "description": "Optionally offset the start (1-based index) of the paginated list of items to return. Must be at least 1."
            },
            "include_metals": {
              "type": "boolean",
              "default": false,
              "description": "Pass true to include precious metals in the response."
            }
          },
          "description": "Query parameters for retrieving the CoinMarketCap ID map for fiat currencies. 'start' specifies the 1-based index offset for pagination. 'limit' defines the number of results to return. 'sort' determines the field by which to sort the list (either by 'id' or 'name'), and 'include_metals' specifies whether to include precious metals in the response.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__PRICE_CONVERSION_V2",
    "description": "Converts an amount of a base cryptocurrency or fiat currency into one or more target currencies using the latest market rates (or historical rates if a timestamp is provided). Basic tier users are limited to 1 convert symbol/id. Specify the amount to convert along with either the CoinMarketCap currency ID (id) or its symbol (symbol) as the source. Optionally, provide a timestamp (time) to retrieve historical conversion values. You can convert the source amount into up to 120 different fiat or cryptocurrency symbols by using the 'convert' parameter. Alternatively, you can use 'convert_id' to obtain market quotes by CoinMarketCap IDs instead of symbols; note that 'convert' and 'convert_id' cannot be used together. Latest market rate conversions are accurate to within 1 minute, while historical conversions are similarly precise (with non-USD fiat conversions having a 5-minute specificity).",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "PRICE_CONVERSION_V2",
      "canonical_tool_description_hash": "0566ee7f5efc6befc447bdeb32db25e219c888b86b321d9977274eefe413bad2",
      "canonical_tool_input_schema_hash": "a138778a61460b6193dc11311e13103dfd57c88d3e130d31a64ef488fccb6158"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": ["amount"],
          "properties": {
            "id": {
              "type": "string",
              "description": "The CoinMarketCap currency ID of the base cryptocurrency or fiat to convert from. Example: \"1\". (Either 'id' or 'symbol' is required.)"
            },
            "time": {
              "type": "string",
              "description": "Optional timestamp (Unix or ISO 8601) to reference historical pricing during conversion. If not provided, the current time will be used."
            },
            "amount": {
              "type": "number",
              "description": "The amount of the base currency to convert. Must be between 1e-8 and 1000000000000. Example: 10.43."
            },
            "symbol": {
              "type": "string",
              "description": "Alternatively, the currency symbol of the base cryptocurrency or fiat to convert from. Example: \"BTC\". (Either 'id' or 'symbol' is required; note that if requested by symbol, the response may include an array of objects.)"
            },
            "convert": {
              "type": "string",
              "description": "Comma-separated list of fiat or cryptocurrency symbols to convert the base amount into. Up to 120 symbols may be provided, but basic tier users are limited to 1 convert symbol. Each conversion is returned in its own 'quote' object."
            },
            "convert_id": {
              "type": "string",
              "description": "Optionally calculate market quotes by CoinMarketCap ID instead of symbol. For example, 'convert_id=1' would replace a convert query of 'BTC'. But basic tier users are limited to 1 convert_id. This parameter cannot be used when 'convert' is provided."
            }
          },
          "description": "Query parameters for converting a specified amount from one currency to one or more target currencies. 'amount' is required along with either 'id' (the CoinMarketCap currency ID) or 'symbol' (the currency symbol) for the base currency. Optionally, 'time' can be provided for historical conversions, 'convert' for target currency symbols, and 'convert_id' for target currency IDs (mutually exclusive with 'convert').",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__BLOCKCHAIN_STATISTICS_LATEST",
    "description": "CoinMarketCap Statistics Latest API returns the latest blockchain statistics data for one or more blockchains. Bitcoin, Litecoin, and Ethereum are currently supported. Additional blockchains will be made available on a regular basis.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "BLOCKCHAIN_STATISTICS_LATEST",
      "canonical_tool_description_hash": "0e5ee9697bf0103e7eca74836eb5e0b893add278c5914e49513ca7d34d466cca",
      "canonical_tool_input_schema_hash": "7232d82345e1a4139ab25b30cc9686588bd3c4cb55743916f0c2ca6e56737b0a"
    },
    "input_schema": {
      "type": "object",
      "required": ["query"],
      "properties": {
        "query": {
          "type": "object",
          "required": [],
          "properties": {
            "id": {
              "type": "string",
              "description": "One or more comma-separated cryptocurrency CoinMarketCap IDs to return blockchain data for. Pass 1,2,1027 to request all currently supported blockchains."
            },
            "slug": {
              "type": "string",
              "description": "Alternatively, pass a comma-separated list of cryptocurrency slugs. Pass bitcoin,litecoin,ethereum to request all currently supported blockchains."
            },
            "symbol": {
              "type": "string",
              "description": "Alternatively, pass one or more comma-separated cryptocurrency symbols. Pass BTC,LTC,ETH to request all currently supported blockchains."
            }
          },
          "description": "Query parameters for retrieving the latest blockchain statistics.",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  },
  {
    "name": "COINMARKETCAP__KEY_INFO",
    "description": "Returns API key details and usage statistics, including your current rate limit and daily/monthly credit usage for your API plan. Use this endpoint to programmatically monitor your key usage and ensure you remain within the allowed limits. This endpoint updates in real time with each request and does not consume any API call credits, though it does count toward your minute-based rate limit. You may also view your API key details in the Developer Portal dashboard at https://pro.coinmarketcap.com/account. Data provided by CoinMarketCap.com.",
    "tags": [],
    "tool_metadata": {
      "canonical_tool_name": "KEY_INFO",
      "canonical_tool_description_hash": "3cdab886ed91874a8a9e0fa4c3de32c4b3ffe6ac68621d3a27741e2187f230e7",
      "canonical_tool_input_schema_hash": "44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a"
    },
    "input_schema": {}
  }
]
